{
  "version": "v2.8.0",
  "id": "8276f382-76de-4662-b46f-08ddb5513ebf",
  "repositoryID": "00000000-0000-0000-0000-000000000000",
  "repositoryName": "",
  "workspaceID": "00000000-0000-0000-0000-000000000000",
  "workspaceName": "",
  "status": "error",
  "errors": "{HORUSEC_CLI} Error while running tool PhpCS: invalid character 'F' looking for beginning of value",
  "createdAt": "2023-04-17T21:59:17.4483756-04:00",
  "finishedAt": "2023-04-17T22:02:05.9865039-04:00",
  "analysisVulnerabilities": [
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c49d4f21-99c1-4620-86aa-e00e697b62c6",
        "line": "7112",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\package-lock.json",
        "code": "      \"resolved\": \"https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz\",\n\tInstalled Version: \"0.2.3\"\n\tUpdate to Version: \"0.4.0\" for fix this issue.",
        "details": "(1/1) * Possible vulnerability detected: json-schema is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')\nPrimaryURL: https://avd.aquasec.com/nvd/cve-2021-3918.\nCwe Links: (https://cwe.mitre.org/data/definitions/1321.html)",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "CVE-2021-3918",
        "vulnHash": "eac2cc99c8174ee6451e852eeebe9169889c3dca9f866d544b743d4354be3c0f",
        "deprecatedHashes": [
          "1f6e04710e10ccddc31d535db42b300b563b52198188cb5a5a1ad7cf48f3d2b5",
          "f56faa54a08cdc46c5323de39edc3ed24d8471cf31a8d116c73383c4a86f544d",
          "c515b8192d03360f1b09697a0e328dc8d862150c533fe062c83d147428356f60",
          "ed8683f10c93a1c6b40858b104646367f698ef56b57f9a031facb50bb76a5189"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "675d9460-6f0a-4b17-be7b-bc5c552b2808",
        "line": "2396",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\package-lock.json",
        "code": "        \"underscore\": \"\u003e=1.8.3\"\n\tInstalled Version: \"1.8.3\"\n\tUpdate to Version: \"1.12.1\" for fix this issue.",
        "details": "(1/1) * Possible vulnerability detected: The package underscore from 1.13.0-0 and before 1.13.0-2, from 1.3.2 and before 1.12.1 are vulnerable to Arbitrary Code Injection via the template function, particularly when a variable property is passed as an argument as it is not sanitized.\nPrimaryURL: https://avd.aquasec.com/nvd/cve-2021-23358.\nCwe Links: (https://cwe.mitre.org/data/definitions/94.html)",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "CVE-2021-23358",
        "vulnHash": "5f13880697b79639e8828933adc8dc5da11bc5a6e6a1793ec68f9709c3081d92",
        "deprecatedHashes": [
          "8bf85ee8c8ea1f682fe6e7676293388652478253336ad42153a2384012390048",
          "290f9c5ceaa5a781c79ad2e05d8a981750050b315d30b2eb4d571d3c953772ff",
          "4bff613222a2b737d7eb29c6367c1216a23bd6763fdcbe8f0a3d958ba657798a",
          "aa2fee3a75663f7b5623a1cb801790335cbecd140e78b814cf865a87e64fe4ce"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "da4d3b86-357b-4a37-9d91-33f24d6f13c8",
        "line": "471",
        "column": "20",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\2a.jquery.history.js",
        "code": "j = eval('(' + text + ')');",
        "details": "(1/1) * Possible vulnerability detected: No use eval\nThe eval function is extremely dangerous. Because if any user input is not handled correctly and passed to it, it will be possible to execute code remotely in the context of your application (RCE - Remote Code Executuion). For more information checkout the CWE-94 (https://cwe.mitre.org/data/definitions/94.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-2",
        "vulnHash": "e47304c43310b626d8cc5226f149ccc27244822066b2284ea5db4f24f3df5f75",
        "deprecatedHashes": [
          "32cae10113fd9a55d1892588ee1a51fc1a5afb2d6d5750d47d29c57ec5190ce2",
          "9f563e1c6fff7f3c2ec93ad8edbb4ce899e642778a3770356ab201e6b60edf6a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6cec2113-2a70-410a-85d7-0516dda3a10d",
        "line": "156",
        "column": "1115",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "eval(parent.mQuery('input[name=\"page[isPreferenceCenter]\"]:checked').val());var slots=['segmentlist'",
        "details": "(1/1) * Possible vulnerability detected: No use eval\nThe eval function is extremely dangerous. Because if any user input is not handled correctly and passed to it, it will be possible to execute code remotely in the context of your application (RCE - Remote Code Executuion). For more information checkout the CWE-94 (https://cwe.mitre.org/data/definitions/94.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-2",
        "vulnHash": "7307a9022e196c61391abf81a131c48a7610fc7922e8c9dac029c269aed3ee45",
        "deprecatedHashes": [
          "08094c32a9125f4550738f90f69f54035aab0d3524e0899c7b0be3ed086e22f6",
          "85e772ba6acecaf60a904f536caec4718eed6d5de791b4b74b6c865620aad4df"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "094016b5-c8ec-4b62-bc66-2d7ef81bb620",
        "line": "244",
        "column": "90",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "eval(parent.mQuery('input[name=\"page[isPreferenceCenter]\"]:checked').val());if(!isPrefCenterEnabled)",
        "details": "(1/1) * Possible vulnerability detected: No use eval\nThe eval function is extremely dangerous. Because if any user input is not handled correctly and passed to it, it will be possible to execute code remotely in the context of your application (RCE - Remote Code Executuion). For more information checkout the CWE-94 (https://cwe.mitre.org/data/definitions/94.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-2",
        "vulnHash": "464e7e5476450a266a4f1444f60e0e89a27d1573eed854b472e81955be6deb92",
        "deprecatedHashes": [
          "2dc2e5378887d1a7cf69d3863912e1fb59ba025766b3b5f999b70024e5251862",
          "464343b87483f3ad8fd7f61ef2bba6741217f7c53b8619358185cfb58c1a89fd"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f1df9b85-3345-457b-a930-1eac3edee710",
        "line": "164",
        "column": "1115",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "eval(parent.mQuery('input[name=\"page[isPreferenceCenter]\"]:checked').val());var slots=['segmentlist'",
        "details": "(1/1) * Possible vulnerability detected: No use eval\nThe eval function is extremely dangerous. Because if any user input is not handled correctly and passed to it, it will be possible to execute code remotely in the context of your application (RCE - Remote Code Executuion). For more information checkout the CWE-94 (https://cwe.mitre.org/data/definitions/94.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-2",
        "vulnHash": "0634da6054225cb039de262e527cecb1b3c669f2de2ec868899d65e6d0bd40f5",
        "deprecatedHashes": [
          "772d41ed26c8e53b3f0701345325613d7815b79316ecabaf18fb40b51182c66e",
          "ab44b8918e65cdb56ad4dcb5daa90c733ad8781298bdd6735ae9378c834fa874"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "681d6ae4-244b-40c6-b387-8642a0a18979",
        "line": "264",
        "column": "90",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "eval(parent.mQuery('input[name=\"page[isPreferenceCenter]\"]:checked').val());if(!isPrefCenterEnabled)",
        "details": "(1/1) * Possible vulnerability detected: No use eval\nThe eval function is extremely dangerous. Because if any user input is not handled correctly and passed to it, it will be possible to execute code remotely in the context of your application (RCE - Remote Code Executuion). For more information checkout the CWE-94 (https://cwe.mitre.org/data/definitions/94.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-2",
        "vulnHash": "b1651ef5d40428129cc8c93a1669a670546b6ca04c025b32d38e4edef74c6c66",
        "deprecatedHashes": [
          "3c4ed214fc2ae632965cafe09c10935a383aa17ea58faa0b1c6ff191d8d15660",
          "120e8161db1680acfec24827c13d8ea7a86456de8045558f2777cf46dd535e60"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "48a13a8d-1ebd-494e-ab03-4ec5a49baaea",
        "line": "826",
        "column": "199",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "eval('('+text+')');return typeof reviver==='function'?walk({'':j},''):j;}",
        "details": "(1/1) * Possible vulnerability detected: No use eval\nThe eval function is extremely dangerous. Because if any user input is not handled correctly and passed to it, it will be possible to execute code remotely in the context of your application (RCE - Remote Code Executuion). For more information checkout the CWE-94 (https://cwe.mitre.org/data/definitions/94.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-2",
        "vulnHash": "e270c7f9f7baf19f5fad4e9a2afd1a027dbcef746232f0ad44313e321f88a914",
        "deprecatedHashes": [
          "4bbd052b5f3e117cb870c0a82be9b5c6afdbd390a215ba6d15e60fa770b6ddcf",
          "ba4ecd75bb433ba0ce112151c4677ee0930fe4d0eb276586985aa67e8eddbb36"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ead1530f-5d69-4181-bf98-af319baea4e0",
        "line": "826",
        "column": "199",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "eval('('+text+')');return typeof reviver==='function'?walk({'':j},''):j;}",
        "details": "(1/1) * Possible vulnerability detected: No use eval\nThe eval function is extremely dangerous. Because if any user input is not handled correctly and passed to it, it will be possible to execute code remotely in the context of your application (RCE - Remote Code Executuion). For more information checkout the CWE-94 (https://cwe.mitre.org/data/definitions/94.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-2",
        "vulnHash": "cce86d7188b2df71e1cad71d0fb68b83a60a5c8fe51e57a7bf439e81316bf1fa",
        "deprecatedHashes": [
          "de1f2a49b61016ed99cca51791c50380c9c667c08343008bc339123d76484fe2",
          "8a2255a95c176bdd685c471279b6f5a8b4133fd30f1b0e0456abcf667f68f983"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "52927468-b32e-41ed-8237-1ea93aa1bc36",
        "line": "35",
        "column": "28",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Loader\\EnvVars\\SessionEnvVarsTest.php",
        "code": "$this-\u003econfig-\u003eset('secret_key', 'topsecret');",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "98e5a4a20619c20a16401fcaf22777bdbc36eeb70851e6701c56f0b889f884df",
        "deprecatedHashes": [
          "30ce4c6b0114c5c23d36e051ed6cfb92f71ae6e7b9f7e5043d630b94e3b914b2",
          "1e0afd1311b98a1d8dbbcea3813a2d461a7821fe93172e32329ce3fd52e9e6e1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "481b091f-aff6-4ff1-94d7-1e758a65aca4",
        "line": "8",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\checkbox.js",
        "code": "accessKey:\"S\",value:\"checked\",setup:function(a){this.setValue(a.getAttribute(\"checked\"))},commit:fun",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "a6eb1dd13cf2675fa982f21136dcac0c089bbbccdb8c4b6ab7cafdfa03c03093",
        "deprecatedHashes": [
          "9f133d47f1029a61c82cd09aa38e0a01ddb833eb50197ad9a3ae3c1192346dba",
          "e0fb010eb69dd531aae36151c2a917a40d80461c620d1495f4c3a3b05937e4de"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "213a9fec-9093-4833-b2de-6870e950be70",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\checkbox.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "f0d6f9a915022ec125010736fde1d543f2447af8ea77d2275fe97c7cfd430138",
        "deprecatedHashes": [
          "5c84fccbe2b130f4b744568f67e2a32ae1c7c2400ae0d8f9f9ed6698dc4ec8d4",
          "bc1d2af5ac70dad7125be7807446da18347ef9a7c9a5be4592f11bedb95bb8ec"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "901c7225-d235-4e8f-9945-10c1255f1d26",
        "line": "30",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Helper\\UrlHelperTest.php",
        "code": "'http://username:password@hostname:9090/path?arg=value#anchor',",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "b61f08f47e620f29984a3e8523b41544df10aecfea530b76c54168c6c5c0941d",
        "deprecatedHashes": [
          "ff985733296d91b1b6bc0be03a4576d805d936ee7a355252c6a8d1f00e6deb7f",
          "83309c16e2252fbece7676872310f92691ce601409eb939e08d971f80094a2c7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "80152b7d-8ba2-4ebd-9d10-e8c8dd8a6e53",
        "line": "31",
        "column": "44",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Helper\\UrlHelperTest.php",
        "code": "UrlHelper::sanitizeAbsoluteUrl('http://username:password@hostname:9090/path?arg=value#anchor')",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "da91e53ec82277f602448a998466dc592782f83f8268c9b6644c56f1524e487e",
        "deprecatedHashes": [
          "89204584979640b79cdc059815ced42f438c1353f8c1aec68467187cbd62ef42",
          "27ee19d6e6ad2fc22a542e93c4c663b66d2790ee8d1a84bb796b23b9f9f4d3e4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8d759420-eeb8-4900-af91-94b1ea843e27",
        "line": "38",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Helper\\UrlHelperTest.php",
        "code": "'http://username:password@hostname:9090/path?arg=value#anchor',",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "2039e8b7356c1c64c393f18831eecb64500a7353edb668cce9742eecb44d2e6c",
        "deprecatedHashes": [
          "f64cf8c7219428951ca18b8fd51070d6c956c4c657cbf648fe6347682cf190d3",
          "90e87c3d3794bd2f1037b0799cdf4f112fdfabbdd5a7fcf22f166025f01bb6e3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fc7a0309-b65a-449a-97f4-c37a5bc13eed",
        "line": "62",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Helper\\UrlHelperTest.php",
        "code": "'https://username:password@hostname:9090/path?arg=value#anchor',",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "6d03659c3c0b34dfbf5a156a4066375e690892c01f95326a44e17d83eb53bc3f",
        "deprecatedHashes": [
          "508914edd7be8b45dd00d1d095e764349ba40e4c03194fd47acd5a91fca7c28d",
          "c0e2a692b75480807a0691f1f2e0c31d4570a44cffb4768f9579c460d8fdf1ae"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "801ca04a-7a77-42b7-9cbd-0d808c219194",
        "line": "63",
        "column": "44",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Helper\\UrlHelperTest.php",
        "code": "UrlHelper::sanitizeAbsoluteUrl('https://username:password@hostname:9090/path?arg=value#anchor')",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "634e80a85254029f2f3a1944d4ef50bb8495d70023772c7c87d66744393d6ef4",
        "deprecatedHashes": [
          "2d130400accfd4af7210c017b16be757c217f7bc404a3e73bafbf377de04da0f",
          "50cfd2c739cbb4bac690ee20adb6c7a83a604ced13dd91b2c5efba6e424963f0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "007d916c-8ea9-4075-a0c3-3edf431547da",
        "line": "70",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Helper\\UrlHelperTest.php",
        "code": "'http://username:password@hostname:9090/path?arg=value#anchor',",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "edb9eee28ca5b2f543d546c4c8c88aa92aafe8dceb23e040f3a8fc366d7353cf",
        "deprecatedHashes": [
          "77dc98797fd41c9538eb9b081c04576de73bd29b277bc04bfa7a073023a7fa06",
          "08512636477e0a69cafef09ece62c8f12b59a3ec18bce5146b97f2fdc2908e38"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "457eb7a1-f7d5-4e70-b47c-c321ce85f3d6",
        "line": "71",
        "column": "44",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Helper\\UrlHelperTest.php",
        "code": "UrlHelper::sanitizeAbsoluteUrl('http://username:password@hostname:9090/path?arg=value#anchor')",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "d2fd885811fd5568d0559672255ea886914614331bcd3a981845549c9a016bc1",
        "deprecatedHashes": [
          "4f981dc628f71566f98277f4499632841c8369719036582b2d9fe3c93e0da6c7",
          "5fec6ee0ba3e9bea7b729c44a8fb179b97b7984c6bf8412dc5ce490077d66204"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ec06da32-8834-4082-98c2-287da88e6cda",
        "line": "78",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Helper\\UrlHelperTest.php",
        "code": "'ftp://username:password@hostname:9090/path?arg=value#anchor',",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "c9ce8ab6a199cef85ec1915a4f78e86626c746b8d793755853cc3e5d1bf6ddb0",
        "deprecatedHashes": [
          "41c908de10bd7e2ed6aeae674ab715f7bd91cf71e9135e78fab328c86758d854",
          "8317a718d3040186d23725144c4ce36a4eb56e50a28fb0ca9ac0a1167b10fb7f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b8b1753b-00e5-4abb-b03b-5502a71ef57e",
        "line": "79",
        "column": "44",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Helper\\UrlHelperTest.php",
        "code": "UrlHelper::sanitizeAbsoluteUrl('ftp://username:password@hostname:9090/path?arg=value#anchor')",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "dc390210ccee8836aca636e245d5147b74705253d69afef392eca3aa17b93dd3",
        "deprecatedHashes": [
          "860ae954f769d0fd422d0ba304407369b2c862687623ed53f7d3a7e6a3303f25",
          "d5c4b7917c0a6b9a1d8dd5db162663c668100fbb8014e15572b3da86f664ff5a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4207e837-9f6f-4780-90a1-37785e2e505b",
        "line": "86",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Helper\\UrlHelperTest.php",
        "code": "'http://username:password@hostname:9090/path?ar_g1=value\u0026arg2=some+email%40address.com#anchor',",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "a7ad9b369b7ee88500e80a0925db862897bf1e914ee5fff907ae0420a6ec887b",
        "deprecatedHashes": [
          "01dae61e50bc43b8cf1bc08914822107968d1012ba675d54d07a5189166e16f7",
          "05d464f8deb9e98d38103028c07b047ae2571c8efc658f23dd14f2a791fd83c1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3ccaedb4-2b4c-4a0d-9847-eea07621299c",
        "line": "88",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Helper\\UrlHelperTest.php",
        "code": "'http://username:password@hostname:9090/path?ar g1=value\u0026arg2=some+email@address.com#anchor'",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "41471688fdb24def9aef02de3100aa0da254beda9c705cf4a651bf9934435227",
        "deprecatedHashes": [
          "502ff29434c3b6c95b53018eb4c6ba32d94412081e9959db6b6b22300b4f5fdc",
          "e807310330252c2be33903a6243e5e311f2fb7af4f78c763dc8e2409a54768c2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6eb7c0be-c0fe-46f2-bdba-346c03d02a89",
        "line": "96",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Helper\\UrlHelperTest.php",
        "code": "'http://username:password@hostname:9090/some%20path%20with%20whitespace',",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "c38c79751ca5b6e8f7d315dce34504b464d8e98d4ce59b2e91dbd8981fc53ab4",
        "deprecatedHashes": [
          "7e566991d2bbb39ce15bd27437eea5e07580ba2eca6031f4c34265b5cc53a1fe",
          "00778ee1cb5a5c0afcc2c7802ccb74b59097e0f7e0ab42bb0db6fc4a88fecbbd"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4bf41bba-4be0-4fc1-a569-48c3a62635a5",
        "line": "97",
        "column": "44",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Helper\\UrlHelperTest.php",
        "code": "UrlHelper::sanitizeAbsoluteUrl('http://username:password@hostname:9090/some path with whitespace')",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "fe9e9db8cd3009dc309075ba1e8a8ca827ef65005e0dc3ad5fb258adb68124a6",
        "deprecatedHashes": [
          "dda2ac8fda7c94728f85a50595f447d1769edf5ff7b65d7c22a25b95faac9c87",
          "c55bc1ebf78191bb2dad26fd9918defb6da0b32adaa330ec1a2e9e1d2e89d2ac"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "08c25839-0620-4f0d-9fd5-d6d646c12551",
        "line": "189",
        "column": "16",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Helper\\InputHelperTest.php",
        "code": "yield ['http://user:password@www.mautic.org', 'http://user:password@www.mautic.org'];",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "a4da8d540d8c68845bb0c3df8eb1650eb4e0e8e9195b74e8ae4360e8019558a5",
        "deprecatedHashes": [
          "2b33cb1f590b45c7f0eaf2aba44c5e846f0883c4635a461ecc05e3bf69c064ad",
          "eee516d0498b0bb54b20c2af9b1e48f0867c4c1026aa2eb3b8e9a24a0e9fc119"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "13509f64-4e15-4c35-be18-38a3d59f23df",
        "line": "194",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Helper\\InputHelperTest.php",
        "code": "'http://\u0026#60;img\u0026#62;:\u0026#60;img\u0026#62;@www.mautic.org' :",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "dbce9d5628badf17bd1bc62b39cebc87f5958a2f74dc97879352dfea4ad9f6ff",
        "deprecatedHashes": [
          "f66629e9c0440ecc304253a36e9fb56c043b6e959c4c8bc52d2058ee7f136e16",
          "b5e4d9c886d4f294a297c06e10fdce3a8c307124e671a28d877326ac492dd3a3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a702f41e-e11a-4772-84f9-96da0e5d9e2a",
        "line": "196",
        "column": "16",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Helper\\InputHelperTest.php",
        "code": "yield ['http://\u003cimg\u003e:\u003cimg\u003e@www.mautic.org', $sanitizedUrl];",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "e6050cb0dd8d5f61fc036c860fb2be348bf8a44cd73d387477e424dd0378b489",
        "deprecatedHashes": [
          "728a3d27de223db8b2acb8b757fe3db122d12afffdcfe3c952fdab113f5a8cb3",
          "6376f934d48d05443f5542b522d5a1215438ba4b4b85cc6de8a85faa6b1c2826"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f86bf17c-5f2c-4138-8d55-ea5859d17a8f",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\bs.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "432c2baeeec725478549a2aea8b7c0ee1309b9d61beade97aedc72f096d0d29b",
        "deprecatedHashes": [
          "d777b2fdc84d36728720040a22a45b63509d3ebf1ca7fd4742328306e420b8ed",
          "ee83f9b13b954f50b610f4957bc3423b208b2b63182e3744fde9dde49a0a26fe"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e52e14fc-6ba2-491c-8980-4bb9caff0f96",
        "line": "9",
        "column": "37",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\select.js",
        "code": "accessKey:\"\",elements:[{id:\"txtName\",type:\"text\",widths:[\"25%\",\"75%\"],labelLayout:\"horizontal\",label",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "0776df310ad4aeb2ff86ebb6e2afdcb8489e377d06a4af5cd04f1619e652db88",
        "deprecatedHashes": [
          "afe4e8235f866835ec5877bd281cf2009be946df06833b70ac6fc9c4fe65a7bc",
          "4371e70b920c93f43ca62bb64d59fa7061dc3e2084590b31b271a6e7b79c47b6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "dc45188e-e297-4331-aafe-0977fc3b93d8",
        "line": "9",
        "column": "170",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\select.js",
        "code": "accessKey:\"N\",style:\"width:350px\",setup:function(a,b){\"clear\"==a?this.setValue(this[\"default\"]||\"\"):",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "17044305567ac65da3d461ebbb06e5c7c46db5df001b69d602dd06d495eb70e7",
        "deprecatedHashes": [
          "efb23bc60c2179ca781a537ff7c1639521c95a5fe3fca79a7ae0ddd34d29014d",
          "59d91a25bccba152a5c0a89a5fa1260b1bfe23efc1f8fa9d1e14970c27799580"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2b93872a-709b-41d0-a4f2-4157acb1e8ef",
        "line": "11",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\select.js",
        "code": "accessKey:\"S\",style:\"width:175px\",validate:function(){var a=CKEDITOR.dialog.validate.integer(c.lang.",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "3b8b6551b7f52f4856900bd0faed25184e826be7edfc6b0804450d88f63866d0",
        "deprecatedHashes": [
          "421d178239a92dcc0ec26e0abe14b680e053c1841e9bfe5821b39539946fdb51",
          "e9c35b6f06fac475f39acf254a66874e2bd933c4a192fdcfcf6d55c72447625e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8c84bfcb-e80b-4310-b4a3-eb1dc46a22ac",
        "line": "20",
        "column": "139",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\select.js",
        "code": "accessKey:\"M\",value:\"checked\",setup:function(a,b){\"select\"==a\u0026\u0026this.setValue(b.getAttribute(\"multipl",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "6b478924b74040ed930926cd74e01a0009061050940a06bd1068a6c248321b59",
        "deprecatedHashes": [
          "0c21e30bb37a7f0212d53cab74c3f06c05892879e6423377adf96223362ffc4e",
          "72cf729c9fe16948d203ad05e7732e20297c346f70715d03a01af1797c606129"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "90d05b1a-3caa-49fe-867b-3516cbf1ed07",
        "line": "20",
        "column": "434",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\select.js",
        "code": "accessKey:\"Q\",value:\"checked\",setup:function(a,b){\"select\"==a\u0026\u0026CKEDITOR.plugins.forms._setupRequired",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "1860c7046bf19c004925c967b912e65041149fbce691ed6df53dd41e839b4bb3",
        "deprecatedHashes": [
          "8c4bca9574ed9724e0e00c8d332448ee9d7d87acdc47aecd97a4157bf1b82b6e",
          "d5caa17a2dff875f761da55fa0c4f0246ec37f2889b51eb8d47f238a53d4d995"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "efa260c9-bc4f-4179-8659-b7c6e8f2fe89",
        "line": "25",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Doctrine\\Connection\\ConnectionWrapper.php",
        "code": "$params['dbname']   = $dbParams['name'];",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "98d4cad68390d8200c516d15117c56cd25c824e87a83b034ff90a2de60c10971",
        "deprecatedHashes": [
          "c155658e8faff2fb59fa0481ff7e2159f31b84e2780c2d973f414219bb7a2a54",
          "75215f473e7d9d62d5d7a000ba52076c17aca8fe5b7b8d722e03d4a48297ff95"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "072c7a91-c201-402b-853c-643f85d6543c",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\cs.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "740f823d6eb5aa86ca5da35150078fb11091281d6e88438ab7a87372b0ebf975",
        "deprecatedHashes": [
          "4d62169997af6ab2244ea613278cd065ba515af52539b1f877e90603a99cfd9c",
          "6783adc190a3c5f55458605a814896ff8b85d677f31faac903a46d629b450fe4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3cf6545d-f116-44e7-80b8-85d8ea011291",
        "line": "7",
        "column": "263",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\button.js",
        "code": "accessKey:\"V\",\"default\":\"\",setup:function(a){this.setValue(a.getAttribute(\"value\")||\"\")},commit:d},{",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "d51513bef1189dbf606479e2607da12871a04055c8b2506dc14c027cee38bd20",
        "deprecatedHashes": [
          "f067cd23d2f8888341c1a5803b2420dfa25b9677c257050d7456a473cf5281d3",
          "b68a99da060b016c099d3f00ce33be8836f9cc78caabe71d46f185bc0b34d7e0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8ceb88b5-5e1f-4a5d-9bab-6e1426c42ac0",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\af.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "e23b77aca8975bfd4e6f276e1f3344dbb5156145f73ed886bf110079e1ec90cc",
        "deprecatedHashes": [
          "cc9a07b81abdff3d44a9b32d42da66ea2352336c9d92fed8f753c5f71cbe705d",
          "120dfd3e9f06953796cc8ee6739ee88b969e2487b45abf7946ac452a61bc4e8a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8ffe9500-bab5-4678-998c-1c7f5c05c044",
        "line": "15",
        "column": "24",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Loader\\EnvVars\\SessionEnvVars.php",
        "code": "$key         = $secretKey ? $secretKey : 'mautic';",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "f5a405f9a6d8444482cc12c7d4ce1a229c7d58f4d00d37f99d15e57e4007d2d9",
        "deprecatedHashes": [
          "d58d3b3e1dd1aacdf66835ce6cffcb026015b4161497ba27bb4551e838131364",
          "a03e61ca096f6a2fb95bede25864fb011c2ad678c8b966b43f4ef23175971bee"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4fac4d8c-b9e2-4e6a-af87-f929f1375ac6",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\de-ch.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "fdbf9714d9b440fe0866cbe123e7174f4e3e3806f96bca9b072d535d0a91d37b",
        "deprecatedHashes": [
          "a18a7865d0b2caba1c800d455ac7f7354a9ff59ba8efc813e04f76231da6ab6f",
          "727ae02d782b593460b47a31d069dbcda2efd49f052c982f370a59667f76627f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "760b57c3-9a9e-499a-830d-7dffcdea6cc3",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\pt.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "3018b24ebc0720bb1db0eba78dd6fe8e43fea5e24c95a5770b9d3cdf2d2d1e82",
        "deprecatedHashes": [
          "1f776f5c53a5940e5f027c5b0800ef5232d5ad48eccd50f13fda1d6054818b95",
          "bdd85f99bfe60332130c92a5c4ccc0cead57add28c08fdd230858b196cc1b3f8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f563ba3f-b539-4cbe-b354-ed70885ceab9",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\ms.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "a3bbb3a60bed575fb91a411d3a84809bc82924190ab3bc5af35bead38533b7a3",
        "deprecatedHashes": [
          "fe0972507cdaa94a175cbe635e1fee5e438ac4a001843f5a55361b00bf1c4528",
          "cfb2b3fde55043b5c36a0dbee8842f84a25916d90c361c59ba7047c1c946724e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0bc4ac42-6746-4216-bf95-7ed77af6e653",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\en-ca.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "c6871f30a9227b14449f4a8ad83b9bafedfd61d9328714665e60c6e637f6303d",
        "deprecatedHashes": [
          "be792d79a139dfc066354ec6b28c4cf5df0e16a5eb65d5158fd82b6c52d6caf2",
          "47014e4fc95d05b5654ceae1219cb04379303a2759ad41d44705eac39379d913"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f909a52c-acc9-4303-97e8-58876560a9e9",
        "line": "91",
        "column": "44",
        "confidence": "MEDIUM",
        "file": "README.md",
        "code": "edin.com/in/miroslavfedeles\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/6388925?v=4?s=100\" wi",
        "details": "(1/1) * Possible vulnerability detected: LinkedIn Client ID\nWhen use LinkedIn Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-9",
        "vulnHash": "c48db6546da9f58098c9f0091cfc3a5bce62386cd1bc075874a8062397b728b5",
        "deprecatedHashes": [
          "302833f9c54f6659f9f2fa1343404720f8dbb651a4d84ff2035431d9c6ed25f4",
          "21526c75ab7c0d2d32a2c88ebc1d161ced130de27ac14b41c7624db9e2c70910"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1caf1888-1a2f-44de-bb7e-bc433fa27175",
        "line": "109",
        "column": "43",
        "confidence": "MEDIUM",
        "file": "README.md",
        "code": "edin.com/in/rehannischal\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/43839944?v=4?s=100\" widt",
        "details": "(1/1) * Possible vulnerability detected: LinkedIn Client ID\nWhen use LinkedIn Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-9",
        "vulnHash": "a385ba10737918a181bfd7f001d008bbc8a5e4cb1198fe90dc7e946a6e5038f9",
        "deprecatedHashes": [
          "de51a933068fd910bee94f50d3c46e4ac8f855303563b7888f2e54ecf34d698d",
          "860a7a885b7d7aa6c33a3edd10965ce7d893f9bf5ee088e8b4db7d227dfb36aa"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a8769219-e818-4046-8d6b-80e8e5309551",
        "line": "145",
        "column": "44",
        "confidence": "MEDIUM",
        "file": "README.md",
        "code": "edin.com/in/mohammadlahlouh/\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/7312050?v=4?s=100\" w",
        "details": "(1/1) * Possible vulnerability detected: LinkedIn Client ID\nWhen use LinkedIn Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-9",
        "vulnHash": "ff8dbcccff516c2bdde49f112fcdd9793b2bbd0ca9f912efd19a9e0a0f979b66",
        "deprecatedHashes": [
          "1cc01d187a561e42473dee2194256cc86785403a9489e3097b0ae61683ea6b49",
          "26ced6afee5ee18ee7b56700c9c27a78fb4d9429f33d8916299f51c3c958c3cb"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7a61931e-14f8-4ae1-9311-f3b99b926bff",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\fr-ca.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "2f0942999410e35df179851b3fc2dbbd819dc1cd5f94fb07b86803fc13f21cb4",
        "deprecatedHashes": [
          "0e5d28c62c94ef991bc96b06936ce90a3e2942e6b511bd0e92cb3f2a5b6bdfb8",
          "dd726d3711c209bc008ee2474842b5f44a5fe0d8e124392f8f061b022ce8ebed"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f315b184-9df3-42a6-98c8-e2778f19d9a9",
        "line": "7",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\textarea.js",
        "code": "accessKey:\"C\",style:\"width:50px\",validate:CKEDITOR.dialog.validate.integer(b.lang.common.validateNum",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "8dec8b4c50ce19999baed0d1faa6ed1cbc462a2a1f7d5fcf67ef551feb27114f",
        "deprecatedHashes": [
          "56b6ec3b96d337c341a23af571354a0f4832280c14b94aff313e22002c8b50bd",
          "dfb05b21f9d8fe1202e27e7a9d1a66432e1a4d5cefc29ee6e6c11f2b5ced4692"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c8e3b592-8a9d-4ea0-84cf-4f3aaee2fef2",
        "line": "7",
        "column": "384",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\textarea.js",
        "code": "accessKey:\"R\",style:\"width:50px\",validate:CKEDITOR.dialog.validate.integer(b.lang.common.validateNum",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "5f8158fad81c11e8729caaf3cc35c8f1b7a77da28a8dc26ab64c99d9e0c694af",
        "deprecatedHashes": [
          "20d261684d97c5c7fd62a2b995d76275019cedf344a1d9e39a6e1540cadde76b",
          "36a9f84409a9a568fa06b66d0d68dda26025f5f7bc450ed1858cba9e1f360205"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b930ee6e-cecb-4749-b4a9-e106b3ccbdf8",
        "line": "8",
        "column": "446",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\textarea.js",
        "code": "accessKey:\"Q\",value:\"required\",setup:CKEDITOR.plugins.forms._setupRequiredAttribute,",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "e1456f50d36c7d0fbe5cc1c561fbe6a405d3248c9a729a9a37f94a9e23b5e9c1",
        "deprecatedHashes": [
          "87d698a918d524de78608e103d02230bf435800e04df2810c8e3f1f1480cfadf",
          "5ce4f469adc2e7f5bf2a82afb69601916890568594035005d542b5b8c3f35a81"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4f97e8f9-86fe-4908-bd9e-c069253daceb",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\it.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "fe9a8b11b21d5671ee399233601681a7f3c2c1e7b8cdfd5911cba8c3b26fdfcf",
        "deprecatedHashes": [
          "fea00a05c3249bf7cc3f2c13af9ad391c0b227d2884ca3be557b6e96d36784db",
          "9afac993a23f94012a3ffa9fcdd37e81fbb56be26bb27a786ee1a65e6185e29f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "03789b9c-d9f4-4c14-be41-bd4d0d5b1805",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\nl.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "98f43afe40879222dbe7bc57f9e4a052605018969d0d4ea923a31032d6b9757e",
        "deprecatedHashes": [
          "dc6cdd6add9adf15d4ea2ee7c0a22f7a860a0267b1a741077bc3e5a191c57303",
          "ad54ef98bceae862e5f3be269ee355361952f5e9d3d3750f127001f1e94ab41b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "cfb6c733-76e4-4eb6-b066-032ebdea2e1d",
        "line": "7",
        "column": "280",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\radio.js",
        "code": "accessKey:\"S\",value:\"checked\",setup:function(a){this.setValue(a.getAttribute(\"checked\"))},commit:fun",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "7288af2efbd5bbbd975d58998100afe3f6ea9dbe0a674b13dc7788e57f376183",
        "deprecatedHashes": [
          "f1b0264857fb723da30f5542e8f46d215118249a269386de6137b10cf307c6db",
          "d4c302dc52bd85327b1567f244ee2704dcbfc162713116aaf20e64c50bc400d4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5f73644c-ff29-43b5-86f2-96cbc69636b9",
        "line": "8",
        "column": "420",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\radio.js",
        "code": "accessKey:\"Q\",value:\"required\",setup:CKEDITOR.plugins.forms._setupRequiredAttribute,",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "83ca9420baf31a47a80edda260d77715037bc66b558b2511994375b75e2a0495",
        "deprecatedHashes": [
          "ddfd80182554e26c02eeaaa26161978cb979ca61a9752ad48212b332543a03e4",
          "bddb1911ea74a3f506cde837e13aeee3e2148ebe95ec3a724bb1cc714ae05fe5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1f1c3e93-090b-417e-84d4-5e5298f12ddf",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\ca.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "99ad954939ca3b12c827c059652cb782330fcf99b202509123343ad0b537e8ee",
        "deprecatedHashes": [
          "e5bd4e0fd363d044dcb47770f822e58acd9204aa4c687e536fab5b9ba64105b5",
          "d24a2da7f6f057c06eb41a14f18ba26eec5f79fabd629cb1fc55a8eb4002c88f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "318b76f6-4fd9-41e8-8930-aecc08094175",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\si.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "49569b5cff09a61a1be98802d73adf2f0bf41ebe9faec16d5e2dbd44ee7f224c",
        "deprecatedHashes": [
          "cf4fac172a97e8a13f0419eca884c29104b38daea74d02e1ab82fc500be43560",
          "8e2f9fd157e0aa76141d11ff03eb6d116ea226b3a75becf71f89be8c5638478d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6c5c4d18-7ff8-4a84-b093-d4cd2940c3d0",
        "line": "58",
        "column": "20",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\ConfigBundle\\Tests\\Service\\ConfigChangeLoggerTest.php",
        "code": "'mailer_api_key'     =\u003e 'fsjkdah',",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "42dc7aa7052c7d6b5902ca528ab325fa0eae262e8c1f18fa55e28e42975d65d1",
        "deprecatedHashes": [
          "e523e5be5269ccc946c1620d796c50b9a3c53cbbf6b271fe55820f21da953b2c",
          "e528c72590daeb924581ce8a5f8634e83a156c3997c8e37a9ecea29966379d66"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "85e46f94-5cc1-491f-87ba-f010ab359ef8",
        "line": "116",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\ConfigBundle\\Tests\\Controller\\ConfigControllerFunctionalTest.php",
        "code": "Assert::assertEquals($googleAnalytics, $form['config[pageconfig][google_analytics]']-\u003egetValue());",
        "details": "(1/1) * Possible vulnerability detected: Google (GCP) Service Account\nWhen use Google (GCP) Service Account is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-14",
        "vulnHash": "b4163f3b9b841941b9c783059fd417888b093970181e9f18d9da1109130c8b78",
        "deprecatedHashes": [
          "b4a3fdd9229bf1d649dd403c17df59b6f9e2fece4907a3ee71b3b5bef42017a6",
          "46523d6b135f60108fe5aa066bf399f08a33805fa7371002584650e8fdb7ab6f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "62df0e9d-4e07-43d2-88b1-305be6f8d5fe",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\en.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "0c1ba0a29d0c8529727b82cba60e73c430c4a72289701f34a1b674643fd645c1",
        "deprecatedHashes": [
          "c1dab2a056da6db906b744bb5a44c10ebf25cb5734ad6dd7bcf9e68005abaaac",
          "f4ecd06c2eabc7d91b6c46d547a9a67c0b7e35b411e96113cb5d77026cd9a4a2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "47e4a702-0d6c-45ec-a2aa-8e1ccf57a7df",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\en-au.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "e74b8577f3084c1a610309e43d4aaec28804b1724a8936e49b1fbb2aecc94670",
        "deprecatedHashes": [
          "9f8f33ee81244597ef3e07ea8f84c3bd254ff9b13ed53a9ebb6b050543b1071b",
          "4121fc01a29c7d76fc55b127f2e96b8f1f6c48b03f53a62175e8e7499fb5c277"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fec55365-a7d8-49d1-ad7e-28248dee4faf",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\de.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "4ba22e77647a162be8b527df2f0046a6e4c8799e00ef0f6f63ada2f38e351c54",
        "deprecatedHashes": [
          "4dd2158a692f63efb07b1155f6054c3e58002d2234885c2b6b9bc9954fbb663b",
          "e375c9889994b5ca32d1e64d79d4964b48c9257c4049985c4e0c35353a782ae2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "83b12250-729d-40bc-b180-aaf047c91422",
        "line": "111",
        "column": "43",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\DynamicContentBundle\\Tests\\Controller\\DynamicContentControllerFunctionalTest.php",
        "code": "$user-\u003esetPassword($encoder-\u003eencodePassword('mautic', null));",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "ddc57d04bb39e15c455ba5096f5ebe7c1df1e261af2f53169d1d95dfe064332d",
        "deprecatedHashes": [
          "c59a5a2f5db10165547638e8e6911a0831b502de544784c24d079fa925b3ea91",
          "9b925820a9f5723469c9419673db72048e9ebe50b3c47dc7275cf1f780668047"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "745afafc-3de3-4c11-ac40-11b44a700224",
        "line": "72",
        "column": "66",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\UserBundle\\EventListener\\ConfigSubscriber.php",
        "code": "$decryptedKey = (0 === strpos($data[$field], '-----BEGIN RSA PRIVATE KEY-----'));",
        "details": "(1/1) * Possible vulnerability detected: Asymmetric Private Key\nFound SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-12",
        "vulnHash": "c34dc4b0b6e1a07f97ad156f654a6b1462ad72f5938b673f3a425eec302c0be3",
        "deprecatedHashes": [
          "4ba22657681c218e6f30251562f615a0af590c444e304f76eec9f7432046a650",
          "287b1b8c356928c9dc74b64ceadb56d5af58e6f0621e67e1ee2f5c66ece82bca"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "75dd55b3-3ca3-497d-9b7a-b9daf86ff76e",
        "line": "66",
        "column": "53",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\UserBundle\\EventListener\\ConfigSubscriber.php",
        "code": "if (0 !== strpos($data[$field], '-----BEGIN CERTIFICATE-----')) {",
        "details": "(1/1) * Possible vulnerability detected: Asymmetric Private Key\nFound SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-12",
        "vulnHash": "e24eecedd7fef842927174841278d7f2ea2040e0b29133a0ebb194ccb4972208",
        "deprecatedHashes": [
          "58a053ffced2f57d64ba964a4f342e78b22d4e0ec7af7f76f88574582406ea75",
          "480206c21179d75c932c6863d132b05d7a876d30b4c8871d4c9c4dd21dfb3522"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e5d92958-b356-471e-bca9-72216f87b5b4",
        "line": "143",
        "column": "9",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Templating\\Helper\\AssetsHelperTest.php",
        "code": "$secretKey   = 'mautic';",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "7c63b087c747393aaa2a0769bf2fc1c9b8809d93089800e8af3fa620e0969a03",
        "deprecatedHashes": [
          "1edaab1fc7bcca4f04158d620b50b2903dab299588f4f144036e6b7952e483d2",
          "775a245d528b15a88521632e51d4aaa0233671cff97f7f022b754ab48aa5ced2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "63ec3fea-d751-4868-b9e8-a41d30edf7fa",
        "line": "177",
        "column": "9",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Tests\\Unit\\Templating\\Helper\\AssetsHelperTest.php",
        "code": "$secretKey = 'secret';",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "9f04d46ac838c8c80d040d26fc8a6579f414e3fe3be7fc8108683ec174bd8087",
        "deprecatedHashes": [
          "21a45bc3530259a495a5fbb24ec139b0cf4a2391f1c36b59071e70cecc0626df",
          "41762f48e127d3dc42b7ed29f7b6aff8b8c365e85eab0148ecd17a24b7e68c87"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ae0ad31f-ceb8-448a-ac89-2fb8070773a1",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\pt-br.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "13cc5d265c737728b10b9e45bf5ea30df1af909d3936264d1b494f56636166b8",
        "deprecatedHashes": [
          "f20063500fa1b4ebf44c3723ab9e8b7142816bf41d8c71092efff5fe22db2d4f",
          "ce62960efe4c9bfbc7a8912070caac2c5cdff519f96f8404e69921376c54f086"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "54f2395c-c762-4037-aee7-48f1213d8441",
        "line": "7",
        "column": "127",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\form.js",
        "code": "accessKey:\"T\"},{type:\"hbox\",widths:[\"45%\",\"55%\"],children:[{id:\"id\",type:\"text\",label:a.lang.common.",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "86103aa8c23fc9f77c6ee0dc1902c4b7d189c2873be9c2a7753b86a9131b0f4f",
        "deprecatedHashes": [
          "3b350e31c03ad15829d01100401ab8dd7331cbeb309522b58dd29d51a2311f88",
          "631864823f33abe55af0c4f2a098d3fb101f5c9eb548d5836b5741bfd5c3a0e6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "bc0511a6-239c-49b2-b473-acb0112cdb6e",
        "line": "7",
        "column": "243",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\form.js",
        "code": "accessKey:\"I\"},{id:\"enctype\",type:\"select\",label:a.lang.forms.form.encoding,style:\"width:100%\",acces",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "ccb5fa9f0be954bf8cac0983232a854d8d5208082ea5c88965dac289fc505438",
        "deprecatedHashes": [
          "a042e8e172a0661d989c7fdf6524764066f0e7cb6f34781eb872f95590e7408a",
          "0e8ca6a85e6c19fb18722d0f3f1b789b2aef44ec964c0e3a84846a05d924b89b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "793e45d5-6c4b-47f6-a1f3-3aa1e282384b",
        "line": "7",
        "column": "338",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\form.js",
        "code": "accessKey:\"E\",\"default\":\"\",items:[[\"\"],[\"text/plain\"],[\"multipart/form-data\"],[\"application/x-www-fo",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "80bec31d29e62e4b2318411a967f6a97509bad41fa9fae588693a5d0d9e83820",
        "deprecatedHashes": [
          "7431e4e3679415a7e8eb50543e3530626ccd0af9fc228712b1c8eece8be7ba7f",
          "247a0d44debe27248eacddc0d080ba73289a96a2e0ba6f17d788259134487062"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e0055ac7-7964-46ba-880c-035bd2d927ad",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\form.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "79c3ae5227508a293e9d2d8eeb3e4f7697a7692ab473760955b028e7b2a4a77f",
        "deprecatedHashes": [
          "7b251ada7251c719fb6396ee6981b04dd4bed71f065648817176dbc2e098c11b",
          "a1e0083d885a0c520ebe599dffa3b216fb445dc9a7108b642d52aef263073ff0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "30970637-306a-44a7-bc66-029f1ed8c17e",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\form.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "79c3ae5227508a293e9d2d8eeb3e4f7697a7692ab473760955b028e7b2a4a77f",
        "deprecatedHashes": [
          "7b251ada7251c719fb6396ee6981b04dd4bed71f065648817176dbc2e098c11b",
          "a1e0083d885a0c520ebe599dffa3b216fb445dc9a7108b642d52aef263073ff0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a7649f66-c5d9-4be6-a944-d5f5be153dc9",
        "line": "146",
        "column": "26",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\UserBundle\\Tests\\EventListener\\ConfigSubscriberTest.php",
        "code": "-\u003ewillReturn('-----BEGIN RSA PRIVATE KEY-----');",
        "details": "(1/1) * Possible vulnerability detected: Asymmetric Private Key\nFound SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-12",
        "vulnHash": "dc36d5d80655ae19dbc6a509298235d59e0428495e7c72369884b72926c21207",
        "deprecatedHashes": [
          "2d0a4fd96e33448d761f4fcc459ad196496832acd7cb91b753f7cac982d7b1a0",
          "6a5ac10071182eb2cc48af442aad37924a7ba53ccf6b5009d4bdfebef1d9110a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ea287cb5-093e-40b3-a94a-85982176dde7",
        "line": "97",
        "column": "26",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\UserBundle\\Tests\\EventListener\\ConfigSubscriberTest.php",
        "code": "-\u003ewillReturn('-----BEGIN CERTIFICATE-----');",
        "details": "(1/1) * Possible vulnerability detected: Asymmetric Private Key\nFound SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-12",
        "vulnHash": "a9d17db2f0a4ef4fbe3418a67992d9be07bf91281a57dfa9c4be3bfb5717a4cb",
        "deprecatedHashes": [
          "08d9a36300db1c217bbd3200275beecc3e16461fb37b4fd511b7d36d4638ac37",
          "e7f76a7806dedb4a5774c63f094fe4964e6a4f33631404c4133e1676c5f05313"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "35384d0a-60d5-4094-bf1f-f1cc1900c01d",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\eo.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "6ce4db74b18fe76a96939540dc2dbad812e0e6b85980da68aac53d630d4d3df5",
        "deprecatedHashes": [
          "d2743327945c6cc4e1a674238015ef9bab9bd47ce740f8f92984179858622349",
          "8fdd7ce9096d23374a5c4587fbffa664d26a9378982f8d74171e3e4245962652"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "98030683-778b-4d8b-9487-1fac82606495",
        "line": "18",
        "column": "27",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\SmsBundle\\Translations\\en_US\\messages.ini",
        "code": "mautic.sms.config.form.sms.password=\"Auth Token\"",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "3c42ebd318ec96021d2e418d6fc06b427d02e356a652d193ab877b973d51cf56",
        "deprecatedHashes": [
          "bef24e837a6ded9df296f79c708b0f71e5af35e2c2d6bd2bda11d07aa2ad6d7b",
          "bacd1cc8a1c8dcb88ee3cb31b2a33c2ffd1f1b6760cb85956a0a7dfb20010412"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9654536f-5d8c-4243-af26-713220745c4c",
        "line": "9",
        "column": "6",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Form\\Type\\TwitterHashtagType.php",
        "code": "class TwitterHashtagType extends TwitterAbstractType",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "1b1550e928cf8c531c2640926b4270d719cc743b097f9005d6648d5c29db3e93",
        "deprecatedHashes": [
          "74890849801db847a4d4ab7569f3525d5bab93d0dc64170cb82b7dba9ba676bf",
          "4bbafa5e02de0476dbefd69e871a2024e403f42d4670be3deea6ce2d7dcb3553"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "aa0289ac-8a14-4030-b465-769ad9935e5e",
        "line": "45",
        "column": "28",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Integration\\LinkedInIntegration.php",
        "code": "return 'https://www.linkedin.com/uas/oauth2/authorization';",
        "details": "(1/1) * Possible vulnerability detected: LinkedIn Client ID\nWhen use LinkedIn Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-9",
        "vulnHash": "4290f50e1be7fc0b4b69b24e72ff0912ebefd445a9e79ec59449d3a88e158ca3",
        "deprecatedHashes": [
          "b59580790f69a833b3fef6b87458d11bcdc6b98ae4fe2d5caeaf3cc060263138",
          "954903c8b96488a2f888af69f2eb4d159bdea410633c94aade0a1d3585af0d38"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8941c044-e391-4115-a858-223f40666227",
        "line": "10",
        "column": "6",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Integration\\LinkedInIntegration.php",
        "code": "class LinkedInIntegration extends SocialIntegration",
        "details": "(1/1) * Possible vulnerability detected: LinkedIn Secret Key\nWhen use LinkedIn Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-10",
        "vulnHash": "60ce74ca4fc48bad87c91ca99c9db6a670cad813749a30d32c3f8c009c005119",
        "deprecatedHashes": [
          "80d17e5962dcc24a052d7b2b24b7d2d60cb5ce73af9d3af685d7fad36c5d0b93",
          "60c0fbdc8cd54ec942efb0083ea62f1f18628dfc7ed94b8047f0810247695aa8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ffffe116-7d02-4db7-97c4-c4fd2f5d3444",
        "line": "120",
        "column": "66",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Integration\\LinkedInIntegration.php",
        "code": "$info['profileHandle'] = str_replace('https://www.linkedin.com/', '', $data-\u003epublicProfileUrl);",
        "details": "(1/1) * Possible vulnerability detected: LinkedIn Secret Key\nWhen use LinkedIn Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-10",
        "vulnHash": "13a680f0bf4c8a4f8be8fce4d8aa7bc7674f60ab94f33ef306d596bbe2add3c2",
        "deprecatedHashes": [
          "aff4dc6de1171c0ae78c70e8b902795e62927946bf81ba5fe777bdec33781060",
          "cf1c15eedd077f31da9bbdc4bde2fee8be3151cf5ad453bf0e3ca54a1813cb6e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a24c3175-6ce5-4bab-9b60-3fc38456b325",
        "line": "18",
        "column": "47",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\find\\dialogs\\find.js",
        "code": "accessKey:\"\",elements:[{type:\"hbox\",widths:[\"230px\",\"90px\"],children:[{type:\"text\",id:\"txtFindFind\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "dca00462d32ef27257c726d4df46b4a40cf286a4a0451bb1d05efd6e27480fae",
        "deprecatedHashes": [
          "ad34dac7097c8fc83155f9f7ba43c003cfe1bd5a13878a72a7fbc024cf3c499f",
          "0bd6fe25af01a0b33db323dfb51adbac66834648bb0d354f0c33bb230dda1b3b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "117580f9-431e-43c5-8ba6-5a93eb1e3614",
        "line": "18",
        "column": "202",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\find\\dialogs\\find.js",
        "code": "accessKey:\"F\"},{type:\"button\",id:\"btnFind\",align:\"left\",style:\"width:100%\",label:e.find,onClick:func",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "c48218652b703e6f7bf6ae49004967a72fdcb51e5da167379bfd10f8662e5a10",
        "deprecatedHashes": [
          "f91b3a714f8cff15c2abd2337b1b85bf287b23dc824ab9dbb22b56fa45e79e78",
          "6e6954270c359eb2532d5319de1b95a6cd2099a725c1a5a65f93ecac0c706880"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2d7c7d57-1d01-4422-a2f8-bdea8df42d24",
        "line": "20",
        "column": "75",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\find\\dialogs\\find.js",
        "code": "accessKey:\"F\"},{type:\"button\",id:\"btnFindReplace\",align:\"left\",style:\"width:100%\",label:e.replace,on",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "772eee447383d8549dbfa2bd9cd85482035909df3f65fcdb5af7890475c9be32",
        "deprecatedHashes": [
          "92d9de6f6d47f1395a0315809bce5b2b6c0ee51227ed32abd98d418e98c0fcd8",
          "0ca640e3b3985ab18854e6643fbf9e609d1fe8940106a45e3534ca208ca44f19"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0b6616db-3c6a-4609-b9b9-f4c24ab37501",
        "line": "21",
        "column": "74",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\find\\dialogs\\find.js",
        "code": "accessKey:\"R\"},{type:\"button\",id:\"btnReplaceAll\",align:\"left\",style:\"width:100%\",label:e.replaceAll,",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "1790e8a916dba46a1e15b029f16c4cdbbfeb61159cf6f913024728c0cc3f78e5",
        "deprecatedHashes": [
          "103d84832eeb920e2422960ed933e9d311f193f26c4bbda056fb994dee9eee3c",
          "27d8777039dc87cf0c924cafc7e2bee087628ed35824013bdf24381f76ca114e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fe898104-26ac-438d-94df-b60f33c1b557",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\gl.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "72e087d649f9ee8449399142c3ea15774e71393ab0c4324b2a73e1dafe285113",
        "deprecatedHashes": [
          "5afbfd29097e7bc27e43ebdf1d7dad1765a5d960fb439612752d42bcf8bdeb15",
          "fa1f163f47056007aec44ef9629a8d3a4ec0b59af1608cdbcad8077f5867c865"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2abc4eec-dcb7-4599-bfa4-df7900ddcf1f",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\en-gb.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "35bd18db757f98a8c7f90a71931b4385a6045041421154330e184bb57a6405fb",
        "deprecatedHashes": [
          "fffadaa8102052e51fd0726ef39878a16d40f6e837bd479808d4c4ce061c564a",
          "53920e4d528c3144ee0ba0d34fb3eab9b7bf47ba36b5440710be52d0fc2cd847"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "83ec5ca3-69af-4872-b210-757db1d3500a",
        "line": "32",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistenceFactory.php",
        "code": "$apiKeys['access_token'] ?? null,",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "0edaa79099c7ed11a1583f7aa98c70558f64a7c0504196f5cef5f15299d38c5b",
        "deprecatedHashes": [
          "9dbef2a45d811c1350dc205e569baf3172ff9a88d313cecdd20ca51125c2ae52",
          "57818de715f637201d1c65e2e3b4e0ee8aebc07ac14f9ff5abb1fbe30425e550"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4c258067-23fb-444e-817f-7787e3a6cd6d",
        "line": "33",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistenceFactory.php",
        "code": "$apiKeys['refresh_token'] ?? null,",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "06f08c4bc366d1b2b01300e7eb83d3abd9b6503bd72823d3b1d01594a959d962",
        "deprecatedHashes": [
          "a6c18fa24f2dc3d1ec66b20835c5445b55be8b58252de0b3c4d3b5044626aa96",
          "60822258a92257575ea09cf61dbf981e7a407893719a86973157f44277d34809"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f10fbbdb-1f90-47c3-84e2-f6000398737e",
        "line": "34",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistenceFactory.php",
        "code": "$apiKeys['expires_at'] ?? null",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "c589a1d04d1bf336af5f179bf110992bd12fbff7f42b08c379fc8cdd116d25dc",
        "deprecatedHashes": [
          "08eb6adfed15ce2c449fe7edf72e5f03d43b1b131de460ae9962e024a7c3ab93",
          "a17e362300bb96409a343f52a53c1e6b42bd69b5dfc6a8e42d3707a72abab19a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "74643606-a079-4ed8-96f3-eb5129a3d6b9",
        "line": "30",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\InstallBundle\\Tests\\Install\\InstallSchemaTest.php",
        "code": "'dbname'        =\u003e getenv('DB_NAME'), // Doctrine needs 'dbname', not 'name'",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "262565728870fe75f5097b0fca97729f80512735c29968889cfa8220a234590b",
        "deprecatedHashes": [
          "c7b3bf1c4b2cfa182e9347d5e7412e8a601fdd7f15cf15e1c847b9e4deb0d5f3",
          "3a0b81626e71903b88626134a353bdcedb72ddfcbc9cd02a8a9dc25dfb713727"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c8437151-048a-4d93-939d-e4a72e55663c",
        "line": "30",
        "column": "69",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\InstallBundle\\Tests\\Install\\InstallSchemaTest.php",
        "code": "'dbname'        =\u003e getenv('DB_NAME'), // Doctrine needs 'dbname', not 'name'",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "262565728870fe75f5097b0fca97729f80512735c29968889cfa8220a234590b",
        "deprecatedHashes": [
          "c7b3bf1c4b2cfa182e9347d5e7412e8a601fdd7f15cf15e1c847b9e4deb0d5f3",
          "3a0b81626e71903b88626134a353bdcedb72ddfcbc9cd02a8a9dc25dfb713727"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8332284b-35c3-4389-bb49-9bf12d7a30e7",
        "line": "40",
        "column": "9",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistence.php",
        "code": "$apiKeys['expires_at'] = $apiKeys['expires_at'] ?? null;",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "796c477d74ee1e2f22ebb58edfcaf1c42ea55ccee805011a452d78de2bf8fd2b",
        "deprecatedHashes": [
          "e552f19765cba3e66e56ff28cf79566e4ad41cce879a02e0487d695c83ccfc4a",
          "27946a60ee7249107dddb3341a41f597d36bab79251c401615a1272ee481af93"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c376f7ea-c657-434f-a460-ca0dfdbf97ee",
        "line": "40",
        "column": "34",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistence.php",
        "code": "$apiKeys['expires_at'] = $apiKeys['expires_at'] ?? null;",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "796c477d74ee1e2f22ebb58edfcaf1c42ea55ccee805011a452d78de2bf8fd2b",
        "deprecatedHashes": [
          "e552f19765cba3e66e56ff28cf79566e4ad41cce879a02e0487d695c83ccfc4a",
          "27946a60ee7249107dddb3341a41f597d36bab79251c401615a1272ee481af93"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d7ebe840-7282-4da3-9fc5-d5d6ea20bda0",
        "line": "43",
        "column": "19",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistence.php",
        "code": "empty($apiKeys['access_token']) ? null : $apiKeys['access_token'],",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "e7d0c053b89ee9ad319e52c9030cd3a9aa7222bfdf957a0d794dff46fe5fd129",
        "deprecatedHashes": [
          "a960f30a973c7e00fd30a8880f10ef220181e01f9563ddbd4f0c8978c7c1e2fe",
          "229b61ae4774d1fce350253c31a6ac7051f0c3210848dd27292e049489f09aca"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "19befade-4d7e-4308-9c0c-4df8119feb7b",
        "line": "43",
        "column": "54",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistence.php",
        "code": "empty($apiKeys['access_token']) ? null : $apiKeys['access_token'],",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "e7d0c053b89ee9ad319e52c9030cd3a9aa7222bfdf957a0d794dff46fe5fd129",
        "deprecatedHashes": [
          "a960f30a973c7e00fd30a8880f10ef220181e01f9563ddbd4f0c8978c7c1e2fe",
          "229b61ae4774d1fce350253c31a6ac7051f0c3210848dd27292e049489f09aca"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e8c08a0b-d143-4a66-8b99-43392dca71b8",
        "line": "44",
        "column": "19",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistence.php",
        "code": "empty($apiKeys['refresh_token']) ? null : $apiKeys['refresh_token'],",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "8d123ed3023188e4e850e1796980acd88bef724f64cc96498b0616e78de4c957",
        "deprecatedHashes": [
          "eca61cafeac0018e17c8cf9f7dd36bd55062fd4361b4f689348ffdfdbe0dc6b4",
          "b134c7838eb5235e0d10f2ce3a6a0f026b96f89533a1b31048688f3ef06632b8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3cbc0308-0a04-470c-85a3-829c154e8432",
        "line": "44",
        "column": "55",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistence.php",
        "code": "empty($apiKeys['refresh_token']) ? null : $apiKeys['refresh_token'],",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "8d123ed3023188e4e850e1796980acd88bef724f64cc96498b0616e78de4c957",
        "deprecatedHashes": [
          "eca61cafeac0018e17c8cf9f7dd36bd55062fd4361b4f689348ffdfdbe0dc6b4",
          "b134c7838eb5235e0d10f2ce3a6a0f026b96f89533a1b31048688f3ef06632b8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8d4de5bd-3354-4ec9-9c04-e75fb96f8fd4",
        "line": "45",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistence.php",
        "code": "$apiKeys['expires_at'] ? $apiKeys['expires_at'] - time() : -1",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "7b4239f384ca89c03164fefa4121e09766db867efe649f63ea4bfef4301a03eb",
        "deprecatedHashes": [
          "daba7dd1b9a84d6ad45510ee55aa705ddbe8c444a7f1fea4fb35016104b731b2",
          "60ed932be01e276ffa0c36ff43aedbcf2fb4b6c39fddef31351e0c1a5dfbe602"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e5755cf0-fbd2-4939-8b18-6a89bb2793a5",
        "line": "45",
        "column": "38",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistence.php",
        "code": "$apiKeys['expires_at'] ? $apiKeys['expires_at'] - time() : -1",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "7b4239f384ca89c03164fefa4121e09766db867efe649f63ea4bfef4301a03eb",
        "deprecatedHashes": [
          "daba7dd1b9a84d6ad45510ee55aa705ddbe8c444a7f1fea4fb35016104b731b2",
          "60ed932be01e276ffa0c36ff43aedbcf2fb4b6c39fddef31351e0c1a5dfbe602"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "36898cde-96ff-4291-b5ef-fc556ea16e8c",
        "line": "85",
        "column": "15",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistence.php",
        "code": "unset($apiKeys['access_token']);",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "e41792b06beafeac3691d70b1d3b3d0b2413f6092453ff2f8bcb3d80d61870b7",
        "deprecatedHashes": [
          "f425d06134aeb13e5015a4ffc0c71416b714d1b05eee0c93411ae4ac2ca8444a",
          "2778d28045f549b866af8e23f50a81b584418b1175d895a1273a163b962c6b7d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4d491086-0663-47aa-8780-56c54eceadc6",
        "line": "97",
        "column": "50",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistence.php",
        "code": "return !empty($this-\u003egetIntegration()-\u003egetApiKeys()['access_token']);",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "0cf56c7cf1c3c12ac7ab193eadbd03fc598942598da1ca2f156a8a2c69993b3e",
        "deprecatedHashes": [
          "eb444cc238f3df58e34d732481fb209bc980437861ff06290dc41a36f38fb85a",
          "051d0e1fe56c2db2ec33b81093629591f63847d93971f8092bf8e3c5949afa2b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8d61293d-5da5-48a5-ade2-12c0707508ed",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\sk.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "aee2d234ec1d8df2246597ca24f663bd6434a64b13ff2f4a62cbcb11c098a37b",
        "deprecatedHashes": [
          "a3451831d6758fd65db28114ece9e6e108906b7effd3536f586c167c6b805ee8",
          "88552311345cade82520cbf660cb4601d11284e9a2d7eaaf49b6f7120e00ae4c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b945afd3-67ad-42f0-861a-aefefb32062c",
        "line": "21",
        "column": "210",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\image\\dialogs\\image.js",
        "code": "accessKey:\"T\",\"default\":\"\",onChange:function(){e(this.getDialog())},setup:function(a,b){1==a\u0026\u0026this.s",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "c9663409ee9ac62fe7dc2a5313780f2d96711c32eaa888e2ae21f2e22c462e7a",
        "deprecatedHashes": [
          "7b8617709b2cd46c29933f71a37f74bb3e327562bcdf13b1d135377c6144c966",
          "19835fd023d399d882ee2cc6688c8b29f265c96cdce773b3a81a4e5130de0a7f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "760a6bc0-f0b6-4778-8cad-345de5269c14",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\fr.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "8795fa508b8f7b1c95f5cdc21722c4a8072129f4e91c51b5135cf924f9f5961d",
        "deprecatedHashes": [
          "e5cc07e5f6aa60c6a2b62fdc7a7c6ad70ecf200833cde0369d960ce8674b384f",
          "a4cf21751708497bea16197e20a2c87f0183d796e6f7f184668c24c11b8db27a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7c245c02-a757-4bd4-848f-a8f6054cbaa7",
        "line": "12",
        "column": "8",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticFullContactBundle\\Assets\\js\\fullcontact.js",
        "code": "var apikey = mQuery('#integration_details_apiKeys_apikey').val();",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "275c3bd2170c3fd803eedec144d2eec402d38945391f744de141eff5556ce62a",
        "deprecatedHashes": [
          "2d4643a1e89646f99b05b977ff3787819d830ea1bbbffaeccb7a98c4e7cb5022",
          "3728bf0451b7997b946f665eae8090a410647803efa2f07afb0116975d22f1e9"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4044a191-f990-4685-b3b2-c4b6b656d9ed",
        "line": "47",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticEmailMarketingBundle\\Translations\\en_US\\messages.ini",
        "code": "mautic.icontact.keyfield.password=\"App API password\"",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "6a9cea51d4e93c974567b12d0e9087bd8ea75299759bdb47e74640567f360002",
        "deprecatedHashes": [
          "a15926d92630558517d001f54d2cd0bed2b1f57ca0116b5db409a3fc36312380",
          "c8b61c914a1fb82cae3e34e4f486dd7de7f91dce174ef41e6631b6447afd09a8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d324cc5d-5d42-4573-b015-2067928b342d",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\no.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "8e7320b82246d294720d5e6dbb76d78d3f391a1e0d2eb5964de7ecd5c8a0bf07",
        "deprecatedHashes": [
          "3fe5bd2a3be1e0db8d2a0484c98c6b21ddafb62ccca4140774f5398f80c2bab9",
          "9dfe52bdc696f8b3fd5ac78dc9c9b11af2f2fe71ecec3a42bcbccb2c0ab0ffe1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "253d58e8-d3ba-4af0-aa07-8629f85ed239",
        "line": "14",
        "column": "88",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\UserBundle\\Translations\\en_US\\validators.ini",
        "code": "-----BEGIN RSA PRIVATE KEY-----\u003c/pre\u003e or \u003cpre\u003e-----BEGIN ENCRYPTED PRIVATE KEY-----\u003c/pre\u003e.\"",
        "details": "(1/1) * Possible vulnerability detected: Asymmetric Private Key\nFound SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-12",
        "vulnHash": "06a6d5830b0615e32671044f7e49971c07efbde086206fd06f2c7ae5a100bf58",
        "deprecatedHashes": [
          "9c44882ebdcc1561debd95b3aeef55643b6b35a326bef24f98bbe875c7eb169d",
          "13d3ed395a5fb84e8518da53df5e83325a7d6391a7814e729c47d7b0c4ecd5ae"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d0ce706f-a7af-4fa1-9166-08b1892d6a74",
        "line": "13",
        "column": "88",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\UserBundle\\Translations\\en_US\\validators.ini",
        "code": "-----BEGIN CERTIFICATE-----\u003c/pre\u003e.\"",
        "details": "(1/1) * Possible vulnerability detected: Asymmetric Private Key\nFound SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-12",
        "vulnHash": "cf43865d2917f7590c7a708a8df58f0419d6daa84e1a2068f67eea85b2503530",
        "deprecatedHashes": [
          "8c12c67869db1a02cf84767168711358cd7099a1a06e55af2eb8169f6b6f1c1a",
          "c37a51cfce451a8ad99a0f02184c18b99d0c59435bfc649d08e8a56cbd5d76f0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "13196e3a-8547-46d3-b12b-a899f04b4eec",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\et.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "29f6e974f9d7038240958d33701ed015b484ecd6929b13747b5ead633185ff5c",
        "deprecatedHashes": [
          "8ffd2d0583eafaa3c8c4f0d493ad41fabff3b88af8fabc784ec76281344216f6",
          "b98d9e4d47a6bb658e872c19b6e3a383665811d1224d1a7f393dba761b0bff96"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c6a7eae8-82c3-43bf-8ebe-10ea9c3e02e8",
        "line": "78",
        "column": "62",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Helper\\CampaignEventHelper.php",
        "code": "/** @var \\MauticPlugin\\MauticSocialBundle\\Integration\\TwitterIntegration $twitterIntegration */",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "9d17e654899a4e54a3bf41ce686b5a7ce23ce246c6484c25454c21957fbd2a60",
        "deprecatedHashes": [
          "b19a0225eaf682c2986b18c4e496f9a7a5c7bb5e9e56db65747683def5cca18c",
          "3dbd279c0f44c3247228a467113fe9f027f1fe280e4e7e1c1cdefc6a0eaeed40"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e8b7cfb0-3339-495b-a297-67e02ef58d18",
        "line": "13",
        "column": "16",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\EmailBundle\\Model\\TransportType.php",
        "code": "const FIELD_API_KEY  = 'field_api_key';",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "25c901861afbbba3c0f04b01a201a3d0f693333631fd426468c6ba39fd4d12f2",
        "deprecatedHashes": [
          "d7a73d5f9804dc3063baaad3b50072ca80720c0bfd3578e36a2c72e81ac6f175",
          "789f0de3c9b63247b9199227c08598273714695f0a971b42620195c64367757a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6211a33b-6bcf-4bc2-87d2-19d087f8927e",
        "line": "12",
        "column": "16",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\EmailBundle\\Model\\TransportType.php",
        "code": "const FIELD_PASSWORD = 'field_password';",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "cf6375c20aeaba81420cf03f7c252f84af3b13a4232337e981d9855bdebee7f7",
        "deprecatedHashes": [
          "4eb40e850633f0b1645fe4e738170e00701abe53fc0e0c5d2174d44a3eef227a",
          "377ccdd7e38b88b5c5b7c5c0ecf52dbf04473652f78b483267c4ec2bc4834e60"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9109aba1-7520-431d-adf8-fadfcd5ee6d7",
        "line": "36",
        "column": "28",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\PluginBundle\\Translations\\en_US\\messages.ini",
        "code": "mautic.integration.keyfield.password=\"Password\"",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "32700018262e95496bc716f0701b6ced25b0a4eb03e570c049c458f626dd0105",
        "deprecatedHashes": [
          "8b5b637f2b54309bf3acc546706cb631c76855a9594f4115baa4b0dec32894ed",
          "d180c3c391e58037253d29f9ba36eeb6ab28713fb22d11b9c99ff51f04f3512d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8ba20e55-cedc-459a-ac7e-2c0749d0f18c",
        "line": "26",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\InstallBundle\\Translations\\en_US\\messages.ini",
        "code": "mautic.install.form.database.password=\"Database Password\"",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "bac19bdcd27e6338aa2ec7a2336af18ace1dd8bc8797910192cbe8e376d50b31",
        "deprecatedHashes": [
          "6eb069a077a6e2663bab5aced4d6724b7963a840f390a99484c8ff4764a77085",
          "ca4e5560942230cf1a4c82977d1704a2af8a7e8f2e77f7b37d25de3da2b05f95"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "14b07025-3b39-495f-a6af-946554dc6abf",
        "line": "47",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\InstallBundle\\Translations\\en_US\\messages.ini",
        "code": "mautic.install.form.user.password=\"Admin Password\"",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "12f7821389160991760ab84f5ded77772aa46faa2068f457be0f384d4d2050d4",
        "deprecatedHashes": [
          "eddc2fc5ee02257294b99241d78ce1cd49b06a9b6975fd6a09445df86c235227",
          "84d2d786aadd4d9fa275b7b487ee3567de3caace2f3a717227c813b56029be29"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "113b6462-9507-45c7-b661-6027d3a30bbb",
        "line": "73",
        "column": "33",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\PluginBundle\\Form\\Type\\KeysType.php",
        "code": "$resolver-\u003esetDefaults(['secret_keys' =\u003e [], 'is_published' =\u003e true]);",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "29442d0ad0d1216de64a5166ac576131152f51e8867591540df762f8d344d5aa",
        "deprecatedHashes": [
          "18e345be56aac37e7d45f5e3b7c24e656fa7c2aa0f4bb12ad149059fd591bb6e",
          "479fce417e18ca1b44b0c602fb193b57fc1a0fe71a2adcfa92ce85ef8eaaee55"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9d4a89c5-c2b3-4adc-95ff-d1a7f9d2bba2",
        "line": "52",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\config\\config_test.php",
        "code": "'dbname'   =\u003e getenv('DB_NAME') ?: '%mautic.db_name%',",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "6366eaf2516818c8ab27d3de869dd64393a455813d0cbf49902f827971017736",
        "deprecatedHashes": [
          "be38d962c7017eba29484c0495b9662a995d1e6be0da9bd18af57d095f6a032b",
          "5156e90b2081b3cf1a14e7388b619b798513d2d04d87a7c023995ae19c1980b3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "28edea13-f50b-4aae-9c28-47f9e9ba6f25",
        "line": "116",
        "column": "33",
        "confidence": "MEDIUM",
        "file": "app\\config\\config_test.php",
        "code": "secret_key', '68c7e75470c02cba06dd543431411e0de94e04fdf2b3a2eac05957060edb66d0');",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "e4779cfba36bb991b40471919aa6f459f5404f97aecd8a88e1108a8802322e05",
        "deprecatedHashes": [
          "3d20ceeed896aa1928376cd07483b620541f35f8838ec9247c5ca8552692a67e",
          "1f8a9597229ae76d3756361e5635248135cb905b7dba72283e853355d4b9d965"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a4f4d26a-4235-44be-ae77-d0914bacbeab",
        "line": "24",
        "column": "23",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\NotificationBundle\\Api\\OneSignalApi.php",
        "code": "$appId      = $apiKeys['app_id'];",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "329901d2f57715dc79c35aa419c574fd4e6d52bdb6211eae6c710b6d02705bc8",
        "deprecatedHashes": [
          "d7af944f6e4a6b2684d917744117483ff6e7d5918ae9a49136532cbd2989b6d7",
          "f35fec3f975765d87199999da0dbb51ef052f6b40d3d6993722f65de4e551aba"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fd99ce8a-7ae6-4b1d-b68b-cd2e1212f8ed",
        "line": "25",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\NotificationBundle\\Api\\OneSignalApi.php",
        "code": "$restApiKey = $apiKeys['rest_api_key'];",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "7a3a7ebb954260c764af295bab774aa3ee326347a64e79fbc34f08ea5b44be88",
        "deprecatedHashes": [
          "6a8c516d02e21e06a922821f6483a49911124b99f9dfaa45706a938ce19a62d9",
          "a06e0ec4d6bcf62021ba38f57bb482a64a93f3415b7bb5f54f693548d7f2bdd6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "74675166-919c-472b-ae29-8e0a856d9c99",
        "line": "248",
        "column": "9",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\LeadBundle\\Tests\\Segment\\ContactSegmentFilterTest.php",
        "code": "$dbName    = 'dbName';",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "7c980f87ccd89e9b4b111e8e0214ca0729a7da4d0cc2cb36b449006352c3969d",
        "deprecatedHashes": [
          "fc3525b8cef472c178184f19f72633fcb59e957664f0d880b41a9382ffd82923",
          "1f82f21625267596d6a19cc49312489fd12b84055e3985abc149732a2a149ca4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "52d7d999-e204-434b-9096-94d304fd4a27",
        "line": "277",
        "column": "9",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\LeadBundle\\Tests\\Segment\\ContactSegmentFilterTest.php",
        "code": "$dbName    = 'dbName';",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "bce0d8f8b54d905cfd3fa0097105541f2c63d5feefb6950cb84a3d9e2e18e40e",
        "deprecatedHashes": [
          "c15433af89b96e918d2caba112b587c56d68e0adb1c68539ff7bae28bad6648c",
          "1924c98213d7de945a4ae844b3e9529d8860eb5460991ddcf05a72c2e9cad95a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2ed0110f-e443-4d87-9c63-e4fce48f5c0b",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\eu.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "a492c2213cf84aff8d4d85be009ddeaa6cd2fd83110dd9f514bdf9f424a8cec4",
        "deprecatedHashes": [
          "7fcfe7879c3d1397f335de80836dacaeb675e88aa0e6573b476134327b80088e",
          "f205c65d3409f071c64c163de11ef7956e2a5deffae284878ce9fed89aee35f1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "69fed94a-9c62-4141-ae7e-b57682513815",
        "line": "101",
        "column": "48",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\IntegrationsBundle\\Tests\\Unit\\Auth\\Support\\Oauth2\\Token\\TokenPersistenceTest.php",
        "code": "'access_token'], $newApiKeys['refresh_token'], $newApiKeys['expires_at'], $extraData);",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "8773430367b226cfa2023217af32908858af0b930cba31e9201e613949a0dd80",
        "deprecatedHashes": [
          "7c546434cffc16ada1984f37e31c26b1681ac532c7ab3b9d8c14000ab21c2459",
          "77e177c83fc58cdcd356f45040ddd30cb26e80a3bf65d6075f9f26b0131a681a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6e72788f-aaa0-4a9b-bf6f-466237527e76",
        "line": "101",
        "column": "77",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\IntegrationsBundle\\Tests\\Unit\\Auth\\Support\\Oauth2\\Token\\TokenPersistenceTest.php",
        "code": "'refresh_token'], $newApiKeys['expires_at'], $extraData);",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "8ce67bf6e32df2df1df117010b6d9aed22d6d79fa196adf49a7d4da22a8cb88d",
        "deprecatedHashes": [
          "b2c28ee1a73ba5c4fd957b8284527a41419bf04501fec24d9b867a11a2b97554",
          "4e76ed1c79ee7c10da910e26566a5aefccff555afd7f1eff03c025417fb27f7f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a7afc911-0d76-4160-be75-b2fe750eea8e",
        "line": "101",
        "column": "107",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\IntegrationsBundle\\Tests\\Unit\\Auth\\Support\\Oauth2\\Token\\TokenPersistenceTest.php",
        "code": "'expires_at'], $extraData);",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "23ecd65b9d7c6afc30562b949704f1d05e28a64a62209015526f3537fb8587e3",
        "deprecatedHashes": [
          "0a0e6628e3b165c02dc45eebec443558a826206da439ead93a41107bb3e1cec5",
          "f09f49629ff23c4e00d25eaf66e4b15ad66d9dc6dc2cf7bbfbeda9ce6f900aac"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ca96f5db-337e-4bad-90ef-918b3bc2fb58",
        "line": "180",
        "column": "50",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\IntegrationsBundle\\Tests\\Unit\\Auth\\Support\\Oauth2\\Token\\TokenPersistenceTest.php",
        "code": "-\u003ewillReturnOnConsecutiveCalls(null, $apiKeys, ['access_token' =\u003e $accessToken]);",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "234b916d902c73c45b49f9491c1007964590d163e393ac56d1b7453f6994fc1e",
        "deprecatedHashes": [
          "2b9736ce69ba91869cfe5ea3a857ee14b7873ae1f03f5a3fa960dc70005a4afc",
          "c0087e14434c3e6983b6dcad7f14ba34aa42e5071b3e94537602481e7772580f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7b060c86-27de-4a37-a1ce-ea520f329144",
        "line": "12",
        "column": "22877",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "pass:\"folders\"},preventDefault:!0}).done(function(e){l.call(p,n,d,e.folders)}).always(function(){n.a",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "12610f71a1da69b206de7adcf08ddad58a7215507e6b20f7fbfd15f77bacb878",
        "deprecatedHashes": [
          "1b761a930bb3b246fa0b0d1a9436caea961ae1240f8441306ffbd6c7ee311852",
          "84ba344f2cefad4077a19b94347df926f1eaff96bceaabf1ca44d93e2e7a9b1b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4514a626-7af3-4008-8448-40e22348ddef",
        "line": "13",
        "column": "17457",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "pass\":\"mpm\",\"application/vnd.bmi\":\"bmi\",\"application/vnd.businessobjects\":\"rep\",\"application/vnd.che",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "af034485d34a7aacb9e86e2dbfd2f92d93fde9277c9227226ef0e0102d79ccb7",
        "deprecatedHashes": [
          "dd2b395a4f964f448e064d6d5a5eac3f27a3798caf28623515b99152553614df",
          "cbfa1ac861b33d17484559da9c363baa88895843da476b03421d32b5207d5f2c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0e3b4285-430b-47af-a834-ee74b43f2ffd",
        "line": "15",
        "column": "8463",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "pass:\"Password\",confirmUnmount:\"Are you sure to unmount $1?\",dropFilesBrowser:\"Drop or Paste files f",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "ceaeaa8b4ffd1a7924aef9a89dd211c862ed5991682ee45a517ea3601cab4132",
        "deprecatedHashes": [
          "6325adc62b71735617e4dcbe15a733d77cbd5d15f9429e920c132b361f572db5",
          "8b97778e122b4270f5f4fc276d98b46951e0a96edfde2c5afd5d6d23031bc2d0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d9e2773d-499a-4bd7-8f14-c8fb7b6c2171",
        "line": "21",
        "column": "20646",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "pass:\"return\",options:i.options},preventDefault:!0}).done(function(e){i=JSON.parse(e.body),o()}):o()",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "8420d282bffc43ca38056defb84e93fa4611ba59016a0c6ff68865757a8abda1",
        "deprecatedHashes": [
          "b863a7b1cb29062320f81f4a706eb70f66f214ec5510505aeb745578f5c0e909",
          "882b9efe5aac93c9558dd050cab0ce74c36259dfa242de7fa94573dbfd56d0fb"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8323ed39-6c87-4e0f-a0cd-82bb7cacbb25",
        "line": "28",
        "column": "513",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\11.editor.js",
        "code": "NSUhEUgAAAHIAAAByCAMAAAC4A3VPAAAA/1BMVEUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        "details": "(1/1) * Possible vulnerability detected: AWS Secret Key\nWhen use AWS Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-2",
        "vulnHash": "83b662b77a3efc15fe729f1c9884e2523095e989bebfb666bfa7666d70caffde",
        "deprecatedHashes": [
          "b8661f90e6ada1a60785477c6b83024ef297aafb8f78b1f4966455edc6efc1db",
          "f8ed2d0890130e3c50c6c43e8f9e606c16e8580cd558dfefaa69b43b162d3f09"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "10d402f1-5693-4a2c-9269-5b0c30974e44",
        "line": "23",
        "column": "119",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\11.editor.js",
        "code": "y', 'action', 'align', 'allowfullscreen', 'alt', 'async', 'autocomplete', 'autofocus', 'autoplay', '",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "77b96d878d211385b954826b5dec35bd4b4148877d670268f8b1d906a59217a5",
        "deprecatedHashes": [
          "ec96602df2ee76ae5ae1b001b42f8c26099930f88f8e1b522e079621f8fbdff6",
          "1968581d3ce0a8bf67c5a5eea4f1d4a37f57d586784da99da9f3f519360220d7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "285219a1-3ffb-4d13-ae4f-6a5220567e6f",
        "line": "274",
        "column": "72",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Integration\\SocialIntegration.php",
        "code": "ialCache['accessToken']) : null;",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "afe17d26292a0bca7bd1fca275c9d3748b526c1e597726b033f4b113ad356c28",
        "deprecatedHashes": [
          "baa8ea1a079a34b03ae3aaebe0717da88c760bf7725d09830ab831a54d33e111",
          "26bfaeb442bb6511c25f87b8061fe4252cfab4af6d10424b11976bcba5a66464"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a79e4b06-3a2f-4da6-8636-bb8f7b6cba76",
        "line": "280",
        "column": "45",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Integration\\SocialIntegration.php",
        "code": "$accessToken = $this-\u003edecryptApiKeys($socialCache['accessToken']);",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "344dc613bdb7af60911cb6ce6f63e89318fab484b711a9cfa01486913e19a87e",
        "deprecatedHashes": [
          "b5f433b5720277868e9c259a4b45f309fe2329fd321e390bf05e52f60e943a30",
          "a3ede9467d490a51ee1c257b09c386e28176646e64539f2d415cd054d030894a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "edd04d4a-3966-454c-a4ff-ad1a963f4c1b",
        "line": "38",
        "column": "10",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticCrmBundle\\Integration\\HubspotIntegration.php",
        "code": "const ACCESS_KEY = 'accessKey';",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "ae1af69e3c512684e1e032a8c704081a51c6aef8ffac13e3f2cb1c2fe4cec275",
        "deprecatedHashes": [
          "913fe12ed93df57dedf35c3f38b25313878c80a8f015c0bcf81622480aba00ba",
          "da7986a1f19500fb174ee29191fc5879ead97cfdfda6ed110dc9e63febfa2fb8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a3fe024a-5e76-4703-86c0-d09f26744c7a",
        "line": "430",
        "column": "69",
        "confidence": "MEDIUM",
        "file": "UPGRADE-3.0.md",
        "code": "TwitterBaseCommand::createLeadsFromStatuses removed",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "a1f0b45ef57851ddfa82a601a2f96fed867946c66b3a0f6c8632810b92df5553",
        "deprecatedHashes": [
          "8e35f38836b0170c5b1b0bfb46cdc9063d79fae580cc85ee7bcbb9f22935e890",
          "f9b35a1dbb8276963b24abb4aa99b747f0492922ab7d918dd8e5e313e49b0486"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5010253b-c7df-48cf-9b61-8b627b4934c7",
        "line": "431",
        "column": "69",
        "confidence": "MEDIUM",
        "file": "UPGRADE-3.0.md",
        "code": "TwitterBaseCommand::getTwitterIntegration removed",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "c337556b632570b871b5839f345f12db628298a7718107016d5f77fa964b2c5a",
        "deprecatedHashes": [
          "ebfe3c8cd54bb20649ddf3d1efd12348fa727aeb2ee9b65e25d1816645d3e3cc",
          "5aeaee3b333fe99992c203f32f28ee8b33fd84418de1f3436071d5ced89692a6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "760d97d6-93d7-42b5-9d92-372a6fcd87bb",
        "line": "432",
        "column": "69",
        "confidence": "MEDIUM",
        "file": "UPGRADE-3.0.md",
        "code": "TwitterBaseCommand::buildTwitterSearchQueryy removed",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "346ae5faf21227004edeb7d35df85017a0a338a06b78c7faf2e6dcb878595f73",
        "deprecatedHashes": [
          "9faaee185f52f439923ce6e8ecf458bdae7de7a8744169c9a302012aa7abb96d",
          "6302d5397abcbf9d3ad2b95641c8dcf9a10d730ef6045ba3160d5f1a5ba95f25"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6d443578-38be-49ae-ae0d-31323801288c",
        "line": "222",
        "column": "36",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\EmailBundle\\Controller\\AjaxController.php",
        "code": "$mailer-\u003esetApiKey($settings['api_key']);",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "bfa260edb32579550651118980219c61e0f8a53f2a23f315460b42a8fb5f18a6",
        "deprecatedHashes": [
          "d99e046b4f143e3e5b265edc4b4c69b0f1431aa7dcb2fde832c04db8e22749f5",
          "53605cb0da3e58134facb11108e291c34e8934910dcb6f6065e46e6274ebe3f1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b0c01fc9-684d-4297-b670-87cd4b079e7c",
        "line": "8",
        "column": "6",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Form\\Type\\TwitterCustomType.php",
        "code": "class TwitterCustomType extends TwitterAbstractType",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "549fba085fd63bc06437a805f3b825ff261e6724619be0511e999100c68617ea",
        "deprecatedHashes": [
          "ad7485b9d742e657ea7a6f64f14f6b08f078e5fc651a7a57e6b8df2c9179e62c",
          "ead003b7679d831567916a13f0e98e6588649eb2102a7c1192156b6c74995edf"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "93ea85c2-8f64-44e3-be8d-10819ec3672d",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\nb.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "a84ccef7e6d44e0b253cb5ac14255570ebd3450027b80561d6735d329c42f333",
        "deprecatedHashes": [
          "fb3e69f4510f3757240318fc4e80a65da47c846b97c2f3122e9c7f13301fbc1e",
          "02cb645cbe20ed31cbc32b12b3f67ee6bcbe82d16dea01f1f068b7935b5c3979"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3f167f57-d07e-49c6-a899-d099e4380899",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\da.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "6e357e78f6e85d48aeb94c853b3172ffa31ab4e58a936193351ed00162917308",
        "deprecatedHashes": [
          "79519f80984d4677dbfb709d768fd726f50d539a6350a8319c925445bf6674d3",
          "c0d2dc68801a53afd74876c0f5d335f8fcb23590d98e269bbe820995ce65043e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "bfe6f965-228a-42f9-9f15-537f04e9b838",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\oc.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "43315460ff766ad6ac6713f17bed60c458282403673c12e3f1972e5eed823618",
        "deprecatedHashes": [
          "9fe4195fae0b12f70e6f1012e1b80e7cbae0671a98168a2134ece64adc1dfd1c",
          "99a74c8dbb0fe9bbc8dc587ad370b3f1b2171a3e2f6c960cf6a1013ba2c55cbf"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4f58d1f8-e8cb-402e-a26e-e485fe423b70",
        "line": "139",
        "column": "43",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\UserBundle\\Tests\\Controller\\Api\\UserApiControllerFunctionalTest.php",
        "code": "$user-\u003esetPassword($encoder-\u003eencodePassword('mautic', null));",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "fae7b36e3e8c759071ad5051d5072d3c0a628185530b694570eee5157fb049cc",
        "deprecatedHashes": [
          "7202d048477d5a3392a42cab35c00496ee3f1f47e8df723085fd66936eee8f75",
          "b424101a36da90f58d60955523bd96ad73a4cf997a4126b0bc8ffc0f27cb3851"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "081c552c-d8af-4955-9f12-2bb97fd604d1",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\sr-latn.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "0aed609ef97b08fe8d11c2bc68ce782feab8b1172bd496b9722fd0e08c3f6831",
        "deprecatedHashes": [
          "66066bb523a40ad779ee54037ed79e649ac8b574cf8fa4290f16d9262ff47137",
          "f384a96d75021860950aa10ebffb884b731d47c7cd124870e718acaf76d46f2c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "38fef7b7-a011-4dcc-92fd-5759a08ea75c",
        "line": "253",
        "column": "43",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\EmailBundle\\Tests\\Controller\\Api\\EmailApiControllerFunctionalTest.php",
        "code": "$user-\u003esetPassword($encoder-\u003eencodePassword('password', null));",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "aff63841deed2cb4d88eeacf658e4cef151af5d7d6860e181939685807299c65",
        "deprecatedHashes": [
          "87519988d4ade6ec11e6f903094bd756663623bf0bccd37a5f582e81fb48be86",
          "85b93f3e49afcffd2070586b88f9ad2452ec501a129617a4878b358142884f04"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "96b392ba-8286-4134-987b-39d187742b18",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\id.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "6917393d29a8c56fa07861303d380a2c833ebbe3a3f088562530c32b12a07cc3",
        "deprecatedHashes": [
          "e3ccebdbc449ac1c1846b1552a969158b639ac73939f3e3dd5792e69a48dfb75",
          "a940b2ab65229646283811a2251ade784a005c6d7d8244caa1b88c70e1e1f3b8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1ff54887-082d-441b-9155-7fe1051b5f9e",
        "line": "108",
        "column": "79",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Test\\MauticMysqlTestCase.php",
        "code": "word = 'mautic'): Client",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "6e4969434ac1b2eee78615e4a2631d3a483c5668d0bd41307518f51d8a370d09",
        "deprecatedHashes": [
          "85b84a1885b3478c06e598ce970156e0b26977e6503a25b598fcc5b5427d488d",
          "5d34f911557b14dc89828a08a622284075723703073fb99dab97a950e3510e90"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3fecbb83-bd17-41a0-a5f0-083ca56f0d99",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\sl.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "502ea25323e133346bf4efa433eac3e60407bdd77aa93db12e9d042e1b324b2c",
        "deprecatedHashes": [
          "db8d90d238331d50a7a8fd11f0668536a84468c652ff16d804fc311e1333752f",
          "1919244155aae6969c376c2647074c7913300180d6add0c83196a1300a78e8ea"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "191cec3f-d23b-475d-ad87-0a63e270e1c8",
        "line": "94",
        "column": "15",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Helper\\TwitterCommandHelper.php",
        "code": "$this-\u003etwitterHandleField = $coreParametersHelper-\u003eget('twitter_handle_field', 'twitter');",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "ca43646ffcb161b79b35de4f27cb10cdf413ad770ef1e6b3cc581ccf031e9007",
        "deprecatedHashes": [
          "62b6f6920729212f5d63b65bfd5bc9cfd133be87671e6339754b65a1bfdeba0e",
          "9753e3cb46dfe92873f43439b0ecd636e2faa9a4ae37896fb58c6ea3180f3188"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b1cb91cd-4437-4d3e-ace3-3c3bd549b0b6",
        "line": "121",
        "column": "27",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\EmailBundle\\Translations\\en_US\\messages.ini",
        "code": "mautic.email.config.mailer.password=\"Password for the selected mail service\"",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "9a0209793fcf6519624cb39b69f14c7a31d87028caffc8532be1da015981917c",
        "deprecatedHashes": [
          "57d9d50a93805790a6c6cd6aa4f31267e9cf65732d25c952629ce6de16a75162",
          "0a2cf6a6234028e5c49dc90a657c4509c9d84827e1a1a9bdf3101c2263d3de4c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "bc002fe2-f106-4771-a4d1-27cb84ba3fe1",
        "line": "189",
        "column": "36",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\EmailBundle\\Translations\\en_US\\messages.ini",
        "code": "mautic.email.config.monitored_email_password=\"IMAP password\"",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "3a6555113e74dd85cbe1505cee5797d13bb40241e20e6ba305c525f426a1b4f5",
        "deprecatedHashes": [
          "799d516cb38bf75e03d7ad8cdc84da0d44ce153bcd80b1a18cba491fc9fb0f1a",
          "49b62b6e7997e7152ee36b598af4be0c0e907d670d78705fda224dd09deeb420"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2e005344-5304-4d3a-b415-c4ebf79f72ea",
        "line": "112",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticCrmBundle\\Integration\\VtigerIntegration.php",
        "code": "'accessKey' =\u003e md5($response['result']['token'].$this-\u003ekeys['accessKey']),",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "ae7f4a67759b816308f73451c24ab01558404af68f32119924796c869093b197",
        "deprecatedHashes": [
          "660d444b8837ab6e3fb1bbca5fe9677cc8ad6a3fec834613f5eae367360698be",
          "4e569605746086e3748400120aa3dbca0707bc855cf10afb8f2d5de191f31670"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "61fd7745-497d-467a-b2d7-4553616d9266",
        "line": "77",
        "column": "31",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\PluginBundle\\Entity\\Integration.php",
        "code": "$builder-\u003ecreateField('apiKeys', 'array')",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "0789e5ef26f399b01bcc280d9227210259cab7c0060bb755ef8e8cd47e07939f",
        "deprecatedHashes": [
          "8ac40f909bf143cdb9abfc635e3e95b5058af759267cbc71819082cf8c1a0d36",
          "5a84dc7963dea78d709b84b1ef7261aac050704fc308f67204def7b37c893dd2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7b3ab1c4-c242-492c-8f8a-ba648159a378",
        "line": "649",
        "column": "141",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": "accessKey\u0026\u0026(T(this,this,\"CTRL+\"+a.accessKey,ga,fa),this._.accessKeyMap[\"CTRL+\"+a.accessKey]=a.id)}},",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "873879f0b56f5563efc20f6bc8a38a6627ce5a3dd0bd5feabea8f1bc69ff94c5",
        "deprecatedHashes": [
          "ad161bcdbddaa75896fc8fbe7eda41ac406bde2fe04956d9f7ebe49adf34de86",
          "653478ff91065b6e2abd8c3437deac5793d354ab616c68edcc474135651ff58f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "94e5c795-bc38-47bd-b79c-3ddb6fd9a2fb",
        "line": "649",
        "column": "199",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": "accessKeyMap[\"CTRL+\"+a.accessKey]=a.id)}},selectPage:function(a){if(this._.currentTabId!=a\u0026\u0026!this._.",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "3caaec9fe21c6082ffbe9220ee539406b52b5697dc7f5f4ceae76c10f0f851da",
        "deprecatedHashes": [
          "fe0d2a9b3fee25c34cc42f7a2e286078398c0be67a82619d80f07cfefd0712d1",
          "700a06daba59a481551c51b6cfa82200f6f09f642e8391058f317dead6a79194"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "dfa4233d-45b9-4d70-b99e-56a41e26243a",
        "line": "663",
        "column": "172",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": "accessKey\u0026\u0026T(this,a,\"CTRL+\"+b.accessKey);var t=this;a.on(\"load\",function(){var b=t.getInputElement()",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "c49011b44085206c2171be5235620d377afad69427f2bfa0b2280cfbdb803799",
        "deprecatedHashes": [
          "6e05e141761f98ac17373935c215c30f773bfe4dff1d49b60d3f0555f5fd1f30",
          "5276489c5b38dc2951c80c5b23fb7fc5606e27431d9050a618121c71ec4f4fbb"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9c600a13-b77a-4d63-a2c9-7d5de591b95e",
        "line": "663",
        "column": "202",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": "accessKey);var t=this;a.on(\"load\",function(){var b=t.getInputElement();if(b){var c=t.type in{checkbo",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "146c597bbc2267ee791f4ab6e25506f17a2fc3254bc1f9997f8d8d855414556a",
        "deprecatedHashes": [
          "58c9a3f41b15a7d802fe806fea83314a9357277a4b8bff96655de4d5420c531c",
          "166ae8201be721ffb3b9465e9e52506b8607dedd2829bddb5c3e65c57df68900"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b9ca40b7-d6fc-4816-858b-1afbc1f9702c",
        "line": "1061",
        "column": "464",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": "accessKey:\"advAccessKey\",name:\"advName\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "8eb2c4e9c8e9cfc78feca84dd5d93e47a9233d4e9741651c2f87e8b4f16afd9b",
        "deprecatedHashes": [
          "5cf4742c91b8f04aab2c43e81f4c51fe23ff53caca91c224855a9771ab018191",
          "b813c5f71275b4e55a03d2c0845fab5d51ec3a346a92a17a75d062c58fc6082f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9d32bfa7-f1bc-4b31-a1ab-d46c99095c82",
        "line": "19",
        "column": "22",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Command\\MonitorTwitterBaseCommand.php",
        "code": "abstract class MonitorTwitterBaseCommand extends ContainerAwareCommand",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "8743b52932d603a95a96dcb21e6d4e0901d2abfca761b9e2c89f06b0d6a08303",
        "deprecatedHashes": [
          "3ff3aee34c9f0cbb4801f5a5508c981cff684e4b1b518fb7684e2716d666428c",
          "7be2f0e8f6aec47689e55ecfe57dc9c0a183a98774de8ab36e53dcb20eceef19"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "28e9f855-ec8e-402c-89a4-f5ba6ffda614",
        "line": "78",
        "column": "8",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Command\\MonitorTwitterBaseCommand.php",
        "code": "TwitterCommandHelper $twitterCommandHelper,",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "80b802d39f239be6a01f9ad386139fa69872fa609524d5fcd4bfd8716ea73895",
        "deprecatedHashes": [
          "38478bab270def682d75b19749d5565e81c29763f0c0d48ef3c9e1af158032da",
          "58ab0fc09991364febde082465580afc36fe2464defb5b739cad49dcd1155c68"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fbfa49a6-7b99-4238-95b1-51cd500d5567",
        "line": "84",
        "column": "15",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Command\\MonitorTwitterBaseCommand.php",
        "code": "$this-\u003etwitterCommandHelper = $twitterCommandHelper;",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "7b5391a6a50f28fb5bdb5755201b60a8a8731bd6dc51b5d2ed6a23bb11f9189e",
        "deprecatedHashes": [
          "da82d8f1f766f9a4080e6cc61759aa02e88481c490dd027eae05fa3d3685676f",
          "5fe1dc7360d498c5e5815b418bff62f62a9c3e8f85b19174136ce0327d53bc07"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6eafe1b6-6882-4d39-92eb-b0b427e25b3a",
        "line": "160",
        "column": "57",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Command\\MonitorTwitterBaseCommand.php",
        "code": "\u003egetIntegrationSettings()-\u003egetIsPublished()) {",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "eb362c6fc112e3c0cc87f30ada90eecfc343e71ea48f5990362291161bd28b89",
        "deprecatedHashes": [
          "461eafc57b467f2929ded112b31ea2e1aaf117978a7272893e573d336871efbd",
          "d67b4b750ed4728197dd4386e47a55e328cfc046921f996d190695ee90359344"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e00b66c2-943b-48d4-b3db-745aea78e616",
        "line": "196",
        "column": "77",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Command\\MonitorTwitterBaseCommand.php",
        "code": "ndHelper-\u003egetManipulatedLeads(), $this-\u003etwitterCommandHelper-\u003egetNewLeadsCount(), $this-\u003etwitterComm",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "910bcc2320ec103aed5739d4b4b9575483b69d08b7be8b18fc06b447d67adbfd",
        "deprecatedHashes": [
          "434af85b0ee3f919a9a325d8b1669a6586883d1dfc97652d36f723d2ec968dbe",
          "1700f7ea9c3227048d187c3165a69676395d6a37c65743b79ceaac3df5969490"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "cee908ae-26ea-4344-8aad-2d03fc4fe6f1",
        "line": "196",
        "column": "178",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Command\\MonitorTwitterBaseCommand.php",
        "code": "ndHelper-\u003egetUpdatedLeadsCount())",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "7dfd91365b088cba10f9aa31523ec18952d01cc65433d797b2639409ec40554b",
        "deprecatedHashes": [
          "b48fe65be52a001964689936fe12cf7a1f61d50badfc79c8ac81a82925f28ecc",
          "ca61698635ed73fbd70b142b490dcd5e296b1c52e0ec0fa1d910deced11fcf07"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "65c70aa3-a4f2-4236-965c-4529d01ba991",
        "line": "229",
        "column": "19",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Command\\MonitorTwitterBaseCommand.php",
        "code": "$this-\u003etwitterCommandHelper-\u003ecreateLeadsFromStatuses($results['statuses'], $monitor);",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "5c6df4d75c7c41d8f421f4211c609b71bb4f4e73a79ddfc4307336469f36b3b1",
        "deprecatedHashes": [
          "70c6edb8ea6acc0e0f49a2ff6e5bb0bc8d371617cf3d9987268ba1b99b11e81b",
          "905ddce3bf40868b95040755c7361a78b9c9a75f2e38d2ff3b1e7d8b7bffff79"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "96bdf991-28e4-4833-abd4-fd25b3abadd8",
        "line": "322",
        "column": "55",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Command\\MonitorTwitterBaseCommand.php",
        "code": "$this-\u003eoutput-\u003ewriteln('Updated Leads '.$this-\u003etwitterCommandHelper-\u003egetUpdatedLeadsCount());",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "bb0ddb55028c89db529c69dcf3bbf2b7611304271e9fd746fb3c9af06d139898",
        "deprecatedHashes": [
          "461e910b771e8052dc1e3913dcaf1c07aa8b104c9bdc327fcb3bf2bc8d392b6f",
          "04f7f7fb403c047ac4aa1ef056c2079d68fa15a6a5ad8fb6767e514677a0c555"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b34e857f-e3c1-4184-84bd-43dabcb6441a",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\lv.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "07e1c8d9ebdf59ee5851e5b7db1f9c8f5d6ca0b1d162195d76f498318347bfa3",
        "deprecatedHashes": [
          "9a79b0a57f64f117ad7c78b6bc18de48dbb8b8aaa5365c56b0613809c4677e25",
          "dbcf8d1c6546a83743c05b93f481294ee4c95f638643fdcfff8ba0f3705ab4c2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f7b821f4-e33b-4730-9bd9-e1a423a015b6",
        "line": "101",
        "column": "23",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\FormBundle\\Translations\\en_US\\messages.ini",
        "code": "mautic.form.field.type.password=\"Password\"",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "b0d2f4e1dd2d9118b33ff79c0d522b406fcd47b0739d7d19167b064f0dceb064",
        "deprecatedHashes": [
          "34c730ad29666bb0b87e73aad5ee970bc8d45e734a79ea32e97a86c504b2cbb3",
          "f9999333f726c190d685fa76216bf0000837173419c5b8a702dcecf9fbc774b5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3f349015-abf8-4fcb-bdb2-a686952adff4",
        "line": "31",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticEmailMarketingBundle\\Api\\MailchimpApi.php",
        "code": "$parameters['apikey'] = $this-\u003ekeys['password'];",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "0e95f801cfa7ccf85415546a156941d2a1200e1a1d6b7cc5587fabbcfd061215",
        "deprecatedHashes": [
          "04aa655e1a9ac0ee5d2bc4ed0e7bc3283e065078f15d9230e3a8d8e288a002d0",
          "c819d60d16e1b289943c19bf6fa80ea43e5ab920e6825b084e388438e3c9db6e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e2761765-fa0e-4171-a24d-2a9a288c8a0b",
        "line": "34",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticEmailMarketingBundle\\Api\\MailchimpApi.php",
        "code": "$parameters['apikey'] = $this-\u003ekeys['access_token'];",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "0d915a2b28ef134828288d6764804b12a7e3ab88fa30d881d61de62a677a5f2b",
        "deprecatedHashes": [
          "c223b3287fb770cd08310a6d0ed53628b490ec20a795f7fc73161fda9ad71aad",
          "d34b857f8a466e421d982956d4426ac43b5b4a0e550abd9233249eec256579ef"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "65e45f9c-3ba3-4bf8-b387-d077f1b28639",
        "line": "59",
        "column": "19",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Translations\\en_US\\messages.ini",
        "code": "mautic.integration.LinkedIn.publicProfileUrl=\"Profile URL\"",
        "details": "(1/1) * Possible vulnerability detected: LinkedIn Secret Key\nWhen use LinkedIn Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-10",
        "vulnHash": "d219a64cd381cda633dd97e2b5b918e31f788f654515627c0d60483ac634cf02",
        "deprecatedHashes": [
          "ffcf58a4f9faf77ce0dfb3761549498cc3b67332410e9d978ba7e878cd54cbc5",
          "bc29e982132802eb6527291d26f32eaba97841c5ada4949ab28c8d36c4755c9a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "aabf3b94-0964-4f7d-94ab-26d6ac51743e",
        "line": "163",
        "column": "73",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\EmailBundle\\Swiftmailer\\Transport\\AmazonApiTransport.php",
        "code": "$this-\u003ethrowException($this-\u003etranslator-\u003etrans('mautic.email.api_key_required', [], 'validators'));",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "3b499749bc97ad6016ba45a04ec7abd0ce0fa9fa4c3f506cf03bb2b84e1820f6",
        "deprecatedHashes": [
          "5a57eea8ff880fd30c72be3d3af4b2ca96dcd50017392f75dd55bf6ae6799c59",
          "c347db15be1438baae81b275a4b81629f6c0f4b4d2b0645ac5684529266e6ace"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ed8f2832-c73c-49fa-8519-d3074e24fb7c",
        "line": "307",
        "column": "12",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Translations\\en_US\\messages.ini",
        "code": "mautic.core.password=\"Password\"",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "a4f0e47dea2435634bfee834b96533f70fc61c9fe49682bf5e3ccf2cd6e0be37",
        "deprecatedHashes": [
          "161a43d34e4bffd6cae061f69ce34af147efbe3df5b0a9f6a8251498af7642ee",
          "a5dcf0379bac957136f7e802221ee69214aca9fe2cba514c6f4e4c606a33510c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c82daef1-922d-4ba9-8bc7-6e21a784cb15",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\mk.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "38ae7a66aefdcbcc91f2a3c28a6dce5de70825ff586b4913b512dbcee9bed7b6",
        "deprecatedHashes": [
          "39c75f2869be0f8ab8ec35cbe5115f2543129e6d67bd44439a26ab979e9b705e",
          "ef4469f531cf44c1301fd061b6daa31dbc4955158a1b94d3a443999d73dda737"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "06203857-92ea-49a6-a626-6a3dc99833ce",
        "line": "70",
        "column": "100",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticCrmBundle\\Tests\\Pipedrive\\PipedriveTest.php",
        "code": "eys = ['url' =\u003e '', 'token' =\u003e ''], array $features = ['push_lead'], $addCredential = true): void",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "7d3a4ef7c73630a92edc64574c125d6c02b3b417cda1aca013b7e05775e37ebf",
        "deprecatedHashes": [
          "ff7c43b2459eec23f5925bf16dd9a465ae26e31374de1e2ca6470773901d2384",
          "0cadf7dba186f544a49c298c044676ca73c092c5a6954ce799b10dbf258982be"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8f10bb6a-4656-46fb-a71b-185cbe9e773d",
        "line": "24",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticCrmBundle\\Tests\\Pipedrive\\PipedriveTest.php",
        "code": "const WEBHOOK_PASSWORD = 'pa$$word';",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "e6a03aa1a8aa7713d46a6d1dc8326ccadd5968e2a66dcfe04b1b25d09f662288",
        "deprecatedHashes": [
          "fdc7575ea98324dff02be9fd75602dcddaf53ad82f5d7472a3aefc05de74ef01",
          "62bbb125b0270fcabecc6ad4178f5d6d721e0f5bbe61677154f5b7ace07d5212"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "790ab050-56ee-4b67-b16a-409ac105f5af",
        "line": "23",
        "column": "351",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\link\\dialogs\\link.js",
        "code": "accesskey]\",width:\"80px\",label:b.acccessKey,maxLength:1,setup:g,commit:k}]},{type:\"hbox\",widths:[\"45",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "8bca463b71e42354c98d8e47f031780f55a425281c5e3bc8c9388cd1f669540b",
        "deprecatedHashes": [
          "dfde84a2134c51501993bd4f3e2f0e40a81fd48e81cab1bbe3384da71167636f",
          "045058f4018e4d1b930a1439d7597d5211fee77d02cc92deba40481f7ab234e6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "664976ef-1459-488f-af44-01843322b24e",
        "line": "8",
        "column": "345",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\textfield.js",
        "code": "accessKey:\"C\",style:\"width:50px\",validate:CKEDITOR.dialog.validate.integer(b.lang.common.validateNum",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "84ac5134d761a4b7bbfc1365f493eb52f67c70e4973f5a677ee7cdce4573fb98",
        "deprecatedHashes": [
          "c6e2e8596a23e1e73d85d3078ed38641bc98b64ac3069f104d87ddeba1b4a6eb",
          "8ff51dabd27e2ad84d5664ca8700cd71c28691fbd86bc098eaa3efa4dd57b45d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "eba23bf1-8fae-407f-8fd5-27ecda356e62",
        "line": "9",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\forms\\dialogs\\textfield.js",
        "code": "accessKey:\"M\",style:\"width:50px\",validate:CKEDITOR.dialog.validate.integer(b.lang.common.validateNum",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "05368a7ca4ecb983ccb997ce48954a53ce0a4d625940f0a8320024b764f62f1a",
        "deprecatedHashes": [
          "71c20ce50ac84d6216cb2ca5ec3dd87ffe986c408d8a715efab6b26b6d8b3b96",
          "c6c53ea89e8f8c596227b4e69c0d0eb81810af25429776c905144ec60ddfc70c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3280ac89-6926-4437-9b5e-8b83cb88ceb2",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\cy.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "6034559b60c25050be6e5a8305d7b7aadd54282197347106431713215e6e5b60",
        "deprecatedHashes": [
          "e2f7618a620b4deb7d730d33aa88c3ae1f7ae36a0a54ab4e2d46a00613fd85e9",
          "b1cbe6d0ec652309c11900a5fb35357ce9f0745aff6ad4dcce12d64684cd9813"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0510ae84-bd6e-44b2-b940-973fc209f806",
        "line": "251",
        "column": "473",
        "confidence": "MEDIUM",
        "file": "app\\assets\\css\\libraries.css",
        "code": "AAAANSUhEUgAAAHIAAAByCAMAAAC4A3VPAAAA/1BMVEUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        "details": "(1/1) * Possible vulnerability detected: AWS Secret Key\nWhen use AWS Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-2",
        "vulnHash": "4656c40cf74c4b1236618d12d5e04bd61ee0b9aa0b049f41823fff8509310a5f",
        "deprecatedHashes": [
          "d817032f2d2582d05ebe1e53c8ea99c3141ec98534ce3f6e06866b2020ecbbc4",
          "b6274a9bcffe8cf766b14942fe94ce0c656f6701a601ff7331c0598a6987c0f1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "98f97eb2-604f-4e57-a3be-2bf10a18131d",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\assets\\css\\libraries.css",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: AWS Secret Key\nWhen use AWS Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-2",
        "vulnHash": "cf557829b2531d2dd80a111eb4069352bcd47768140c5f6bc0185a2fedea6443",
        "deprecatedHashes": [
          "b960f09c151b55fbc813f16dabfa7c59ea24dc1cb53ee1af8560e5d30cd8492e",
          "3e60f527f6d2d221fd0aed3c375e55c7bc6346a0ed47e9370fa81098bf620e42"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b8df198b-cb4a-4376-9081-9336ce928f90",
        "line": "89",
        "column": "37",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\UserBundle\\Translations\\en_US\\messages.ini",
        "code": "mautic.user.config.form.saml.idp.own_password=\"Private key encryption password\"",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "67d4217b9be96e4c11ec62760123772d67853d13ed4e31b350529743e0e8777e",
        "deprecatedHashes": [
          "a68aa6c4be7463e977508440d606474bdea05ae1736df4f3055b4f7b34976ab2",
          "f884064035d17bcc7cd543657999e9ee6da0c9054b103d2abc1a2a19053168f8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3314991a-abf9-492a-8848-a789040f22de",
        "line": "20",
        "column": "21",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticCrmBundle\\Translations\\en_US\\messages.ini",
        "code": "mautic.sugarcrm.form.password=\"SugarCRM password\"",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "71508baa8abc26cfaad2d67c3c778b81f47a62ef66d14c6ca4a993be458f202e",
        "deprecatedHashes": [
          "404e4aeb01964a0aac43ce53219685b2083050883c8e13aee3b1d5d34fe9c26f",
          "052de8ce2e6d6ab8d5c38c8548c9b86fd3f3fcdd4e43aa71cad36848eccee737"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e97d7e63-9669-4bd5-b8a9-b733009aa06e",
        "line": "40",
        "column": "19",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticCrmBundle\\Translations\\en_US\\messages.ini",
        "code": "mautic.vtiger.form.password=\"vTiger access key\"",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "b336253f313b7b75c192418fd7c6bc735756a759ded3a97d582d313f657b1f3e",
        "deprecatedHashes": [
          "125b82c61890de96424414ba4060e8e5a901b5ebed9dcc2f8590897664bf0c8e",
          "7e915638707c6d04beca844dfe05da1a27a31061fc2ce59600aafc9a5cda86db"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "64621e21-17df-4ad2-b101-8d2ecaebb03e",
        "line": "59",
        "column": "28",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticCrmBundle\\Translations\\en_US\\messages.ini",
        "code": "mautic.integration.dynamics.password=\"Password\"",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "7bc4df038fd2f3a0c2a3d1652f50cb21c9d7cb046601cbf035f1dc8b88454ec6",
        "deprecatedHashes": [
          "ef2b811d5d9882015ac081d1abbc7b989c6965eaa56542717d6ecff58d0e789c",
          "58b92ab75ddcf2dfaf7a1e98507c3a7ee2251bbea0cf4befb78cdc9c3192e3c9"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4f90b42e-96c9-48b4-8c3c-d674c180590e",
        "line": "79",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticCrmBundle\\Translations\\en_US\\messages.ini",
        "code": "mautic.pipedrive.webhook_password=\"Webhook password\"",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "d921e49bd7c9fc06645d5e69e48e13035eff96661ef466953a831c0a1d311b2f",
        "deprecatedHashes": [
          "2dd211402db3ebc73328aee899f98bc58bf6b61df06282cadf666ddee4da60d5",
          "b8282cd67c8d28b03533c13f3ecd3324ba7a81cd416da31728d434b0a9270ff4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "df95175a-badc-4823-9cb1-7c8388ec86d8",
        "line": "83",
        "column": "32",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\EmailBundle\\Tests\\Transport\\AmazonApiTransportTest.php",
        "code": "$this-\u003eamazonTransport-\u003esetPassword('password');",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "535ebf7eec2c3841a7361bf4fb856bca7497ba11765707675a4fff4c3d83c4a3",
        "deprecatedHashes": [
          "b16fa641804799f361fa2401a5a3be7af672740d63eaf5f05f0db8054460f3f3",
          "1283823fca30044f937b1d4b2efb0f5bc2948f4c4172fb34edc9d6557370569b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c80d55f5-b8a5-445c-bff9-aeef9f28dc99",
        "line": "121",
        "column": "65",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticCrmBundle\\Tests\\Integration\\HubspotIntegrationTest.php",
        "code": "-\u003ewillReturn(['other' =\u003e 'data', HubspotIntegration::ACCESS_KEY =\u003e 'token']);",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "a9295bf88bcf1fcd30f631bcc579bfaeb92e1b4aa6c9d275539bb96ff0c66d47",
        "deprecatedHashes": [
          "3a16d0bd29b3903459471efbb365e9260649a2bdcd3295376c810101f0ec2dfa",
          "c2790028d86dd68691b32428328ee2d5ac4dfe819161c7cfbab58f486a3e3c56"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "09f873f5-2c70-4e1c-95a2-e749da23f4fc",
        "line": "151",
        "column": "65",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticCrmBundle\\Tests\\Integration\\HubspotIntegrationTest.php",
        "code": "-\u003ewillReturn(['other' =\u003e 'data', HubspotIntegration::ACCESS_KEY =\u003e 'token']);",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "c962b843cdaf5c43c37bc1e63244aa6bccf96752d3c6f6fc37d5cfe6120380e1",
        "deprecatedHashes": [
          "64fbba76c138f9bf1bd7c41846fc6990696dc62c87960f3bf105f135dd77bcee",
          "2f2b50b3bc05298ce869a94056bd31a18c32c93895d3711d898b4200660630cf"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d1983260-89d0-4c61-a7e5-40bc57ba26c0",
        "line": "2919",
        "column": "52",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\froala\\froala_editor.js",
        "code": "sskey', 'action', 'align', 'allowfullscreen', 'allowtransparency', 'alt', 'async', 'autocomplete', '",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "1032c85cdf8921c0ae760fd5c791cc9a9919c07344dcc1f469482bf1576d350b",
        "deprecatedHashes": [
          "f7b6a16c46ae9f9093bc28ab43e9c1cd3204c8f5817e119c93ebc06030cd0739",
          "5d76b83da5415c77326d832d0e88bac13634886a459f0486b6bab9a2892a4e43"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b0a506b5-9825-40e9-b3b8-0b94516c29c9",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\lang\\fi.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "a8a926cbf77b8ea36ac6f5c3cf27890edc69700e796b1aadac5c253000bccfc7",
        "deprecatedHashes": [
          "3ad3accbfa776321a9c3a4b2bece8b98bc5f6e6e692c893da0fab88cf8dd0d21",
          "ef334b024e5fd2962d071f4eb25f12da4b1da7f52aeb572059525e9118abccb7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "844956d6-7ab4-476a-8ea4-79209f13ee30",
        "line": "9",
        "column": "6",
        "confidence": "MEDIUM",
        "file": "plugins\\MauticSocialBundle\\Form\\Type\\TwitterMentionType.php",
        "code": "class TwitterMentionType extends TwitterAbstractType",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "25394746607e0b94515a3b4a0b4c2f651487ed696ced6926d63bf2c9c0df408a",
        "deprecatedHashes": [
          "4b66142962aa35a9094cfeeb0e1275dbd173438a435d6663357ddee735465c0c",
          "61f7f8abf0ef3af87bd96745f9e4749c9e73f0fe420ab0c1d4ed74db5d580cfc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2f3ffd21-f2e4-4c88-afa7-554f6a5b2062",
        "line": "57",
        "column": "23",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\InstallBundle\\Helper\\SchemaHelper.php",
        "code": "$dbParams['dbname'] = $dbParams['name'];",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "5d40a0e21351e5a349c46acf6fc2c0f3b283a6573229d06fd42d2a7abe7b1a04",
        "deprecatedHashes": [
          "29e0b07f0d41086ad33633cb12a7ee77443f4756a7a3ef2c1788a56d37a22c77",
          "9de951e344e23661e91cdef664a04324ca196525ab0d433c2e77832d6a027db4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d4912757-deee-4256-af5a-3fcb793f8f5c",
        "line": "119",
        "column": "30",
        "confidence": "MEDIUM",
        "file": ".all-contributorsrc",
        "code": "\"profile\": \"https://www.linkedin.com/in/miroslavfedeles\",",
        "details": "(1/1) * Possible vulnerability detected: LinkedIn Client ID\nWhen use LinkedIn Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-9",
        "vulnHash": "f8c25717d38004edfb5a4dbd1742cc683e31addd9a15aa030cb1d13ab369ee44",
        "deprecatedHashes": [
          "8b56586c204c8e0e36dd744dc5fc7b697ce680e92f79ee3c20ee4b5c37ad54ad",
          "b4edfb8ae4cf0e0cd1ae72235d1b52df8d2926796fe3570787fd40d00c2a42b4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4c3f93b5-4750-431c-88ff-79eb3e98b9fc",
        "line": "260",
        "column": "29",
        "confidence": "MEDIUM",
        "file": ".all-contributorsrc",
        "code": "\"profile\": \"http://www.linkedin.com/in/rehannischal\",",
        "details": "(1/1) * Possible vulnerability detected: LinkedIn Client ID\nWhen use LinkedIn Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-9",
        "vulnHash": "1005bb2a8c0d88ab9149a101586402ceab1d755a86c808a93f8fbc79d29cf68b",
        "deprecatedHashes": [
          "d9e37c317e32c44ff411efbe72e15b2c88cd896ad3a77e9b8b9ae46215b46899",
          "b26aa7d679219c779ae7ea57369093d6920874a38e9803f81699969c73ff090f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7e1b860b-93a8-4f63-b712-c4c328aba1a6",
        "line": "523",
        "column": "30",
        "confidence": "MEDIUM",
        "file": ".all-contributorsrc",
        "code": "\"profile\": \"https://www.linkedin.com/in/mohammadlahlouh/\",",
        "details": "(1/1) * Possible vulnerability detected: LinkedIn Client ID\nWhen use LinkedIn Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-9",
        "vulnHash": "db25f7d475b83903cb0cbcb24fb52d7b5e2ae7a4e4971a1717ddc4562c70295c",
        "deprecatedHashes": [
          "61e27cb094ecd66793715a0fe51879598eec320abecbdd87d35d2ca7cb6d2bb0",
          "fba84b2cb53a60f5a1b2ca949a3f48c256e6d30dd6f188043f8f698252b65137"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "79a5a494-48f9-4e7a-bdae-2a8d60aa12e1",
        "line": "80",
        "column": "73",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\EmailBundle\\Swiftmailer\\Transport\\SparkpostTransport.php",
        "code": "$this-\u003ethrowException($this-\u003etranslator-\u003etrans('mautic.email.api_key_required', [], 'validators'));",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "911c61b9271625ebfd4f9dc5fd75afd9cfa045bef98b77c4defbb29d9e145c8a",
        "deprecatedHashes": [
          "86fc25bdb75ef4d0ccda8fa2211998574c584d1d8c95e2bc2741ea12a34e7c0a",
          "65c8ff1de65155cda72a56713b3a50d1aac55d50db2ed23c687a178bad42728b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "21468530-fd74-44e9-8767-4c4d772367cc",
        "line": "367",
        "column": "2981",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "AAAANSUhEUgAAAHIAAAByCAMAAAC4A3VPAAAA/1BMVEUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        "details": "(1/1) * Possible vulnerability detected: AWS Secret Key\nWhen use AWS Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-2",
        "vulnHash": "e71ebabfb0effc0bf46dc7df3c330d8dc3ef41d22910e96d298c9bf7b5c839c8",
        "deprecatedHashes": [
          "f1695fd5c99ddb3f4cb9bb58453b89f42117206fcdb6dccd61b31fe3bb9c5d36",
          "0bbb364fca6b29dd0cabd8246523d90ed49d570b6e719d52791a428802b72c49"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "02d1a5c5-99cc-4d6e-b958-876511ad33c1",
        "line": "367",
        "column": "1326",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "accesskey','action','align','allowfullscreen','alt','async','autocomplete','autofocus','autoplay','a",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "3a9f4455d4eb432f57ddc660518a1130aa9d68f31027c20960e120e1a21e964c",
        "deprecatedHashes": [
          "01db7949f8d8d0b747e64e02fd88dde20f51f4db84bf0e4ef5349fbba2ddd74a",
          "bad2b7b28b2f2478d60b073358867e590a2ec05bb5fa0aff1d2943aa91f1cc76"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1d025c7c-2d6b-433e-84a1-95c39b34dc3d",
        "line": "510",
        "column": "1442",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "api_key:mQuery('#config_emailconfig_mailer_api_key').val(),authMode:mQuery('#config_emailconfig_mail",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "5a0c1477239a24d8b6ad9c446dec4fef770c24bca33e58ee45911529a06dc616",
        "deprecatedHashes": [
          "d0bbd612e04a7d856171b0a880489445b85cb09e195b271bf32bc4a3aee4fcb4",
          "b8deebd82d61019faf5e5a9ba4c0c027940baada070dafa21fafb620cac9e429"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0fd09e20-775d-481f-9b31-9643fdef8ed4",
        "line": "721",
        "column": "338",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "apikey=mQuery('#integration_details_apiKeys_apikey').val();var d=new Date();var month=d.getMonth()+1",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "df2108d7ff54e0f62965353318e0fa5237d7c0fe0e1277fe072c78a6b7c30bea",
        "deprecatedHashes": [
          "e1225ef9fb6ed58cf0502235302ff8b10cda1211fd59270a5ff712cf19ad8bb6",
          "3af9eb1a934ac3b20f7b3e99a3d8128011fd44982ff51db96f19c8ce0ffcc17f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "db08699d-0103-4da4-a445-dd827df5996a",
        "line": "721",
        "column": "891",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "apiKey='+apikey+'\u0026period='+period,function(stats){var person=null;var company=null;var free=null;mQu",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "34963d2dea2f28681a915f0a977cf82db7676ebea8ddb17d60b31ed8f918fa0e",
        "deprecatedHashes": [
          "e8a478109350b3c00318b2d24403b9f35b1f8849c2f01b86a827dcab550ca3c8",
          "2fb78e18b02637149bb1fb51cb5e60c7c0958083af3845acc46782c29bebe942"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4ce86d0a-fc3f-4f62-9a9c-fcc7f25ceb4c",
        "line": "1",
        "column": "8723",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.css",
        "code": "AAAANSUhEUgAAAAwAAAAMCAIAAADZF8uwAAAAGUlEQVQYV2M4gwH+YwCGIasIUwhT25BVBADtzYNYrHvv4gAAAABJRU5ErkJggg=",
        "details": "(1/1) * Possible vulnerability detected: AWS Secret Key\nWhen use AWS Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-2",
        "vulnHash": "ff8e9b5f7433dec96aec56b4ab9483b1c87153ec56e287d35773035ca3225649",
        "deprecatedHashes": [
          "44f8cef669a4fca92852f80dd2b8eaf3d5952103dcbbd192a07a9590c598c777",
          "8ce22d9356853cbf368c6c10ceabd5f627cc9e2677facd76650965aec9476c1a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1ca639e8-54d4-4155-92e6-1f18e2523fdd",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.css.map",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: AWS Secret Key\nWhen use AWS Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-2",
        "vulnHash": "53db0a8135375d47f1e304beb32c4815917d37724e4295fedcb2f1fd580238d5",
        "deprecatedHashes": [
          "cf065b4893c7eeb413bce8652b106ec111da70666a6eaeb3d92e3c23faf2e0ad",
          "59feeb089c7eeb0494b7f94b5b11d1eba5006f24d1d5ed3ea24db080f88e15f9"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4f5b438a-77db-4528-9d8f-8d43f9a8f6cc",
        "line": "41",
        "column": "1322",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\css\\libraries\\font-awesome\\fonts\\FontAwesome.otf",
        "code": "twitterfacebookgithubunlockcredit_cardrsshddbullhornbellcertificatehand_righthand_lefthand_uphand_do",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "d085e6f8ab7e940cd592270f6b7a7045b29d86d956bf6bbcf372847a32a63e23",
        "deprecatedHashes": [
          "d7fb71fe3002a55817928d1c27e7850f53b94935a12b4adaa4d31bac03b449f1",
          "c79e1b942ad9533546f8dbaa7ee58ef500865bdddc15beaa798f72e6c834921d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7f59992b-a8ae-4472-82a5-72688b892608",
        "line": "41",
        "column": "1337",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\css\\libraries\\font-awesome\\fonts\\FontAwesome.otf",
        "code": "githubunlockcredit_cardrsshddbullhornbellcertificatehand_righthand_lefthand_uphand_downcircle_arrow_",
        "details": "(1/1) * Possible vulnerability detected: Github\nA GitHub access token was found. This pose a critical threat against your organization since it can give access not only to the platform itself and all the members of your (perhaps private) organization to feed more accurate spear phishing attacks but also to actual source code from your applications. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-8",
        "vulnHash": "36245b4fbe5891173e5dadb97531dd4157443e2e9058c8c9d724fbc645b3bf6f",
        "deprecatedHashes": [
          "1de52726ee2a3027e532dcaa98ea5072ea0383d6854ce5005fb66b7d26875a52",
          "728243e83e7394f191458645f7aa5cc5cecdd280f25aba994174e698f9b98270"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ab28a132-152a-4c40-9ff0-6d254085b36d",
        "line": "41",
        "column": "1211",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\css\\libraries\\font-awesome\\fonts\\FontAwesome.otf",
        "code": "linkedin_signpushpinexternal_linksignintrophygithub_signupload_altlemonphonecheck_emptybookmark_empt",
        "details": "(1/2) * Possible vulnerability detected: LinkedIn Client ID\nWhen use LinkedIn Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.\n         \n(2/2) * Possible vulnerability detected: LinkedIn Secret Key\nWhen use LinkedIn Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-9",
        "vulnHash": "52bf275da8c85b80a4b5669126d6e4f7fc29a8917fff518e51c6484b5ebc6012",
        "deprecatedHashes": [
          "2d0bd72d899c9d9a6bbeca7ba93415a11cb7fc04c5391d96db7c193aa2ce8a22",
          "67e3e90fe3c55509c20651ccfae89ab5c3f96598aa13c2d0d45b7c1a76dceafd"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b1d7828f-e4e9-488b-a36f-60382b8c5070",
        "line": "41",
        "column": "1789",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\css\\libraries\\font-awesome\\fonts\\FontAwesome.otf",
        "code": "linkedinundolegaldashboardcomment_altcomments_altboltsitemapumbrellapastelight_bulbexchangecloud_dow",
        "details": "(1/2) * Possible vulnerability detected: LinkedIn Client ID\nWhen use LinkedIn Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.\n         \n(2/2) * Possible vulnerability detected: LinkedIn Secret Key\nWhen use LinkedIn Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-9",
        "vulnHash": "c8c8a10a9ab9fd8f6679feb08846409b1957e71f0eafb2b96a1b29c95da57103",
        "deprecatedHashes": [
          "b74f9b97a1614859194d6057f9887713aff8f0598c4981f754722d14310d27e3",
          "e1b1203e3c99a31098deae60e098f2556d3a952f6034f1d54160450195fc36f8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f8825954-224c-4e66-882a-3260b64ae243",
        "line": "251",
        "column": "473",
        "confidence": "MEDIUM",
        "file": "media\\css\\libraries.css",
        "code": "AAAANSUhEUgAAAHIAAAByCAMAAAC4A3VPAAAA/1BMVEUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        "details": "(1/1) * Possible vulnerability detected: AWS Secret Key\nWhen use AWS Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-2",
        "vulnHash": "9bac8c4aece465eaa3d3283b23bd36dc2db8ecfd5a545b444677020b9a67bca9",
        "deprecatedHashes": [
          "9b018be6befd366058c1789e228c534698975aa5888e6a4c11e673e9f0199e11",
          "a4903c0af2fca873c616fff7d697970f617e44f19423b3795d870a415ef18159"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "19fc76e2-53d7-4c4d-8f65-cca768374204",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "media\\css\\libraries.css",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: AWS Secret Key\nWhen use AWS Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-2",
        "vulnHash": "7e536c315c7175ecfd09d58f0b06d1352b691f0e132b44438e6985b7ce747c01",
        "deprecatedHashes": [
          "13a9ad14f931d824234d3a30c485b910023b905c71c1d872c759ffb245dddd1e",
          "88fac1cc0d5867aca35658e42f224247c9d1961d51ecaacc98fd53891ce13f48"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "91ea8bf3-7df1-4807-b107-ad31916ea030",
        "line": "388",
        "column": "3242",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "AAAANSUhEUgAAAHIAAAByCAMAAAC4A3VPAAAA/1BMVEUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        "details": "(1/1) * Possible vulnerability detected: AWS Secret Key\nWhen use AWS Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-2",
        "vulnHash": "fb50acd8fb3226486934de098fa0e88d13470ef4322b3bbd36563645f052a833",
        "deprecatedHashes": [
          "e88575201adf27ca32399823cdfe80846d6398bdca594291bad0857b9b853d20",
          "6966919b0e2edf2deb0b484f73fd1f9b63dce64433dbd93e0c723243d8463786"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4edae87d-a2fb-4851-8c38-04618913efae",
        "line": "388",
        "column": "1561",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "accesskey','action','align','allowfullscreen','alt','async','autocomplete','autofocus','autoplay','a",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "b5892bfc6447fbb87f2c21d4688678982dd2888c4a1a3a99432122f44db5ff7b",
        "deprecatedHashes": [
          "b03e16ba8d95ba989628691e2c4b4b4a28939e47b99e288993e8242c68ab7e08",
          "42eee39652cc1e18841566f98a0a224f9c6cb295a4ea344573a7205eceeb70d4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "27256ba8-6660-43e2-920e-70dc76abb3f6",
        "line": "573",
        "column": "1442",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "api_key:mQuery('#config_emailconfig_mailer_api_key').val(),authMode:mQuery('#config_emailconfig_mail",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "5e7c2db16ec360ed0c8d1db2e6e2e14747ad2be890c06c48db5ed96e3a902e21",
        "deprecatedHashes": [
          "9853923cdd24cab1580dcc100e203f97194c105f484494b71b22108ac15ae24e",
          "95acc1d077407363dbfc41fbc456bc0ecaf0aa0abf8699d273e57ee41ba7d7bd"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "28ee1b0a-83fc-40fd-8f72-939482429f20",
        "line": "777",
        "column": "1312",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "apikey=mQuery('#integration_details_apiKeys_apikey').val();var d=new Date();var month=d.getMonth()+1",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "68178941252787db304de061333af3902066e88d1719bdaf7c08dc0aa4443c64",
        "deprecatedHashes": [
          "0f3762e934a0df90fef7d6d95f6f90d6e7f7d709de859ee8205578bcdf2f585f",
          "82a8942d37667ecb959c8b773585ec93d06c89c54ecc7c153fe540e0b127dfb5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "834dd849-4947-473f-8db7-22b178ea5c6c",
        "line": "777",
        "column": "1865",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "apiKey='+apikey+'\u0026period='+period,function(stats){var person=null;var company=null;var free=null;mQu",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "e73ee8f7e2a88e734294a0637fbc6d693638dd3d111ca4010ecd74bede651fa0",
        "deprecatedHashes": [
          "a00f40dd6035035aef9311b75d06ff09f374e301abdd69d4ef8c36bb9d93c8ed",
          "ba011822eeee79beb548b5a9bb549d73cfafdfb744ba4a43e4e6039efd130bac"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e8095c1a-d9f8-42fd-b11d-220f9f63a5ba",
        "line": "4208",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "acebookgithubunlockcredit_cardrsshddbullhornbellcertificatehand_righthand_lefthand_uphand_do\",",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "4a86c41c96967c33d02156321bf7249c61d5996f05f91b44ad19c14f63c1d971",
        "deprecatedHashes": [
          "05d211c3776a595408c226720bc2275f679f1c30298d7123d8929e0985820fbd",
          "062e2e9781894ce81e4fcf2a4c9d857cd7361982c6b27f1514a79afd1b25d6b7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "29970a0d-19f0-4b32-beec-cebba5637f04",
        "line": "4208",
        "column": "32",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "lockcredit_cardrsshddbullhornbellcertificatehand_righthand_lefthand_uphand_do\",",
        "details": "(1/1) * Possible vulnerability detected: Github\nA GitHub access token was found. This pose a critical threat against your organization since it can give access not only to the platform itself and all the members of your (perhaps private) organization to feed more accurate spear phishing attacks but also to actual source code from your applications. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-8",
        "vulnHash": "b640ae45562a125a483687a91f6c3d0745a642b7be8bf4424469651528811e5d",
        "deprecatedHashes": [
          "323dc91b6bb9e0e89018f9da1c71f4f3d36fa4f0f09d150f67fb0cef143e0038",
          "579582c12b5dd916dd4f6500ec44a8140cad2a08b5d1cc1aa9bc599e3623e074"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8c4c21ef-e141-48e9-a4a2-7fd405bf0df8",
        "line": "4239",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "lockcredit_cardrsshddbullhornbellcertificatehand_righthand_lefthand_uphand_downcircle_arrow_\",",
        "details": "(1/1) * Possible vulnerability detected: Github\nA GitHub access token was found. This pose a critical threat against your organization since it can give access not only to the platform itself and all the members of your (perhaps private) organization to feed more accurate spear phishing attacks but also to actual source code from your applications. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-8",
        "vulnHash": "53c768757abe21028e4cad895cd03bc90cf69d8fbc63683988cc1135793b1f56",
        "deprecatedHashes": [
          "8783a5fdb698fbfd247f0c7752aeaf4aa8b974da0fe9fe1b634b034999871f77",
          "ba8ad445d1da0c108da3e94374825d68c66cfde9cc8a1460c0f5f974725cc215"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5ebfe8b7-062b-4b55-ae3b-7721c478dae0",
        "line": "4952",
        "column": "24",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "lockcredit_cardrsshddbullhornbellcertificatehand_righthand_lefthand_uphand_do\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Github\nA GitHub access token was found. This pose a critical threat against your organization since it can give access not only to the platform itself and all the members of your (perhaps private) organization to feed more accurate spear phishing attacks but also to actual source code from your applications. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-8",
        "vulnHash": "3b3d7a20dd8243f76f2a08f1a36d7bccea244637b6e7ac79319a9c0b6c23cc03",
        "deprecatedHashes": [
          "aa59c88a0d1d878d31e1ec8442c0d86acc9fc5fde91c6b11754444aa889b8284",
          "edebb42b3d75edac1d78b18359e2e6864af5451be660edd8081d014d22e82633"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "97f55f4e-e07e-4cc4-9eb7-2e29a2dd861b",
        "line": "4270",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "_signpushpinexternal_linksignintrophygithub_signupload_altlemonphonecheck_emptybookmark_empt\",",
        "details": "(1/2) * Possible vulnerability detected: LinkedIn Client ID\nWhen use LinkedIn Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.\n         \n(2/2) * Possible vulnerability detected: LinkedIn Secret Key\nWhen use LinkedIn Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-9",
        "vulnHash": "45102231fdae00df47c7750c82f1881e57bb2e0d3523885ae1d032f20613fdd3",
        "deprecatedHashes": [
          "b8851e9c7e1da49f9cdba01947bb6480b2afed0d0e2a7e7697f2fa9a1074c4fe",
          "73976666cff2ece3f913058d1a180be88abc012c2361d2ac5470609936f1ed2b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "58eff9cf-81a4-4737-bf94-fd6dd069b34e",
        "line": "4301",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "undolegaldashboardcomment_altcomments_altboltsitemapumbrellapastelight_bulbexchangecloud_dow\",",
        "details": "(1/2) * Possible vulnerability detected: LinkedIn Client ID\nWhen use LinkedIn Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.\n         \n(2/2) * Possible vulnerability detected: LinkedIn Secret Key\nWhen use LinkedIn Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-9",
        "vulnHash": "d988562275f25751f94fbc0d80764c3799c21de81cc72c5a3ff5c91b27f0dfc5",
        "deprecatedHashes": [
          "eb64368b0b9336d0084ba8bd28729bfd5c07c5533810706edf395fd6552114c5",
          "e9ecb41082c2d7eddd950303a9cdf17993f7ed9043b1176cb7888bf7b3272dbf"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b1ee4215-3ed0-40e4-8b56-6b5e41e7f96b",
        "line": "1728",
        "column": "36",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"-\\u003ewillReturn('-----BEGIN RSA PRIVATE KEY-----');\",",
        "details": "(1/1) * Possible vulnerability detected: Asymmetric Private Key\nFound SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-12",
        "vulnHash": "6c8ae0b571f5aa2d4c1084c01e6f6e682ebbea57da7f2983cae1ad3a97374b20",
        "deprecatedHashes": [
          "c2b96054fd9726500a8fc0c17eda4055adb7233210a1ec6d1587bb14ad47534f",
          "a035bbe478846385e4aab959f94e30dba3b9c9ea45e4843bc83e2060dd71bb48"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "07cd2eff-607c-4b1f-a98b-ad200fea8c25",
        "line": "2348",
        "column": "63",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$decryptedKey = (0 === strpos($data[$field], '-----BEGIN RSA PRIVATE KEY-----'));\",",
        "details": "(1/1) * Possible vulnerability detected: Asymmetric Private Key\nFound SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-12",
        "vulnHash": "a95341a1e4fb2b8f1ebb10b207b956a7a9063a1baaca4870f520d22d622f98a7",
        "deprecatedHashes": [
          "5c4ff4f9d08aa72cef2063489b5777d518508f3774aa7381dea878cdf0180841",
          "ef4e842343a8f0e06b97eddb2d08dea11141d075b2482217be0308285b499447"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6005094c-f538-410b-bde6-dc05cefd50cc",
        "line": "2751",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "IN RSA PRIVATE KEY-----\\u003c/pre\\u003e or \\u003cpre\\u003e-----BEGIN ENCRYPTED PRIVATE KEY-----\\u003",
        "details": "(1/1) * Possible vulnerability detected: Asymmetric Private Key\nFound SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-12",
        "vulnHash": "3dd2fc07302b5f4c104c5d7a63e2417893331c322ab774e564b353fba9d13fd1",
        "deprecatedHashes": [
          "42806100856eddb038f53157aefce829ace94256ca151650475d700fc530272d",
          "88e4a87cc0c6a169d6ade5ece85e8793b27e3daf78bab3da54ee59b082682fd4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d7e80ca1-8240-40a4-be2d-eb94f1f58733",
        "line": "5107",
        "column": "49",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"-\\\\u003ewillReturn('-----BEGIN RSA PRIVATE KEY-----');\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Asymmetric Private Key\nFound SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-12",
        "vulnHash": "e8e0580b873def5ea338ab9a66c64a70ba2a9ee265b4926c59d37c89e23852f9",
        "deprecatedHashes": [
          "b69350b7a0c1f61ae5349ee961aa0d2c25fee255cf80ca53dd05671a25a0e1c7",
          "533ad32c6502b3e677e1f9fd4be4dcc899d7907e193c9ae3127301061b849ebe"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c1734385-49c0-473c-b6e8-c2b4c3db36ff",
        "line": "5138",
        "column": "75",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "IN RSA PRIVATE KEY-----'));\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Asymmetric Private Key\nFound SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-12",
        "vulnHash": "e5edfe5a3a93598d154f83cb5f86354c45aa5b1904c1217a48498ca243aac16a",
        "deprecatedHashes": [
          "5e48f226eaf7ea18d9770b1d22c4a0caf983654c485c7766c7c2fa77ed385001",
          "ea27169d4f4f6dd5e8192dd96e86b34bb02c804252cdae68fc79ce664320828b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8db33861-92e7-44ee-baed-e4244fa85cfe",
        "line": "1759",
        "column": "36",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"-\\u003ewillReturn('-----BEGIN CERTIFICATE-----');\",",
        "details": "(1/1) * Possible vulnerability detected: Asymmetric Private Key\nFound SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-12",
        "vulnHash": "c73c8de5118d6e8b134f9a3ed597b1d0c209d642f288b54c0ab2d78d79e656df",
        "deprecatedHashes": [
          "875b6f586c16603caa469d5743d5c644d9e58594eca8c7dd3833a148c142deaa",
          "ff40a622c8738eeb37264e5c34004fbe08d6bdf40c2f114668d1efbcc8c4c92d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "aec2551b-0325-473f-8071-c56406036b70",
        "line": "2379",
        "column": "50",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"if (0 !== strpos($data[$field], '-----BEGIN CERTIFICATE-----')) {\",",
        "details": "(1/1) * Possible vulnerability detected: Asymmetric Private Key\nFound SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-12",
        "vulnHash": "8f4ef9ca253ca1ec9a3deec5abb3b1ad1aed08442797f299f9cbb78544645135",
        "deprecatedHashes": [
          "21895aa65c0a87f466d74aa25c1fd5da37c85bffd7d268ad86779d86e89d24be",
          "e850480581e4792cb5f201f4c0227080b756dccf8991bf03f476b1540ad1f2ca"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7440f61c-70ce-4437-9546-bd47b15e06d4",
        "line": "2782",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"-----BEGIN CERTIFICATE-----\\u003c/pre\\u003e.\\\"\",",
        "details": "(1/1) * Possible vulnerability detected: Asymmetric Private Key\nFound SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-12",
        "vulnHash": "e8b556e77574e7b3ba5ad9d327d9f30b7dc1b8242f361cc4c7fa06c6ae935dec",
        "deprecatedHashes": [
          "8a618e024ee9451ce448e20063e5ff238bcc66e1e477a23d96cc06937ab9c145",
          "05b071a6c1e4e3faf26d751296c8031b1e8efa14dd5a9d210229738c70163bb1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "39796cc5-eff4-4aab-9255-2dd5f01d39e8",
        "line": "5200",
        "column": "49",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"-\\\\u003ewillReturn('-----BEGIN CERTIFICATE-----');\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Asymmetric Private Key\nFound SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-12",
        "vulnHash": "2d7f477f13729e6d7ea6fc9b789e724a92084b7623cd6effea7ee7d43067f195",
        "deprecatedHashes": [
          "eb045bd082dbc29d00f720ba19528ef24af4c82969d99d270b122e8b18b88a64",
          "0351ba77c226d0dd158609a88e8a4e0c5f7603af0689bedd3808a8ac6c2a78fc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b5739db8-ef57-48c0-a417-51a279eb3c29",
        "line": "5231",
        "column": "62",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"if (0 !== strpos($data[$field], '-----BEGIN CERTIFICATE-----')) {\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Asymmetric Private Key\nFound SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-12",
        "vulnHash": "6b2693f31b8de0852da0d7f23ee63d4208ad3718870b19a65f3f40f12439c7e9",
        "deprecatedHashes": [
          "761da0214d182ce61e2936851f3a94586cd054b28d229e445123df98da8d23fd",
          "bced96fcdafed4e242bb97e15b492fdd7e181e988dcf5403938ee064ccba0705"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b6d137da-07b3-4b38-b9e4-794ecb101643",
        "line": "5262",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"-----BEGIN CERTIFICATE-----\\\\u003c/pre\\\\u003e.\\\\\\\"\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Asymmetric Private Key\nFound SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-12",
        "vulnHash": "42d12c1a97606a6f904b89dd7a8f02ca9dd98f56c3b7f3d7d7d889fdfede1005",
        "deprecatedHashes": [
          "35ea1a68c3a0f49fe12678be5ddfb5020691a31975318c6fb0fc0ebd4f9a1602",
          "f91f07d99dc91f3fc5c5d44315d1a8bd5c4fb9c9ee5280c9615e517cc57dd16e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "572faca8-b191-4967-bf64-f3874a1abbfd",
        "line": "271",
        "column": "39",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "alytics, $form['config[pageconfig][google_analytics]']-\\u003egetValue());\",",
        "details": "(1/1) * Possible vulnerability detected: Google (GCP) Service Account\nWhen use Google (GCP) Service Account is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-14",
        "vulnHash": "63ae0b87a2bde7be6e0a62e588680ee22fef627bf75ba599b30240f1b2cdc3cc",
        "deprecatedHashes": [
          "97e059dd453167ef4919dcf9a18bb3d93a1f1296cd2eb4d021a8dcb98ffa99e9",
          "6b2f58808f3c1ad9ab1d95eb6f750a177ba142396ad3be21d1c2eca4d64d6237"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "01179dc2-9c72-4cbe-921b-368159b00320",
        "line": "5293",
        "column": "19",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"alytics, $form['config[pageconfig][google_analytics]']-\\\\u003egetValue());\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Google (GCP) Service Account\nWhen use Google (GCP) Service Account is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-14",
        "vulnHash": "2b96b7997c4575c6a7fe0f975c0c168be5d16debbae9dab222f18711c8d63854",
        "deprecatedHashes": [
          "71e9d7be1dfdff9158a5133c7f9eff1a0a7a0120e05e1a7eefc82171673f103a",
          "7e853fa6971023dab53ee6cd5e1a43c143aac2cf4423ee9be1b28169a6217c08"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "07801dd4-fe2b-48b1-9f1d-4e968caebf53",
        "line": "23",
        "column": "79",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"'dbname'        =\\u003e getenv('DB_NAME'), // Doctrine needs 'dbname', not 'name'\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "f3651ac7ec569a931aaf9a5b8e860437f07fe60eded82ee3c0c986ff3e3c143a",
        "deprecatedHashes": [
          "0cf1437bcfc9e911f412ca3aebff3fd00983162ae8a8be2f2a6eb6fc3cb0338b",
          "2aa2c0ffcdc91161cc3ffc65b8aad91062fc6bdb52cd7a5ae1f0463bc220dda0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3a82b4c7-c1ed-464a-832e-d8e0bbce8e5a",
        "line": "54",
        "column": "79",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"'dbname'        =\\u003e getenv('DB_NAME'), // Doctrine needs 'dbname', not 'name'\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "4f2fef6a40247ea2a259f610d007ae02a32893ac34f3fbf152564519f4c8e6aa",
        "deprecatedHashes": [
          "339976e9e0468278529cba3877fbf8f7ff474c1ed4f4986179644c851666724d",
          "e89830059b687dd578089330dbad7d0be6e372b7b3e7be3cd5630fb6a5976450"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "bed6f891-9307-4008-9bdb-57eb13ef7f22",
        "line": "488",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"'mailer_api_key'     =\\u003e 'fsjkdah',\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "9f0baa94719296c523a79c95de7ed225bbc85e1bab35916f7171e4db2a0a4521",
        "deprecatedHashes": [
          "75d29412dfe39b58ed677557715562ca3f438ca2741cb9609267d2f80644451b",
          "1a41d7a57bbe3f2829ea6e949f79384157e21797073137e0f2398408f98924db"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "085cba16-4100-40e9-ae24-8f2999fc103d",
        "line": "612",
        "column": "32",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$appId      = $apiKeys['app_id'];\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "af7845a2c4183e97cbf62215e72a7fd6b645bd480b23d9f2e5ba9dbd724e8cfd",
        "deprecatedHashes": [
          "1f99592c259653e31061c6e76d93830e6ac8223f9ef2f87983113726b74a97cf",
          "704cf5ccfdee84d580db188f04ab285f8bbde21832ec5ac8e84bac673c25de22"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9d4d89ed-17a0-4121-99dc-3ca3ab8083e5",
        "line": "643",
        "column": "22",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$restApiKey = $apiKeys['rest_api_key'];\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "3a112c65f84b8fa2a6a08a6433c261e651b9c80ff28f0784d00eee0d74347cb7",
        "deprecatedHashes": [
          "8d4e181d01fd39b80727460934196ea8925536de0ce0a54b1afd247ea473c95b",
          "57fdb99f9af9850d3fe08bc1380477759773fbed4783b1c9c4283c1eeb917565"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f1849cbc-ca82-4387-98b5-a19d3a15d4f8",
        "line": "891",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$secretKey   = 'mautic';\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "ffbf9a7cd856b604b9f4f3ce92f4d3c15ca3ccba70db4a3273d8821a8eca35ba",
        "deprecatedHashes": [
          "506d28c2d809ad7d4f99f8ca13951d93094d86e6afd8996f4ea67eee8ac60a05",
          "11ee930041a27c6f53f5b2d8fa9e4f85fca44b04ef474fd8f40b9ad401b86a40"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "67bc90d1-72e4-4cc6-8c87-0ab86edbc906",
        "line": "922",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$secretKey = 'secret';\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "4909f4a34dda3ec48f612ba85f6be32d9a2b6b75861fb6755c6396587b4889f0",
        "deprecatedHashes": [
          "acf1ae3debfd1f2a806cd844d527199ddddfbf53e716bb89b38deba9db6ef57a",
          "547efd34cc216ba8da5b779fe13b645a49f64e141ef0a2e9e359a58d9fc1dd36"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7864de70-3459-4f51-af7c-a708d01f82d1",
        "line": "984",
        "column": "47",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$this-\\u003econfig-\\u003eset('secret_key', 'topsecret');\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "b281e4cc3a0be2e77179965ff514558bbcdc186039c5ea92755d849b01173a91",
        "deprecatedHashes": [
          "9d622e2d8ef2d064976fa0a375352cfddd6f3b8d201ec84daf8b230e8049e888",
          "469a46b7f01ec8a6a369d75e084f3f27e2b23bef431dcdd0bb2a212b1a0f998c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6fe169bc-75ec-4f54-98a0-1405b534cf20",
        "line": "1015",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"const FIELD_API_KEY  = 'field_api_key';\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "daef43d3bbe3f132911364f095f129e56251a9af9ca1399ab6957ecc0da85c93",
        "deprecatedHashes": [
          "26770892fcefbc9a086b3763a3958e4a91cc68082975183636dc35bf09a02e84",
          "db9fc238f4cb3182e858adc4814711b4b4cf9081e3b1fac64115cca42279a39d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e8470895-03fb-4fa6-be5c-a14c5d66f60c",
        "line": "1232",
        "column": "26",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$params['dbname']   = $dbParams['name'];\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "b2c7df6b17b1b2797ea37c0731c19e4fb75a101e3db9c21fbabf679fbaeaa563",
        "deprecatedHashes": [
          "e8a8a5652f653fd6753be735d2bdbb3251215d922d2e4efea262b1e976de640a",
          "5f6a9dc14d273a27ed6598a88a562c0d5fd6f2859bcba56fdd027a2d2990c68d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "27bd93e7-d558-4a72-90ec-3155554ab677",
        "line": "1294",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$apiKeys['expires_at'] = $apiKeys['expires_at'] ?? null;\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "9f93fc1cf3ea8fbf8f1f09140e23b8d569fd8051487b1b429cc7dc17aacedf82",
        "deprecatedHashes": [
          "30f122456bc1ca47cfc0a0b13c8f3e5eaba2817eefd8a657e82317e49dc473c0",
          "75fa556aac39271e8d59fc7ef2415a2df64de35a86047bfa2e6aee78e5a89b57"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f07cfb7b-80cd-4aa3-9a34-8cba36fcf566",
        "line": "1294",
        "column": "43",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$apiKeys['expires_at'] = $apiKeys['expires_at'] ?? null;\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "9f93fc1cf3ea8fbf8f1f09140e23b8d569fd8051487b1b429cc7dc17aacedf82",
        "deprecatedHashes": [
          "30f122456bc1ca47cfc0a0b13c8f3e5eaba2817eefd8a657e82317e49dc473c0",
          "75fa556aac39271e8d59fc7ef2415a2df64de35a86047bfa2e6aee78e5a89b57"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "77426153-88fe-4785-9e73-80adfb32fd5c",
        "line": "1325",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$apiKeys['expires_at'] = $apiKeys['expires_at'] ?? null;\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "8f6358dad2c4af1ecf0c13645e61611fd2a7ff011d15c81a386afc0f2baae144",
        "deprecatedHashes": [
          "5cdd035208723ceb57af5b1adbb16a9dce7d923b5bfb740e09b322a5ac7cf56c",
          "d1fc2080ed19ea9f96227b5424ac1349deb7fac5d465b26430f09cb2c8ba7bd6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f3bdd89d-39a1-43bd-a079-752c2b01d17c",
        "line": "1325",
        "column": "43",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$apiKeys['expires_at'] = $apiKeys['expires_at'] ?? null;\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "8f6358dad2c4af1ecf0c13645e61611fd2a7ff011d15c81a386afc0f2baae144",
        "deprecatedHashes": [
          "5cdd035208723ceb57af5b1adbb16a9dce7d923b5bfb740e09b322a5ac7cf56c",
          "d1fc2080ed19ea9f96227b5424ac1349deb7fac5d465b26430f09cb2c8ba7bd6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b48aa9ae-b33b-4aea-9568-ad45a8482517",
        "line": "1356",
        "column": "24",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"empty($apiKeys['access_token']) ? null : $apiKeys['access_token'],\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "882609e75fdc2e42856c807c703307155c9bd27136b18b3fb2e82b506dfb777f",
        "deprecatedHashes": [
          "2d9373bd5992e89b47645863a84aaf0968fbb704907d619c1713e529fc3c0e55",
          "ab0c9815d70764913968ff1d5859965355f13c5d567bab5a3af595c14ab7d4cb"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8836765b-1517-4460-9573-ce44e31bf86f",
        "line": "1356",
        "column": "59",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"empty($apiKeys['access_token']) ? null : $apiKeys['access_token'],\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "882609e75fdc2e42856c807c703307155c9bd27136b18b3fb2e82b506dfb777f",
        "deprecatedHashes": [
          "2d9373bd5992e89b47645863a84aaf0968fbb704907d619c1713e529fc3c0e55",
          "ab0c9815d70764913968ff1d5859965355f13c5d567bab5a3af595c14ab7d4cb"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "62c93393-cbf6-4e67-846c-c3562e07f64f",
        "line": "1387",
        "column": "24",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"empty($apiKeys['access_token']) ? null : $apiKeys['access_token'],\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "3b5e58cbb4ef8046985057d0746640e92f8b03b088c16bc5a806aef5762756f4",
        "deprecatedHashes": [
          "aeeea8c54828037e0cdef9c3a0f3130138a33091b82b7f035cf99131011706ac",
          "b58e5c7c18eb15facec90818a9d6dd8b65439d25ff445745d4ccb92ba1378f4a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "45360081-911c-4a5e-80ae-7108a00cddd7",
        "line": "1387",
        "column": "59",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"empty($apiKeys['access_token']) ? null : $apiKeys['access_token'],\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "3b5e58cbb4ef8046985057d0746640e92f8b03b088c16bc5a806aef5762756f4",
        "deprecatedHashes": [
          "aeeea8c54828037e0cdef9c3a0f3130138a33091b82b7f035cf99131011706ac",
          "b58e5c7c18eb15facec90818a9d6dd8b65439d25ff445745d4ccb92ba1378f4a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "cc3a3bfd-f85e-402f-aaf8-26c59005f273",
        "line": "1418",
        "column": "24",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"empty($apiKeys['refresh_token']) ? null : $apiKeys['refresh_token'],\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "117bd74aaa283642867fba006bf970f6ae7741ab71f406f54a8361e0f7e41be3",
        "deprecatedHashes": [
          "8456cac0c3cc029665b030705898c5634253464347ab8811df24aedaf5fca9bf",
          "88bac232b81733fa3ea16f7fd673ec11f7808847d39ff73c9c722d7ed00e7293"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8c8170d9-7b92-486f-9547-3adaae389ce9",
        "line": "1418",
        "column": "60",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"empty($apiKeys['refresh_token']) ? null : $apiKeys['refresh_token'],\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "117bd74aaa283642867fba006bf970f6ae7741ab71f406f54a8361e0f7e41be3",
        "deprecatedHashes": [
          "8456cac0c3cc029665b030705898c5634253464347ab8811df24aedaf5fca9bf",
          "88bac232b81733fa3ea16f7fd673ec11f7808847d39ff73c9c722d7ed00e7293"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "de98840c-ae9e-4be0-976f-df5c7d958b7b",
        "line": "1449",
        "column": "24",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"empty($apiKeys['refresh_token']) ? null : $apiKeys['refresh_token'],\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "bd59e7b7ee62c15eee27bd6e34db4701a5e437d7861ca56c512992ddcbb3295d",
        "deprecatedHashes": [
          "ced9639f3d8d30c547fc296d552dc980eb36af7397b25c628849a475838311b2",
          "b156d8ff9b439443db8a3bedc6145ee56ad02e67710ae56708cc36d489baaf8e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fb6f0ddf-155c-496c-b79f-7eb3ab66fd6f",
        "line": "1449",
        "column": "60",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"empty($apiKeys['refresh_token']) ? null : $apiKeys['refresh_token'],\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "bd59e7b7ee62c15eee27bd6e34db4701a5e437d7861ca56c512992ddcbb3295d",
        "deprecatedHashes": [
          "ced9639f3d8d30c547fc296d552dc980eb36af7397b25c628849a475838311b2",
          "b156d8ff9b439443db8a3bedc6145ee56ad02e67710ae56708cc36d489baaf8e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7111da8c-4654-43a4-ae74-6d15f0831082",
        "line": "1480",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$apiKeys['expires_at'] ? $apiKeys['expires_at'] - time() : -1\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "5bbf6ce954dd80fb49d1c24d7edbeb4c03961080ad34a11bd17cf4663bdfacb4",
        "deprecatedHashes": [
          "c0aa3a88ef45b9aa6932b668681b311c13e4431f60305547cb1ccb0f8baf7932",
          "f0f28f2086a613bd7a21e691abbb89c33f57209301287bee15a38a49c27af58b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4d5a78df-fb17-42b2-be96-451237b08db5",
        "line": "1480",
        "column": "43",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$apiKeys['expires_at'] ? $apiKeys['expires_at'] - time() : -1\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "5bbf6ce954dd80fb49d1c24d7edbeb4c03961080ad34a11bd17cf4663bdfacb4",
        "deprecatedHashes": [
          "c0aa3a88ef45b9aa6932b668681b311c13e4431f60305547cb1ccb0f8baf7932",
          "f0f28f2086a613bd7a21e691abbb89c33f57209301287bee15a38a49c27af58b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d0d85926-f629-4870-8f80-0e2fa9f4b8d2",
        "line": "1511",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$apiKeys['expires_at'] ? $apiKeys['expires_at'] - time() : -1\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "20b9d23ed9ef93947c1adaf911dc9376408d6e0f7054724b7a5bcef05125420a",
        "deprecatedHashes": [
          "bb84aab35c542be756cb729c9ecd4e77de5b50eba5f10269e2173d48643a5e37",
          "5393d4a737695f454c307ea41af2027710d2d05c4c1e0ff2b52819d591b0e11e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "36c7fd2e-d326-41e5-8768-c24fbeddbe00",
        "line": "1511",
        "column": "43",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$apiKeys['expires_at'] ? $apiKeys['expires_at'] - time() : -1\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "20b9d23ed9ef93947c1adaf911dc9376408d6e0f7054724b7a5bcef05125420a",
        "deprecatedHashes": [
          "bb84aab35c542be756cb729c9ecd4e77de5b50eba5f10269e2173d48643a5e37",
          "5393d4a737695f454c307ea41af2027710d2d05c4c1e0ff2b52819d591b0e11e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "87e18253-8e84-487b-9184-3fd464802326",
        "line": "1542",
        "column": "24",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"unset($apiKeys['access_token']);\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "78ee539f063eabf3b55be2702001aa8117fc133eba17f5fb46fc38a3fd8e414c",
        "deprecatedHashes": [
          "81a67b4fbdc8a561f41b5f972b1d9330702ea6b70f88fdda6d1ebd9d14254163",
          "cfae85c0349e400df82793751c567d63b315d17a23ba14343545c72dc27075f6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "54ed8e43-4004-487e-97c1-cbd1725d6d2b",
        "line": "1573",
        "column": "69",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"return !empty($this-\\u003egetIntegration()-\\u003egetApiKeys()['access_token']);\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "a9422e54b9e49c444cd1cb415b74d0a9533d524d7d0fd8b978ad08959331abdb",
        "deprecatedHashes": [
          "e4f32303cad92ac6bb501d5dacfb99aeac2f8c6c276b6852a7991dfa6039f415",
          "46c6b3359b4ee875c4cd7eac743f7f7a5e8a85e354a67d4cf21c8f74579057f8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8fd83a68-58cc-4eff-ba90-a26691feb459",
        "line": "1604",
        "column": "38",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"'access_token'], $newApiKeys['refresh_token'], $newApiKeys['expires_at'], $extraData);\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "8d13732ea12290765eada4c75e0acde306a724019c4abd1fd17c8c3f9064389f",
        "deprecatedHashes": [
          "cd41ea90b6703e56c02be7868015368aa5386683e1f5534f064443c598b7262a",
          "da2d42cd3358ef0c336d22c550bc0e4f9a70af5be767d02e66ddc67ea7cf5b2d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d7d9ebd2-2e82-4b25-858c-177375309bdd",
        "line": "1604",
        "column": "68",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"'access_token'], $newApiKeys['refresh_token'], $newApiKeys['expires_at'], $extraData);\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "8d13732ea12290765eada4c75e0acde306a724019c4abd1fd17c8c3f9064389f",
        "deprecatedHashes": [
          "cd41ea90b6703e56c02be7868015368aa5386683e1f5534f064443c598b7262a",
          "da2d42cd3358ef0c336d22c550bc0e4f9a70af5be767d02e66ddc67ea7cf5b2d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5b3e4c3a-6a1a-44ce-b29b-c4d8a9be0bd6",
        "line": "1635",
        "column": "39",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"'refresh_token'], $newApiKeys['expires_at'], $extraData);\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "d3112663339101fd2d2deabf54c3d8738e832f0e6ca0a7995bed27fff0f044e0",
        "deprecatedHashes": [
          "cad757964d531039d617d4d91fd81e30318c1076f4011dec88a1172df1d33536",
          "0239a712daf4e04170db08d1788f3f08abc11c19abf88139c0192591acf2c760"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "962c9d6f-e4d3-4ffd-99f6-b525fe52f9f0",
        "line": "1697",
        "column": "60",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": " ['access_token' =\\u003e $accessToken]);\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "8d6eb9e17e86de142dac43535afb3bc2bb9f400803e88b581c98e4705681c0c7",
        "deprecatedHashes": [
          "86325c6e0f3e97f07de0570c4f068e411e064f45be8718c2fcaaa64236b62b3a",
          "f30afee99e75a359b60c535fd740f97ecec197b3f68c92ad7ebf638cf1ae8561"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1ddc1055-13b2-428f-aaaf-2ffb0a2bee7e",
        "line": "1821",
        "column": "34",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$mailer-\\u003esetApiKey($settings['api_key']);\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "99a39a16c0deb74ca8f7015c77f93e29552e7f0c469165d42da772b1e7529233",
        "deprecatedHashes": [
          "7057f9dd36214bfa4f2b7e0a7bea665f4381b111a2c792d027671257103b7592",
          "a7efa4b5a92df87b0e1cd3c14745164a2ce6f319b41fa12dd050ddd2a1e7d938"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "948430db-5680-4f87-9490-4d1924455c46",
        "line": "2317",
        "column": "45",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$builder-\\u003ecreateField('apiKeys', 'array')\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "0ea1cc208af2c3bf8195f0466dd1e66faa80650c7fa3493d167eaf02183ebba9",
        "deprecatedHashes": [
          "9b4edede5b6e79b03bb7c9f38c129dc9ce17225224f34584a53fd5960a29a338",
          "5c1835d8d7754452bc199ae6b3b412d74b5346694e224b1fe5e60fbcb6f07dcc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "13b4b220-c19f-41aa-bcec-264f34425618",
        "line": "2503",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"'dbname'   =\\u003e getenv('DB_NAME') ?: '%mautic.db_name%',\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "8bb27297b248a103b559c6652f68cc870f9c011413eebf57a083472fa43b7ef3",
        "deprecatedHashes": [
          "c1dddc1f4b8696e5b681158fa34facc646cdfec0b46b7801dbe3a9aa00dd3c29",
          "4c4f81aef6553b201310be0e1174779a569b23d1dbb4abe31646b48b14660904"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "cae994ba-7a58-436f-931e-430251546a2a",
        "line": "2534",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"secret_key', '68c7e75470c02cba06dd543431411e0de94e04fdf2b3a2eac05957060edb66d0');\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "ec8a7258eaf01be45ec8bc0498dcda8d22b2e610bd5dc89f5b8b95bcf44e02d3",
        "deprecatedHashes": [
          "051f20aed8c724d534ec252e356379d12aafbb18ff062bd8fe13d776572da771",
          "3084d451f511e4d58b26c4203bdd9c52b1b63d4589510464587e39b6b788a52c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1ff25a4d-9ee8-4c61-b907-954eef03fc23",
        "line": "2565",
        "column": "28",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$dbParams['dbname'] = $dbParams['name'];\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "60f62889357d200b279f15e10482f733785912a6b33de9799c643dd746b1b1c3",
        "deprecatedHashes": [
          "b19c7f628f07dbf1d522d7af17ef4c0d5fb33f130ecd7caf7ab1c61920f40995",
          "f6419bbc67e419357306077cb61fa7af7bcfd7ee9ce6e3b40b47261aadbbc36e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6b8cbac2-06d3-4482-b5b2-5433748f365d",
        "line": "2968",
        "column": "33",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$key         = $secretKey ? $secretKey : 'mautic';\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "761f88394b1f2443ccd211ebc610385a5d35b8eb6775004c0ca95aca76442027",
        "deprecatedHashes": [
          "6261c2ea134ae15c148a295e0ae53aa40de4a62b23679cd0217e7f50d40eeace",
          "4c9589d5fc529791da4aa3a487c591f011edf47a8d1996a67bbc87a634caf9b1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "dd5b97c9-7db1-488a-8a15-258ef3e0ff5c",
        "line": "3030",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$dbName    = 'dbName';\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "af57e784c92924e459d3f71bc167e24bb7c066342ad1a106fa393bd42825e6d0",
        "deprecatedHashes": [
          "ca1c81b97b8e591652f40ab0b41b016a8a84d2540394964a50a0385b6e547335",
          "ae06ae168ef5d8a901228e8c0383a7253ac3f0356502200e34a41edf35d9acb8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d07457ef-b36b-45bb-bdab-68769cf8557f",
        "line": "3061",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$dbName    = 'dbName';\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "d26fab2798b55add82727d3b47b5f396f237bf08abf237f203d89b0d1c230a40",
        "deprecatedHashes": [
          "4b8ca2525bf5155726db73026b1e3bd7c61200cffa6c7c66b595275077c1eff6",
          "e58e7b64d6927445edb6cb7992fc180d3eb2e504be8295f20bc78804a93898ff"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5d8b58cc-c943-414d-ae4d-0bcaf370b54d",
        "line": "3433",
        "column": "47",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$resolver-\\u003esetDefaults(['secret_keys' =\\u003e [], 'is_published' =\\u003e true]);\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "f50abfe5bdf98dbcf0bafc24db27f9299a765f7487ca8131fc0b06ca9b7a62a7",
        "deprecatedHashes": [
          "8a1927ee27284c6269f7d185c890ddd76d8503cfab092c3d29fe66700fce60fe",
          "8229955d2ef1e6808363ced2661bce28cb1d50c57e5b244bef2ff2fac6d2ee0a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6262e672-020f-431b-9dd7-4bb5e414d2bc",
        "line": "3557",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$apiKeys['access_token'] ?? null,\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "d0383b4b41399fa96fbf5ea0b53352c6230cffb0006e89caf5fe749d78e67260",
        "deprecatedHashes": [
          "33f845336e099b620e0c9775a43a3b328d7860fba831696f7f0da5f0a0c31b70",
          "77862c397f6ae95e4975c2036bf1aa65c668999c29ba876676dfd99b4d1e6841"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2eed5f4c-1e34-4785-8f48-e8b166003d5f",
        "line": "3588",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$apiKeys['refresh_token'] ?? null,\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "4f240a035e17b354b519d4632ac89a013673d0243ca1ccd64e783878e922814c",
        "deprecatedHashes": [
          "67b509863a9a7807f17933f1b2b52eb9565a1548e40b871cc0d94e23977735e9",
          "e0775c64adaaa9166e3d4548252f525987011e146f6fe172d48fa5446e44d75e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0d35effe-363c-4f97-ac90-bcddd7887a43",
        "line": "3619",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$apiKeys['expires_at'] ?? null\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "49e66364deddd6cc9e0a6af490f22578e1456f82428720f20d3c6759e606f346",
        "deprecatedHashes": [
          "2c6a070a6c9b8b33fadace5e367cfbcaa3524d8c01c5776585a8b239e53ad692",
          "cb6fb1127c907207ea4a5aae255c6c4088f9346d58d90e8f1bcbb8b9030a7635"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fe1ebff3-dfb8-4f60-85f7-e6ef4491eaab",
        "line": "4177",
        "column": "93",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "required', [], 'validators'));\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "5da268d651a56231644a1f4a02273f5d3eadb4a9df2140cb78d65798d113294f",
        "deprecatedHashes": [
          "209d4e2336688acb8b214bb2f764fe34e7b3cf2464eaf424b9fe687e5667fb43",
          "2e136b1927fb190859628d364f2a93cbc45d6c36be9c7983551c689c04e486ea"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d8aa142a-ab20-4682-9e77-7da1416d1d1f",
        "line": "4363",
        "column": "93",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "required', [], 'validators'));\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "06546c4ed1dd7d760bae90c4a5ad117ab305a21677601f2e02739acab323fa56",
        "deprecatedHashes": [
          "bd6530ce176a0f761577d7b9271a9dd6d7531e54c3f6927f2d3168bd173c9692",
          "79467b22b3e2bc6126364b4cf09eb5f3a4860302e257c868d3268f2a2aae2d3e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9dbc9af6-59e8-4c7c-9864-95ab69bd8db6",
        "line": "4425",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "y','action','align','allowfullscreen','alt','async','autocomplete','autofocus','autoplay','a\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "caf04c6db527b3ff18c715f1873421330a0653371b08602e384ea4a09d55f457",
        "deprecatedHashes": [
          "2f945c1de07d9c39c6eea03be0ad8ac92319b59748303a8cb25fe6d13729a280",
          "0a9a4f04969cb3ea056c9f7f924d8964687b0e32c034ffdc18cf868c30424bc7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d9925f7a-504e-4940-bcd5-ec943d19c9a6",
        "line": "4456",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "mQuery('#config_emailconfig_mailer_api_key').val(),authMode:mQuery('#config_emailconfig_mail\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "68173dc8530484615965443838d5a7981bfe83f3ca4bffd2ba05820cd0243bcc",
        "deprecatedHashes": [
          "bb9442fb9be13cfcf093f668b17d287584f0974a0882b07366c8a90a234dc7fd",
          "0fc5fbf28b16620ee074729450bc32b2ff23519b6e8d153499f1111c4db78018"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "05946967-1a6a-4f63-8041-9b474839c0fe",
        "line": "4487",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "Query('#integration_details_apiKeys_apikey').val();var d=new Date();var month=d.getMonth()+1\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "d31670948788e611deac0df6ec61f623a77a57ec6663c591b2f90c7d4be98682",
        "deprecatedHashes": [
          "cd634436bd1ae5c995a5c7a4133f5e1a194dd41da2bff31e3f061ede5ab50ba1",
          "1f7424b0c3edbf8cd42809979c183690d51bf54b232197b5849c95b4e55c9e29"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "53737b9a-6dd5-4a46-bc52-be6a5e53449d",
        "line": "4518",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "+apikey+'\\u0026period='+period,function(stats){var person=null;var company=null;var free=null;mQu\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "5e62df8a08ea5ce971658aedf7d9ada197e0a920298c7ff8640451cacc8010fb",
        "deprecatedHashes": [
          "5941b94311970eb86fc070563dbb253575503b4f4676126ccba9c647af56c9e8",
          "7472320bb6dea891f9343cb6f465403eb13d3401fa44c9e3e2af3235311c6649"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5946c991-a2db-4118-84c4-2019e8e2b31e",
        "line": "5324",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['access_token'] ?? null,\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "a1a6d1ab981221d25acaf21e70fdce95ed0fc94c9c0aae51f26477696e67b6f4",
        "deprecatedHashes": [
          "a57b1b30f8af7e96ee8d04c182cb3c2cc8827c7e967231f3e73bdfbb80f1cb8d",
          "a10c02dc89cfaadc7a0d85bc9e2e8705f39137290e9446ba40da254974813356"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "663c0a90-7706-4ad7-b857-1892254e7dd8",
        "line": "5355",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['refresh_token'] ?? null,\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "7e0cb75140b690eb5cf50701c9d899524f53984ce209675995663472dc8e1e8b",
        "deprecatedHashes": [
          "9682e5235388ebf64102e7e3f342d7f2325017e2c825a03e6ffdb89ec77fb913",
          "954d69190e167f281b666335b7cc9848f43290502371f4a8c0c77c6a050ba7a2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9028d79f-c6b0-4489-863a-fae637871baf",
        "line": "5386",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['expires_at'] ?? null\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "6941b1134240db12582ef2d85b1b228d848d069280e4a174993b06b13dfaeb43",
        "deprecatedHashes": [
          "e106416f9fa403332b11e5f30bcc04f4d61df85fbad5e90bbcbac9a581535e17",
          "d8059e954ef6c69df42f167c78cff590d25ca1c525484a73e4e52466a9e4c0fc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "55c197eb-1bba-4d1a-b444-f87758ba9685",
        "line": "5417",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['expires_at'] = $apiKeys['expires_at'] ?? null;\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "8946627cbdaac222d3565e1b24bd5edb9a79169374512e5c8b9ca99add4b4f14",
        "deprecatedHashes": [
          "cd98834c13c68c2d43926b32a3e533a2687fd5a639da66da0d9e18c962a6e623",
          "1cb938be579e5b7e995fae950d86462c230f227bc13beb8a13c6eca4629424f6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f5fcc49b-9d07-4b98-bb17-f24e9914abbb",
        "line": "5417",
        "column": "55",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['expires_at'] = $apiKeys['expires_at'] ?? null;\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "8946627cbdaac222d3565e1b24bd5edb9a79169374512e5c8b9ca99add4b4f14",
        "deprecatedHashes": [
          "cd98834c13c68c2d43926b32a3e533a2687fd5a639da66da0d9e18c962a6e623",
          "1cb938be579e5b7e995fae950d86462c230f227bc13beb8a13c6eca4629424f6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2e5796cd-ccb3-4a4c-9ea7-6d151bfe8516",
        "line": "5448",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['expires_at'] = $apiKeys['expires_at'] ?? null;\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "90f1e8c53987f99501e433d2ae5cdfb86ca4ae072ca0bf5dc4f391b79b7c7f0c",
        "deprecatedHashes": [
          "b3f68c79179b03730889e25a9f0befbdc1d6467cb4bbad390f28f477fe63c74d",
          "60b40651f220be8be7ab630c073a28f57f86743b8a9c75af2705ef3b0b870901"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f71a87c3-c421-413d-b700-a6c5329a3259",
        "line": "5448",
        "column": "55",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['expires_at'] = $apiKeys['expires_at'] ?? null;\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "90f1e8c53987f99501e433d2ae5cdfb86ca4ae072ca0bf5dc4f391b79b7c7f0c",
        "deprecatedHashes": [
          "b3f68c79179b03730889e25a9f0befbdc1d6467cb4bbad390f28f477fe63c74d",
          "60b40651f220be8be7ab630c073a28f57f86743b8a9c75af2705ef3b0b870901"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ed1f4465-38a3-4d1d-b8a6-fc750ec443b4",
        "line": "5479",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['expires_at'] = $apiKeys['expires_at'] ?? null;\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "52afaadb75dcfe110efafb9704a2f99083f38cdabdef2bdf340dc360b833f313",
        "deprecatedHashes": [
          "de42d25e9a5414fed5eeee388b3309afc37cf51659764f7dd7025fc7d7613e35",
          "f3bce9f6ad52b8850eb8c300f8c15ba5d13bafed67b7a2d55a115079f1a796fc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "80c27453-7a5c-4e45-9136-43633f5ab799",
        "line": "5479",
        "column": "55",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['expires_at'] = $apiKeys['expires_at'] ?? null;\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "52afaadb75dcfe110efafb9704a2f99083f38cdabdef2bdf340dc360b833f313",
        "deprecatedHashes": [
          "de42d25e9a5414fed5eeee388b3309afc37cf51659764f7dd7025fc7d7613e35",
          "f3bce9f6ad52b8850eb8c300f8c15ba5d13bafed67b7a2d55a115079f1a796fc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "90324fcd-7332-47ac-9023-7514f92845c8",
        "line": "5510",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['expires_at'] = $apiKeys['expires_at'] ?? null;\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "04ab1d5863b3977d1b96fade4fde9e9575f8775071dcb89c6da9dd692d6d6335",
        "deprecatedHashes": [
          "e399b842b6beb0693c278d280303c47c95b1403fe52b4c105382b81b013fc03c",
          "a2b6b14ad942e50f7ba6fd1315f77a3d8ff295860e2f6153cea12981c6e051d8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "21ece6a2-a6bb-41bd-ba33-8ac3f6aed630",
        "line": "5510",
        "column": "55",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['expires_at'] = $apiKeys['expires_at'] ?? null;\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "04ab1d5863b3977d1b96fade4fde9e9575f8775071dcb89c6da9dd692d6d6335",
        "deprecatedHashes": [
          "e399b842b6beb0693c278d280303c47c95b1403fe52b4c105382b81b013fc03c",
          "a2b6b14ad942e50f7ba6fd1315f77a3d8ff295860e2f6153cea12981c6e051d8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "edec5838-303b-4997-a36c-c7f57aab7db3",
        "line": "5541",
        "column": "36",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"empty($apiKeys['access_token']) ? null : $apiKeys['access_token'],\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "a53cce4aadfa34411f740219277219867d463acd1da1c618ef0045197b81b0d5",
        "deprecatedHashes": [
          "59d9bfadf9d5f0f35ce724bd95326d98177b5ba70818ee1dc08185ebaf05d20e",
          "79e476dd0c4b80b723facd8037ff5483f4e6002545ff0817ff7b04242c42db0e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5543b9c3-f4ac-41ba-992f-ce139d48e4be",
        "line": "5541",
        "column": "71",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"empty($apiKeys['access_token']) ? null : $apiKeys['access_token'],\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "a53cce4aadfa34411f740219277219867d463acd1da1c618ef0045197b81b0d5",
        "deprecatedHashes": [
          "59d9bfadf9d5f0f35ce724bd95326d98177b5ba70818ee1dc08185ebaf05d20e",
          "79e476dd0c4b80b723facd8037ff5483f4e6002545ff0817ff7b04242c42db0e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "86762b7e-a351-446e-bbf6-8adfc6424420",
        "line": "5572",
        "column": "36",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"empty($apiKeys['access_token']) ? null : $apiKeys['access_token'],\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "5699a2172498793dbc6efac303c17674ac2dce88fb2c4ca959581fb298cc76e0",
        "deprecatedHashes": [
          "e406aa0e93b7a0ef96ad975def16a261856204fffaf9f5725a9af5bb9364b448",
          "7db2ca37affa25cc7e5a95503a4b73587b7db2adf91fb33c798e16666d12768b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9dfc1754-9230-4bed-848f-ee4feeeb8df8",
        "line": "5572",
        "column": "71",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"empty($apiKeys['access_token']) ? null : $apiKeys['access_token'],\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "5699a2172498793dbc6efac303c17674ac2dce88fb2c4ca959581fb298cc76e0",
        "deprecatedHashes": [
          "e406aa0e93b7a0ef96ad975def16a261856204fffaf9f5725a9af5bb9364b448",
          "7db2ca37affa25cc7e5a95503a4b73587b7db2adf91fb33c798e16666d12768b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "75709500-ccde-4ff5-8c14-dafba1f64c17",
        "line": "5603",
        "column": "36",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"empty($apiKeys['access_token']) ? null : $apiKeys['access_token'],\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "4a3476efb8fa1dbfcedea7d088ea0f212141abf8854832c4983154ce11052847",
        "deprecatedHashes": [
          "3994baa4c5971387767258567f02a72275246fd30eabab4c0fb7367a33efc33d",
          "ccba532fb0e50a26b1ce33b0841997047d72b4c0ce8557295af520508231f949"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ef3db6c2-585a-4d57-ad89-8fa7d78d7e31",
        "line": "5603",
        "column": "71",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"empty($apiKeys['access_token']) ? null : $apiKeys['access_token'],\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "4a3476efb8fa1dbfcedea7d088ea0f212141abf8854832c4983154ce11052847",
        "deprecatedHashes": [
          "3994baa4c5971387767258567f02a72275246fd30eabab4c0fb7367a33efc33d",
          "ccba532fb0e50a26b1ce33b0841997047d72b4c0ce8557295af520508231f949"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a1401d0a-2a12-4b77-950d-a8225060daa8",
        "line": "5634",
        "column": "36",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"empty($apiKeys['access_token']) ? null : $apiKeys['access_token'],\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "095e078bd80be3435cedec50e16bb92039646daf1d35b038423d15ffff7c742f",
        "deprecatedHashes": [
          "8e873d9f86d68d0dc1f46c23723850686072603483fa47bf7a5e31f24906d8ba",
          "c219a43104114933e642923033f18d02abe5037fa2f9ee5d4cc6f180f339a919"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "52315c0f-cc74-4071-9691-a562bf4645e8",
        "line": "5634",
        "column": "71",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"empty($apiKeys['access_token']) ? null : $apiKeys['access_token'],\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "095e078bd80be3435cedec50e16bb92039646daf1d35b038423d15ffff7c742f",
        "deprecatedHashes": [
          "8e873d9f86d68d0dc1f46c23723850686072603483fa47bf7a5e31f24906d8ba",
          "c219a43104114933e642923033f18d02abe5037fa2f9ee5d4cc6f180f339a919"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "eca69dac-0336-41fc-ab18-e6d55e74c963",
        "line": "5665",
        "column": "36",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"empty($apiKeys['refresh_token']) ? null : $apiKeys['refresh_token'],\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "ff99ef6d76fa8f2eb3bd4bff99de8219777cf17a04a060debfeca96404150531",
        "deprecatedHashes": [
          "978997347d3b06664d6d96619b5e806f544ffd64c6f59e00d2e77078d29148a8",
          "ad3989a8db2ab9946b87358ff201670faac166e6aadca1cd2fa9741bbcfd2746"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f5ad5fd6-434a-4c32-a11d-627fbe99bf76",
        "line": "5665",
        "column": "72",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"empty($apiKeys['refresh_token']) ? null : $apiKeys['refresh_token'],\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "ff99ef6d76fa8f2eb3bd4bff99de8219777cf17a04a060debfeca96404150531",
        "deprecatedHashes": [
          "978997347d3b06664d6d96619b5e806f544ffd64c6f59e00d2e77078d29148a8",
          "ad3989a8db2ab9946b87358ff201670faac166e6aadca1cd2fa9741bbcfd2746"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1bc33b39-c91c-4f1c-83bf-b0aae63823ac",
        "line": "5696",
        "column": "36",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"empty($apiKeys['refresh_token']) ? null : $apiKeys['refresh_token'],\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "7cde69b83756d5fa0e7404c66ca2b22911d12bdbb2a5c4580cb8d6c5abf34db7",
        "deprecatedHashes": [
          "2677fc3270f9a88ef8c5ca4427da45ac6c13bbfee8f9b6c5eee40bce4abace18",
          "db1066d06d9960a414eb9892089bf42b268fa3270e4788bac297a8823e4eb592"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "225a1cae-e925-45fe-bec2-d6a6da44851f",
        "line": "5696",
        "column": "72",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"empty($apiKeys['refresh_token']) ? null : $apiKeys['refresh_token'],\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "7cde69b83756d5fa0e7404c66ca2b22911d12bdbb2a5c4580cb8d6c5abf34db7",
        "deprecatedHashes": [
          "2677fc3270f9a88ef8c5ca4427da45ac6c13bbfee8f9b6c5eee40bce4abace18",
          "db1066d06d9960a414eb9892089bf42b268fa3270e4788bac297a8823e4eb592"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "dabe3d80-63fb-4323-8d0a-28bdaa11ef15",
        "line": "5727",
        "column": "36",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"empty($apiKeys['refresh_token']) ? null : $apiKeys['refresh_token'],\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "858cacf4bbdea417c46de15ee4e0576d82113b6be3173527f1d043d312e4aef7",
        "deprecatedHashes": [
          "d127be71c65fbcc2f5a0e65974a86aa7484b90a4cf0dcef9816491880edda46c",
          "fb207aba958b0886d57c0e0755c806ce66562054518bac023971e467891cf006"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "284cae02-8828-4566-8e8d-0ac513aae620",
        "line": "5727",
        "column": "72",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"empty($apiKeys['refresh_token']) ? null : $apiKeys['refresh_token'],\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "858cacf4bbdea417c46de15ee4e0576d82113b6be3173527f1d043d312e4aef7",
        "deprecatedHashes": [
          "d127be71c65fbcc2f5a0e65974a86aa7484b90a4cf0dcef9816491880edda46c",
          "fb207aba958b0886d57c0e0755c806ce66562054518bac023971e467891cf006"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5f851fd5-95a7-4174-b8e1-62b722cee514",
        "line": "5758",
        "column": "36",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"empty($apiKeys['refresh_token']) ? null : $apiKeys['refresh_token'],\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "6ac35b69e2e752c6d17e9f2c8fc00e67e04a9079efbda3c6eb81061abb5e6ca7",
        "deprecatedHashes": [
          "f726f43e4efc861c3571037f0fdf497e8b355603d645bc8811b0213c53fcd7ee",
          "1ad6f4b6335776243fc95d910125896da42163420c82308f56e770731e5128c9"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "837a251c-1d8d-4d59-8e7a-d185b59ca1b4",
        "line": "5758",
        "column": "72",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"empty($apiKeys['refresh_token']) ? null : $apiKeys['refresh_token'],\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "6ac35b69e2e752c6d17e9f2c8fc00e67e04a9079efbda3c6eb81061abb5e6ca7",
        "deprecatedHashes": [
          "f726f43e4efc861c3571037f0fdf497e8b355603d645bc8811b0213c53fcd7ee",
          "1ad6f4b6335776243fc95d910125896da42163420c82308f56e770731e5128c9"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "84b6ebaa-1b0a-442d-8a2f-c731a543aa29",
        "line": "5789",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['expires_at'] ? $apiKeys['expires_at'] - time() : -1\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "fa4ee30a1f571c51bde1b97fff193ac974cd3d850960fad48b63b23c8ec3c036",
        "deprecatedHashes": [
          "e55ea632e8ebc39b28f01fd7c15126c9981908b0dba5b827c8954278b9d643ff",
          "befafbb584490a8d390ee1f0393927e4ebd56ce4ef563ea42e079e49eb9bb6de"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9ae8a2dc-bb7f-4c73-887a-0d25746f0bd8",
        "line": "5789",
        "column": "55",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['expires_at'] ? $apiKeys['expires_at'] - time() : -1\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "fa4ee30a1f571c51bde1b97fff193ac974cd3d850960fad48b63b23c8ec3c036",
        "deprecatedHashes": [
          "e55ea632e8ebc39b28f01fd7c15126c9981908b0dba5b827c8954278b9d643ff",
          "befafbb584490a8d390ee1f0393927e4ebd56ce4ef563ea42e079e49eb9bb6de"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c06a4c5b-a309-4d9b-8c89-b9479a82c52c",
        "line": "5820",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['expires_at'] ? $apiKeys['expires_at'] - time() : -1\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "56afd419e501879683aee4415415772c902e3f24df0f77754917a707fabf889e",
        "deprecatedHashes": [
          "8948fa788e318b04f6b8050a3e86efab9b0020ff698c2643345bb9bfaf2c2ee7",
          "98be009a50e25b8d89c921d9077383c16783a3f2082b5b1f131981d09a3c28fa"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c8e80c37-2813-48bb-bb20-7c880b3f346a",
        "line": "5820",
        "column": "55",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['expires_at'] ? $apiKeys['expires_at'] - time() : -1\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "56afd419e501879683aee4415415772c902e3f24df0f77754917a707fabf889e",
        "deprecatedHashes": [
          "8948fa788e318b04f6b8050a3e86efab9b0020ff698c2643345bb9bfaf2c2ee7",
          "98be009a50e25b8d89c921d9077383c16783a3f2082b5b1f131981d09a3c28fa"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1b2cbe00-1ab9-4c77-963c-c9db7ce0edbe",
        "line": "5851",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['expires_at'] ? $apiKeys['expires_at'] - time() : -1\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "416998c1a85c9f7f812244e8b04d0ef82b357ea9d2fcffc2d5ff0d5cec0dfb26",
        "deprecatedHashes": [
          "53b278828f91368675421422ea577b39174f1c59952f723fcb2c8b7ec8a5aa38",
          "e01105bbeb958bd1a43caa2677b777e77f6b9ab66c30820fef3e56e91f1d1435"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9d3e54c1-1d50-4300-a011-a44cfd31afed",
        "line": "5851",
        "column": "55",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['expires_at'] ? $apiKeys['expires_at'] - time() : -1\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "416998c1a85c9f7f812244e8b04d0ef82b357ea9d2fcffc2d5ff0d5cec0dfb26",
        "deprecatedHashes": [
          "53b278828f91368675421422ea577b39174f1c59952f723fcb2c8b7ec8a5aa38",
          "e01105bbeb958bd1a43caa2677b777e77f6b9ab66c30820fef3e56e91f1d1435"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b253e0b0-9cf1-4cc8-8047-88b7410ba686",
        "line": "5882",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['expires_at'] ? $apiKeys['expires_at'] - time() : -1\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "752e20384577fb79fc9c643b1de779e5c9c97228d6a9e84fe1521fa51f31053c",
        "deprecatedHashes": [
          "c50dc9ed04589b1fb106a6f4857e881f709d981c3336651673041815f5b5dac8",
          "5d04e267356da22b54fdbd8cec45558fed76ff08685e9ffac589b23e69ec41b6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2e00ed1c-0dc3-4940-a968-27d42b44559f",
        "line": "5882",
        "column": "55",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$apiKeys['expires_at'] ? $apiKeys['expires_at'] - time() : -1\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "752e20384577fb79fc9c643b1de779e5c9c97228d6a9e84fe1521fa51f31053c",
        "deprecatedHashes": [
          "c50dc9ed04589b1fb106a6f4857e881f709d981c3336651673041815f5b5dac8",
          "5d04e267356da22b54fdbd8cec45558fed76ff08685e9ffac589b23e69ec41b6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c4f97945-c9f2-4c1a-b1ef-aae98f732a8b",
        "line": "5913",
        "column": "36",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"unset($apiKeys['access_token']);\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "d6da8ee2cbafd3ad32bd487e4bbf56adc14bf170dff156c393d5e769babaf7af",
        "deprecatedHashes": [
          "6babb6e49dbd2a277e0ef38bd997a38dc05d78b5d487caa72249fd0073c88c6e",
          "91feb90c3ac287e33c3530cf49fb5beadaddc6394f5c879a9ed8d7fb2037be0d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1ea7c826-6360-486c-b0e9-be930b5f215f",
        "line": "5944",
        "column": "83",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": ")['access_token']);\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "2aa31c012638055d026d5a8a5a8af7e831d472639c6bb43fe91f57181bce2b42",
        "deprecatedHashes": [
          "33628f97e129d07be5aba487b5ce9418f2d223bd1dbd18b138972407a0b3be3b",
          "81326f5f8e47537fb5364b3c8236b1a5f6e43e385518c4de50c624f8af7b016b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a72d1c79-c84f-4def-9bf1-120f2cea9a40",
        "line": "5975",
        "column": "45",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$key         = $secretKey ? $secretKey : 'mautic';\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "a59af3d1d95bf528e36a7acdfb078c95294062eca44893b16984f133e345cdc2",
        "deprecatedHashes": [
          "9007f8e552bef960a30e64b6b250e97fa3c07ff4d2f5baa9d30152f9d82d328c",
          "d5a74a20aee7118b2bc30796856c118702536c8e6a1a889bafe1cc4f5abbfe98"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "535fa706-1a91-43d0-af2c-ac8573c068b7",
        "line": "6006",
        "column": "40",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$dbParams['dbname'] = $dbParams['name'];\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "3ed22b01b61ba82d41601d7b3bbe8f1f5ffce97e6b5ff585c01f56a82ddd7e9b",
        "deprecatedHashes": [
          "1e3fc3d1fffdc7c61c91b3c6b18277491f9208c07ea479ca1e9e5904fccedc7c",
          "68e02d89d3f3371758715a184d886dfa72f56de3dedb92245e4d8c06b7537b5a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "87d21d70-2507-4300-8402-fa96b12a93ca",
        "line": "6037",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$secretKey   = 'mautic';\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "d456a478d879d262ded22a741a72ae466ae69dfeacf16e3dc1b951806c949ba8",
        "deprecatedHashes": [
          "61d2001a95211c89d1f6980410b884b872da6e7fb27ca34359db394332dd70c9",
          "abbdd4f1c3cb1d5f4ee026e97744bccd229dd3965c757876f788250a1ebefcbc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1246070f-0133-496c-bd2b-d5db86e16997",
        "line": "6068",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$secretKey = 'secret';\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "23ae4f21a2fa6f5cafb7775e6a750855b2e30a4eaf147ea8cbb96bca5587bdd5",
        "deprecatedHashes": [
          "f39a9e7864564dad88e0b6c230c4e7bf86036b9b7567fe286176207de99ddbe9",
          "41854e56f8a5da3bbd2ec6aab623df5c750c1d69eb4151a4f5fff786cafdf599"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a20e00e8-4b68-45a7-a58b-803befa9ae24",
        "line": "6130",
        "column": "38",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$params['dbname']   = $dbParams['name'];\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "ea35b0caf844e7b937fe9e5cee712709c69190af60f068222fbec3c84faec1dc",
        "deprecatedHashes": [
          "cde7058c269b99e70575d6bd0985e810e47ca3a1a1f8f0bcb8e9ab9dfe6a4056",
          "3933e3b9845d390e01f894b8dc9c019b0e1e68e8e397aecfa194756abf5804fd"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "350c49d9-6366-4c31-9bd9-1d3a2a2e303c",
        "line": "6161",
        "column": "41",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"const FIELD_API_KEY  = 'field_api_key';\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "a95efea235736de4f4227217caa200a69e6e394cb856ab86fc2c3bb08c8b64cf",
        "deprecatedHashes": [
          "4e9b6b7101870826995abdc5daf55b0ac86267940fdb5df675620239bb75ae64",
          "4ada92cbac2af24de1dbd56f3b43b5fd2f0c66485a94247b72735280113b6147"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "28de634e-0ca3-4bca-8c10-839644427983",
        "line": "6192",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$dbName    = 'dbName';\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "03a16228de7320124654fb0e25edf504b29130903d55d0ad68ac7634e31f5766",
        "deprecatedHashes": [
          "a2ca45c6139032c3d507c4eb312abcecbd1c2b732977a66519eec88cc01439ae",
          "0796da330064fd56e935d36cf30e52d4d1650bda10c6362e54d2de46d355c191"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7a172af9-a8a6-4f35-a6b0-cac4dec3ecc5",
        "line": "6223",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$dbName    = 'dbName';\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "d1b928a4edf9d4a0256dc88a54831749b8b693ed6861ac7851a58f9ce0a8a546",
        "deprecatedHashes": [
          "fc19b2c424abf6036a8ab41f301ec7ab934c8ab654d5ccb449bc1a46181cefa1",
          "a8f63698a79901c4a6b75b983856f865be3ddda414a3645219d2f26e723e7238"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "afef7832-0041-4f2f-b5eb-10c847843872",
        "line": "6254",
        "column": "44",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$appId      = $apiKeys['app_id'];\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "8db19fd19c81f1c1b88161719613e749ec8d3441afde9da88033e2eeb1ae9ad4",
        "deprecatedHashes": [
          "03cb5ca56ce98c88759d5d61295c9431b0931a0b789490bc6e438d856ce02749",
          "9006e38f2d0d4de212839332fd88d795a26594eecbf1ace86fcd8d684d50c5dd"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fb6a2f2e-de9a-4af1-95b1-3b80deddea77",
        "line": "6285",
        "column": "34",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$restApiKey = $apiKeys['rest_api_key'];\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "9d1622d8cf7462935b41d0c33f5a5caf91afe087cda591dd0ca4ba50b6838247",
        "deprecatedHashes": [
          "c44f81a8423c51959d740ee22214878e97b15205759a16b67f440888f5ed5e2b",
          "d5ed6dd18b74fdda88e8587f658555595623b524b8483a4291fddcd11aa78f5b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "37f1ba4c-69ad-41ed-9aa0-a443ac72385e",
        "line": "6316",
        "column": "58",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$builder-\\\\u003ecreateField('apiKeys', 'array')\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "c61af666dfd44b41f5d330fde7ff91054a0a789e6444a96d290028cfdff9586d",
        "deprecatedHashes": [
          "ea5f3fee33f168d35400717ec63d8180f4c1feff029670fbd9c4c438fb062fd2",
          "cb60cfe0583bd5f8b333df1bd01fdd44a3e94d5b0a5ac0c9cffb1fbaea3bcc47"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0fa43d90-2a35-4e9c-a946-eb45265fd086",
        "line": "6347",
        "column": "37",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"'mailer_api_key'     =\\\\u003e 'fsjkdah',\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "be06534aa1123c55c8ac5972e0c61eede03a4d4ca966fdd4f3cc2416601587ff",
        "deprecatedHashes": [
          "12e766373f49903e79b64c62364996f0771a4c882c50fd50d0d0f1e8f345e5f0",
          "8a1d1995d863182150845004d1de4418c54f1d6df541394692bb96af5c28fb8c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "20ef2bd3-ab49-445c-b421-0a84c452246f",
        "line": "6378",
        "column": "50",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "'refresh_token'], $newApiKeys['expires_at'], $extraData);\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "6fb56b8e12266eaed7f029c1ff684ead04cd5b0ac5e13dfacee820e48dcce505",
        "deprecatedHashes": [
          "2190d39ed2c60167c3c25087c30cec2d2ded91d2275913160663284a69d60263",
          "7f32f6fad1d141b712f991d24ca100ae52d7db8bb3a38091a7ec6ca3c393e7ab"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b1c3adb0-05cc-457b-91ed-5509340d457a",
        "line": "6378",
        "column": "80",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "'expires_at'], $extraData);\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "5945ade737de265676da0fe3304de5a6e653ccf31866fc5302b6302adbf3e0b9",
        "deprecatedHashes": [
          "f3110afcbdc8305b6c3ca311798cfd65cf6b4cc934f84e2cf054d7b84d21fc73",
          "f82adbbf822171458a5b790884b3419b4afb07db6d1178fa2357c48193f2742a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ef553e9a-6a16-4d2a-801e-6d4d31885e55",
        "line": "6409",
        "column": "50",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "'refresh_token'], $newApiKeys['expires_at'], $extraData);\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "5747cb1226156a49aaa5fb77eb013e0ef118567e7b9e0f84e023478e30a8b7b3",
        "deprecatedHashes": [
          "2f655121e5134b1cad5f32cc44de9af300ffa43a0caf035a957bc08dc10bffff",
          "ad9f0fd3d88cd59da5f11547268a7fd5b58e56242e3e7066850740c58cc46909"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "66072f07-1ba7-4269-bc74-11278c32ba18",
        "line": "6409",
        "column": "80",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "'expires_at'], $extraData);\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "065b2e45cdf8ea755ba97bc62fb1cd6fb96e01bce7187389b98b118a70e83f3d",
        "deprecatedHashes": [
          "7bf061d248715f4f70c47a8dd307e94372efe0250251a218ac337b41b91e36a1",
          "9f0a0db835611c4840adda3c723c14184069c26cf2a6b775e38ddcd27bef82d1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "651b33cb-456c-4660-ad4c-2aa9c870d32f",
        "line": "6440",
        "column": "51",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"'refresh_token'], $newApiKeys['expires_at'], $extraData);\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "9116e5952e95ef0d6829461bd352cb4362144f3f171c2625020f255732f1cec1",
        "deprecatedHashes": [
          "70e02f62679d8c6111b1deb4cd80e61b1df451f8fda95887a5137ff476125915",
          "bbb8eae7b1b594bbf8ca0a024789238fec1bda3f7517531f91bd36c9fd95127a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d465537e-c583-432c-acca-375f1a8e109d",
        "line": "6502",
        "column": "60",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "eys' =\\\\u003e [], 'is_published' =\\\\u003e true]);\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "be8aff782863aa7d6aba88855d3d002f17a20c4a2d1de58b34c940f5b0729540",
        "deprecatedHashes": [
          "d85125429a547c0a2a5baa3b729c12a5f74962251dcda7d9702654d1473b9d86",
          "e6e8d79f41c37b72cd52285a99590d5df8e5d0f34731c4fb603963af78c28dd1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d7f26ea8-2ba9-4748-96c7-180aa338d301",
        "line": "6533",
        "column": "92",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": " not 'name'\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "c7f897878c37cfb8b41ddc365fc5f253325224efae02e90b52676da9af4aaf08",
        "deprecatedHashes": [
          "903a3861c21de861c95707b7f92174e262a6087c03479d42a054830fad4f05e2",
          "d64fe50cc858f98a97835cf28817d5f8c3c671d5188de0cd670bb3987b7c1a61"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9dd38891-5ed2-44b0-a8ab-5a86191fb8a8",
        "line": "6564",
        "column": "92",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": " not 'name'\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "d4adedb7e5b3b5bef368056a2d52cd01a858db66535be7c25094f097c65c3f4e",
        "deprecatedHashes": [
          "96b176aacf7395b1b1c1763633da1b35c49481ccaaf55b5fec230870c86ea201",
          "fe5f2a2d1ebeab9270f4a930437e2926cbe998c76115cdf5bcdb2279560469fc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a2c7f16a-2981-4d6d-8c9a-61c2ed50d5f6",
        "line": "6595",
        "column": "47",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$mailer-\\\\u003esetApiKey($settings['api_key']);\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "2af618713e8b9e13862e8d638ddcb31b6d5aee5734aeeb866d048292bc899857",
        "deprecatedHashes": [
          "70cae224cfeaaf88a7d4c44b9e545806622fd3a389afd089dfb8576804942dca",
          "f43446a554f7122e0bae776a0ca664a56eb28365628e469e54d98dd1d1522ee6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b8b0a2cc-5629-4b90-92ea-519a10786312",
        "line": "6657",
        "column": "61",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$this-\\\\u003econfig-\\\\u003eset('secret_key', 'topsecret');\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "1aec2a7dbddde4a4efb75053773c0167905064e88e0e65a11a92d7515bb3ab87",
        "deprecatedHashes": [
          "58342d745c314bdbc61e4e933713f4b398b90ea520c95ff0ee06dec1988dbb98",
          "e89cadf1da74a9c8400d1a037c871cad9e9c82ca4001167b0a53fc496898af7b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8f4ee2fa-f727-470f-a7cd-63aae2ef3f89",
        "line": "6688",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"'dbname'   =\\\\u003e getenv('DB_NAME') ?: '%mautic.db_name%',\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "9000c17902e59d48f881d5d0a9ad7f796ebae828c3c999d597a6f4a8f798d1b7",
        "deprecatedHashes": [
          "eec182e1ca6c095a1af65e30f8ecf3a4958547964b1df2843fd8edb4249d910f",
          "8f8d685c0e32e9172febff7670e6ccb2ea2a38b1be38c0ab6334192f218861d2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d2c7a712-1283-4e99-a5d1-2143b7fbc4b0",
        "line": "6719",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "ey', '68c7e75470c02cba06dd543431411e0de94e04fdf2b3a2eac05957060edb66d0');\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Potential Hard-coded credential\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-25",
        "vulnHash": "64f5a5e6122943ae73494b9a739a8806e3ff662c524a81d874e7b6fb4ea33ca4",
        "deprecatedHashes": [
          "8ec1af737bcc8857a1e5e390a3d5992eda44569be286cdabec5bbb9c69d718e8",
          "3a4002195b6848ea6cb0016e3104acc8e7876e434c9c17f8ed0f326d3f3a8378"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1e14f912-80e7-4545-8715-b507fdbb9acf",
        "line": "240",
        "column": "62",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$user-\\u003esetPassword($encoder-\\u003eencodePassword('mautic', null));\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "01b745a89a6ffb350dccf42872699dfb99d0c99bbd8cf461cdcc7f6b98155190",
        "deprecatedHashes": [
          "d714c7fda2acd5cffeda8e370b294dba57d874bd77b185069b315b60485b137a",
          "5bc7b39909360db4d7ff1bf6ec5823250c56c7265b12c91995069949092e87fe"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "76d3fd01-0b23-4871-8544-325101cf5cdc",
        "line": "798",
        "column": "62",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$user-\\u003esetPassword($encoder-\\u003eencodePassword('mautic', null));\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "4d9a307c5881275c7a6eb1e530ada6973d0ffff2c22265569fe6371ae3f480e8",
        "deprecatedHashes": [
          "9b3e9e061783d4b30ca4503bd980efc28838cf9cdf7a65d392a1dc1a3b3bd57b",
          "208ec9a437dc0e12eb61b204491d4328268d628347a530687b74e2b880859d27"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e45cc9b7-7d54-498e-aae4-5e8fcefe0500",
        "line": "1046",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"const FIELD_PASSWORD = 'field_password';\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "9bc71ab8418076a219b91770ce2c1fa48689593e8f2af6bb0bfbfa50ee63198e",
        "deprecatedHashes": [
          "abf068daabff3cd7ffe4ad9707261d2d4c67812c56278d886298c7136c772515",
          "c94fd028bbdc3d9e85ccf494fcd4a5f79d2e941a5856b0304ffa4eec6418ac53"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "561c3aae-9dfb-48f6-9fbf-2d464f014767",
        "line": "1201",
        "column": "44",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"mautic.sms.config.form.sms.password=\\\"Auth Token\\\"\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "968083087ef85a08f1ac4e721f2f46a1266eb0937d409a0475be9766c1b97094",
        "deprecatedHashes": [
          "4ee4d3e40e4127d73f885ca085dd7bfcadd7605209b6bb69a4c5c732d0ce20c5",
          "fd79b1a074cfdef3bd67e69428dec245d8d5c962905123af4cb05d3b60474167"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "78da8c15-59f9-4727-a412-05a2492a81b8",
        "line": "2875",
        "column": "46",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"mautic.install.form.database.password=\\\"Database Password\\\"\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "1875a57049ab69b27110f86b9725ad0772ab70454fda75ceceee1384a0ddc1f4",
        "deprecatedHashes": [
          "270ed8251e099d0fdcb8cdf96cf2a69882644ad475ead514e22fa8a139f41948",
          "0f653d73dca232371228082eeaa7579d4874cb7aa846e1668b13af84112366ba"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "939b21dd-f5bf-4836-8ad8-7943cc49b12f",
        "line": "2906",
        "column": "42",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"mautic.install.form.user.password=\\\"Admin Password\\\"\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "5b78523baf08a29298027b47074811b77d62152d954bfa7eb30ca06075e98435",
        "deprecatedHashes": [
          "abada1367f1faa53efbf6a80836a738f20473da4f2cfdf5690007700809a8170",
          "b9d58b624d9b25dae0aef7b5a4e1d69c67a52f03970dd888bb75c5b1d8893b90"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5513e09d-4db6-4677-a8d1-bbf649254511",
        "line": "2999",
        "column": "51",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$this-\\u003eamazonTransport-\\u003esetPassword('password');\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "753da96f0abaa8a9f3307ab73a4bcc84f5a2810edd33bb432db6e4a802f85b9e",
        "deprecatedHashes": [
          "a801c4d8c0df57e0ff932b139918eb92b7664e35a9bcbf836e8d335e73222486",
          "d8b8b03b4ac3658a1defa6cff6e909f2a4492dd6fc6db2c32602ea073019063b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "eda443e7-659f-42b9-b8c3-155ebe1e1908",
        "line": "3278",
        "column": "45",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"mautic.integration.keyfield.password=\\\"Password\\\"\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "b34717425fb07a5eb832753eb02dad50af7d0ab5001e4d65b6d3a25639eafbc5",
        "deprecatedHashes": [
          "4c92a8966a38a5edf3afb7f1bf2042b09755ef2d847b37450ce73d09ae09cbbf",
          "88251725122aa3039cf7f34e5c0af8137d0de3790c58a9b1b39a7d6294664061"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1891747e-7e37-44a7-84de-2804cf505e27",
        "line": "3309",
        "column": "40",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"mautic.form.field.type.password=\\\"Password\\\"\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "1d86660f1ed4024e80d23859e232086a3f84bc6d2049bbd11124a2e9778c1a78",
        "deprecatedHashes": [
          "38793ee107020755090456e853bb6bfc1143d82f1d1e8194f14ea6e8e7dfe5c5",
          "d97ae95c2abf74989fe61d68efcaba3073e30ea91bc3ea43ba0957b52116e78c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6596604c-9183-43fc-93d2-3f2e0ff50760",
        "line": "4053",
        "column": "62",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"$user-\\u003esetPassword($encoder-\\u003eencodePassword('password', null));\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "ced2948cbcaf8bc51a76e97b7ad5c9d8d8057a0cc1ea0d60ac19ad201c965414",
        "deprecatedHashes": [
          "6cf0811a2f7d078dcc5d8e5716ce41710f8ce71d9c7e20c55bf09fa1dcbb8efc",
          "34631823435e964dd7f219645df5a9c4027a722bf4eb0aa3a31049ac4bcc49b7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6368445d-9e78-4142-9d65-a5f4b7fc18e0",
        "line": "4084",
        "column": "54",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"mautic.user.config.form.saml.idp.own_password=\\\"Private key encryption password\\\"\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "5feda567135f1d6956cd4dd2aa972d3c175ea44204819008dc693a3dc54e4293",
        "deprecatedHashes": [
          "f3dc9bf2b9c8abb88b282e559f241ba4448723bfb4039449609ca36c43572907",
          "8b7ed724f677925e1938e2dec861ccc6e891f63bfc3c9c1e98e4f4ccec2d0fec"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e18dc4ab-c60b-459d-a429-cbe61620bec6",
        "line": "4115",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"mautic.core.password=\\\"Password\\\"\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "cd21d96a61a4b2846f7392b9f91405791e167c9b47208f79123e26f357ab0538",
        "deprecatedHashes": [
          "01d95179d31251deeb3ec3b5e6dc2c5dc62098af084dbc1f4b9fb2edd1a42683",
          "176964b1efb1f4e01f1c422fc8f8427b3f0fc0e649561237c097811fa9568061"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b7263d8d-9811-41fb-a0aa-496b48c47128",
        "line": "4549",
        "column": "44",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"mautic.email.config.mailer.password=\\\"Password for the selected mail service\\\"\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "dfa4b039df7aafb298a8a2154841c8346390b90703de4464bbb35b8918f7990f",
        "deprecatedHashes": [
          "8f2848a4cb5fbf6864bea1807c7d6786a74a6061d964fde274912eade586bb1b",
          "a628d46f6f9d810d20574307ea632a264a55ec9d05bbac76f05d75e9a2c8c883"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ffe3e608-17ac-4797-b675-192d3e5676d8",
        "line": "4580",
        "column": "53",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"mautic.email.config.monitored_email_password=\\\"IMAP password\\\"\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "488cd817ab367a54d4dd80a568c596b82c567eee86cc456535f046027c7e67d9",
        "deprecatedHashes": [
          "e631cf574906e2c253c3676cb4b6826da7914044ad6a19214f2ff965ad31d656",
          "7bb1d5f3210298d3cdca288b5fb384c5d1f18a73f230ffb23c6998741b859161"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "cc47ff8d-c80d-4bfc-b7e8-438d2fbd2972",
        "line": "6874",
        "column": "76",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "('password', null));\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "49350b8d0f0f05eefc632f00dd576b3d0141b79229c21416831e05cd1fcfc36b",
        "deprecatedHashes": [
          "0eecde054d2d3274c2afb54b84ef5db39004d16026496dd17f661ef303ce2439",
          "4fd9da23c881a4f7b596656806d9ff591ae4ee98a017b3916ec2cd68a90d8cf8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b10e26cb-b489-495c-8eac-da4c9ffaa8db",
        "line": "6936",
        "column": "65",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$this-\\\\u003eamazonTransport-\\\\u003esetPassword('password');\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "6ed5b97dcf213e0e8683c967734c33478a6833ecad2d3187935366348aff55a2",
        "deprecatedHashes": [
          "5ea3a85397af3edd7d64d07a59ebb7b7306e583e364c79bdf4716933fe7ab272",
          "6fd05ec3a24385e2c90119c5cba5b70b0910542d4109ef5d47cbcde7bb9a24e2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "69bc381e-e30c-4a0f-8e89-f87ef374e2b1",
        "line": "7060",
        "column": "76",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$user-\\\\u003esetPassword($encoder-\\\\u003eencodePassword('mautic', null));\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "9b53c0a0a856ef2cdc109749a42cb592abae4e3473b0e8bac3d5169becc411bc",
        "deprecatedHashes": [
          "9d71f3a343db6cfc72bddd3dcb745e414f0e1035d70286a1989f2119df4fdf26",
          "3e2700cf4fafead0035c31eb8a5eb0acf237db79dcbe593761f265cedeb2d609"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6100aa42-ee65-4e43-b0a1-15d6ab6f4203",
        "line": "7184",
        "column": "41",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"const FIELD_PASSWORD = 'field_password';\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "46589b59c5f48df9ce59dc74fda1a1e73840b90ad47c20dec2b6ef8f9bc61006",
        "deprecatedHashes": [
          "4988b7c57f6f76d56d3edfc85c7c91fe3389d88d218f405250cb38f3b24abb82",
          "3ddd2e10c74ce32316b9a74cc77e272ad9b435f819d61a3ea06970c83e05a967"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "96a597c3-e0cc-412d-b333-290184415aa1",
        "line": "7215",
        "column": "76",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"$user-\\\\u003esetPassword($encoder-\\\\u003eencodePassword('mautic', null));\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "c0d186296a2b1b97cb53f93318742a3d06a645fa52713a5e873be6a31d774335",
        "deprecatedHashes": [
          "fa7076283136cdbe9a71f43d76976fab87bf0cb58c979f8671920f6e0b318ed1",
          "1ad36617bb7ae0490c0b212453c3eb7da2850848b9c36be0ee0756aca2926f50"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "bf998858-b752-433f-8baf-1cc158bc2c55",
        "line": "4611",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "olders\\\"},preventDefault:!0}).done(function(e){l.call(p,n,d,e.folders)}).always(function(){n.a\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "c54d4894b86fefe3819e6dcd8863cfe4daa30afcfcd61578588e5807669007b3",
        "deprecatedHashes": [
          "56a5b01296d479ac617f3ff6f6382e3166a5abc0941f5a4bcb98eab2c4aba48b",
          "931fdd9aca7081561f8572617544beb16a793551c27e997a8ad450e380efeec2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c1c29288-d3fb-4eb0-a282-761b82bc109e",
        "line": "4673",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "assword\\\",confirmUnmount:\\\"Are you sure to unmount $1?\\\",dropFilesBrowser:\\\"Drop or Paste files f\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "0d00eea6c8d0d3bcc9e5f41b7887324839c50d0c9079d659910be5425e5661db",
        "deprecatedHashes": [
          "a272b146d6c7af005f70115b4913cd967056185cebc0c170d47809daf1baf1ea",
          "8e6238183736a0ede8d5dd7f3530a895f1f8d23d0636075083d009f7cde35d48"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7067b076-7fa6-440a-a34a-ed63e61fdfc1",
        "line": "4704",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "eturn\\\",options:i.options},preventDefault:!0}).done(function(e){i=JSON.parse(e.body),o()}):o()\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "3ea038b69f86a670900a6a30956cc683dc8aec2bcd3db6be035b207e52007a2d",
        "deprecatedHashes": [
          "8b2e38a0582e68edf78a067a7a488ee3a628627fd882452c0b092cf43f0d7ab4",
          "ea819586e06fefa646c967e2b2923118c21903ce7791b4e404d06ed92869f336"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0f025d90-338b-4ef0-bdbe-324befd58b6a",
        "line": "8021",
        "column": "102",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "dum'},\",",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "1e049bdbeeff7688372ab5e9029284449951fef877faa98644b8360bb9217346",
        "deprecatedHashes": [
          "80dda91de28a15ec3aefecde128636b7f204e9fb8b704ee9c139c39a705edca9",
          "3cac65d15db528d0f34791a13afa39595d42b0998d9e955df0d033390789edfc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "54fd0e69-581a-4e60-b644-7e727224ffec",
        "line": "1077",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"yield ['http://user:password@www.mautic.org', 'http://user:password@www.mautic.org'];\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "e4bb355e114d9a58f6fd49dd46fe6df9d8df5dd01d6b7390b01bc8aa4c3047b7",
        "deprecatedHashes": [
          "a2e7b139a6c771596f67217a2a199a71a2d088f3c2e89e058d924ba5f4be1874",
          "e72499fef592d4cda1ab48a8850f48e23fa4c20602dbdb09fb29c633663cc110"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1764a1c9-7d2b-42c1-81ea-b6ad35bd621b",
        "line": "1139",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"yield ['http://\\u003cimg\\u003e:\\u003cimg\\u003e@www.mautic.org', $sanitizedUrl];\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "43f0694fb4a797b0173090ba2e37d944cb7bdff04679c66a5bc47c2dc7960fe0",
        "deprecatedHashes": [
          "a0d2f4eab8ba33ba7c89d41ce31bf2bd7729a28157635ee2f2ae46064295699b",
          "ca1c82cfb898603de3aeaf3260f9ca55ffbe2dbdcfcc841aa6fd1bd4e19a244e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5cc8f7c8-9640-4d62-a36d-00114162d5c0",
        "line": "1883",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"'http://username:password@hostname:9090/path?arg=value#anchor',\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "4453fb01dcca5d9c3f57cf4499befc87879bd1aab02bee04c61f07bee2cd99f9",
        "deprecatedHashes": [
          "0b7ffcef8fabce655afcda7e7c37c29bcc91f8bda9a1cbfd0b9c8c76dd09eb76",
          "bdc279afb607218dc5a667fde22bccdcd2b8db386f41b90e876b02833916b306"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7b18fe27-854e-4405-b7f0-ef3a03108a1c",
        "line": "1914",
        "column": "49",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "sername:password@hostname:9090/path?arg=value#anchor')\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "2ee83d346df7914128a72ead5bcaec44fa2cbe07d172cb99b2c11dc77b8093c8",
        "deprecatedHashes": [
          "dbc8d5a9eaa78426b88446c330416dff4c067afa1f849f15415b8b3f70cf3e96",
          "edbc7fe2f83d93fa3048645bf7de01749f7da349aff7cd9e1992312091e8d28c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3875e332-2ede-4814-bf0d-372b3040f9cd",
        "line": "1945",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"'http://username:password@hostname:9090/path?arg=value#anchor',\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "38395f54d2d816a5b20eac5c806de1265de78dca8671abb7ed7d68a927187e89",
        "deprecatedHashes": [
          "a93b1d8baae07b06bcd5b2fb122859a3b892b501fee2060a73e6527b17bee1b5",
          "1205ddf6abb9f02f0a68d75f96d07b7f6e93a10a7be97f31490f7c55fd914985"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c8555da4-e600-4719-a71c-70f2978197ee",
        "line": "1976",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"'https://username:password@hostname:9090/path?arg=value#anchor',\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "a3c817b9f867898f234c21c8cab23912e819ac8d06be55e51ea48b4b37441154",
        "deprecatedHashes": [
          "c5c0b6ca9e9d372ff4089930528f6356754c09bf2f1c97ca233a8bad335dc803",
          "519db2f68d28e01241cdf87a44d20f0e052b745f1b18a6ba1fe5dd9d758824da"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "19c2334e-ae3c-42b9-b5f1-5b145ee9247d",
        "line": "2007",
        "column": "49",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "username:password@hostname:9090/path?arg=value#anchor')\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "0992f7958aa44ba7c4ac498e9c6ec2b4215e833625fba05a79243781234f7e35",
        "deprecatedHashes": [
          "dfe2b70f470fd5a350c5fd275284dd9a5755140998542a6f0963da8e9ba79125",
          "9f95013964f3e4833b3bd486f5ba05c798cc6a481a0ca19d037459b3c60754e3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "62fec4b9-5ebb-46b1-a390-a2ef63989b09",
        "line": "2038",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"'http://username:password@hostname:9090/path?arg=value#anchor',\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "12b02754561f24e937045c7122e43c61d3c55e9e3dc655fa857cc54f0e811f2d",
        "deprecatedHashes": [
          "40eaa8a6fd3f029d2a44e0628bcacdbce05c105be221d4f74ba3817fc94735d6",
          "d0174d856c3ec183354c16d0344e139aefb54cb6f8ed1f4e8a4cb726bfe884f7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7bfab7e2-9d3a-45b3-a11a-22d785d6404e",
        "line": "2069",
        "column": "49",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "sername:password@hostname:9090/path?arg=value#anchor')\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "f326709f7fbc42d1b8350ec3a0512ba83d7efd32b05a059dca989ed0c96df2c5",
        "deprecatedHashes": [
          "8dbbe68001630a343f055a06c0dcc05d061247f050462ccd8d3b7101ba752391",
          "1451cb7412165421b38eee03a9ecba87980ba4b0024c7c6fb5bdde36177cd45f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "965fc074-7a4b-4b24-8211-123c9dda7488",
        "line": "2100",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"'ftp://username:password@hostname:9090/path?arg=value#anchor',\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "f944d3e72dbe3457ee286596d40aa43a388bceee9cdfbef540fb9441775f7560",
        "deprecatedHashes": [
          "b226556882279fd51f349bb3d1f75bb0955fec71261c3e917a1779c3e3081f9e",
          "6f2953a10633510e8ec77361675d6f88a5ab777611d6da5771027da5b7cfb110"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "46322239-6c00-4ba9-b3f0-c9ccf7280765",
        "line": "2131",
        "column": "49",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "ername:password@hostname:9090/path?arg=value#anchor')\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "a6d042c7eae4cddca4a441e11b39f50c6fc643fa7194174d0627993737dcc3c0",
        "deprecatedHashes": [
          "220db8b7490e172c93661e16ff1a47cc2df3a1fbfd39576ff6381d558b178ac8",
          "0bec33e5779568e26d3e00f86125fc6db829268509b5ac19a9da1500e9d2985b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9a82e867-2a41-4e65-9ef0-8c7061ad7181",
        "line": "2162",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "sername:password@hostname:9090/path?ar_g1=value\\u0026arg2=some+email%40address.com#anchor',\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "5276b94ac261a365f64db0ce5974979746f26a8efd8e1928511f9d036862cb8b",
        "deprecatedHashes": [
          "b0ae36f56558d5d5862f24eb6ac893799a2e2968831f07a6dd408cee5c78fb67",
          "2232ba8ccb7b851b4720075c6930e43cb182349a16d4ab418ac8c813a28805dc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8ff1f013-1a05-4267-9f0e-f21a77088645",
        "line": "2193",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "sername:password@hostname:9090/path?ar g1=value\\u0026arg2=some+email@address.com#anchor'\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "b586b38f488c0bd4b1d6368f334262c936e8fb2b2c7765bfc8b03820b6769a46",
        "deprecatedHashes": [
          "dc0ae3b05947e113eda78bc1c8357a9845d00d166022b5d9f152dbff65040bd8",
          "0377f9e097fc7463dbc64ea95be2e3abc2cab37e932221669e314d88fe7c1819"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7314576e-a6fd-4089-ace8-c5c380a22fd2",
        "line": "2224",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"'http://username:password@hostname:9090/some%20path%20with%20whitespace',\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "8c47c312680d63503b47b990d9d246fede5e1182f09fec7fc05bd7bd741eb882",
        "deprecatedHashes": [
          "13900de25127ee21fe9f3d6a81dfcd8496278236f9d92c7374d54b4547eb1961",
          "be6ff3c9081fd86149920c72e7b12f89e94c7cb92e9389a2c4e0c399d295da60"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a86c0029-459a-499f-970d-4f534ee4b1ca",
        "line": "2255",
        "column": "49",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "sername:password@hostname:9090/some path with whitespace')\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "46dd5e055b39bae5237434920a5da64f852640a3e5f8d451ae5ddfbb3618abfc",
        "deprecatedHashes": [
          "a8ad02e960682ccaf9b3a9f2a4127022cb1f83d0fe740684f6038db69b2377bc",
          "e95010e482e85b6d93dd3509d8b52503e8dbb337da366ea5063367a8bc86fd1d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "522e4477-9bfb-48d7-974c-43d919b77ba6",
        "line": "7432",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"'http://username:password@hostname:9090/path?arg=value#anchor',\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "0d8c759204a8d13b38577230c8faac3cfe2b2d61a5cb5a21a8ba5b57e8b3d6cc",
        "deprecatedHashes": [
          "c36b17155108806350658cbcd90b84d0a76a09258a97fd5c1d247582f4cfeb01",
          "c623cf86a3a17faea2c03d847b06ae8e1a441503a238a4d33d5884b6b8517c48"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "eb4ecaef-b7af-40bc-80cf-ce686f2c01f4",
        "line": "7494",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"'http://username:password@hostname:9090/path?arg=value#anchor',\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "ed4514636672405ea5ebc4ed08551714b49bacce13b4551d5c8a746a5cd4c2f1",
        "deprecatedHashes": [
          "d012b996548da6d5fcf2437c9d0275a3e88202123290ff184a0fb48a2ac7c6bd",
          "a8e11d51e799a55a352c89e1e277e323595ee78c1a2288cecd9014a52373176c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c76e8500-16db-4888-9efc-7123e74a9f83",
        "line": "7525",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"'https://username:password@hostname:9090/path?arg=value#anchor',\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "475ba6dbc89f20fd10f883f4cdf0dac7bb44be0299d6f43d5449e9e69686e334",
        "deprecatedHashes": [
          "2c88c613a4f5892a7a4ddf382b44ef9035ece003c6db6426c7078f602fb0bc10",
          "6e1611bd8a84b2f67e28fa56bdb8ce4cfe9f28c36ff0eaa481a863f2c6a8d3bc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4de5db06-9837-41ad-9bbd-c657c5c32239",
        "line": "7587",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"'http://username:password@hostname:9090/path?arg=value#anchor',\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "0232c745d0aa71315d71071193156f766f457fcd21213faf13cc952c72a5bd12",
        "deprecatedHashes": [
          "8cb7ee07ce603e87f5f8fedf8287f772e090be8543eeeb729c6c766aba9cbdc0",
          "908c68f7cfcddcc63dcd411e40b2ccc713fc26fe69ac1bef1f09255b5cf8ec47"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "55feb3cc-9d71-4181-a4a0-687bda2052b3",
        "line": "7649",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"'ftp://username:password@hostname:9090/path?arg=value#anchor',\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "41a39a3c6e2091be80f38421d58103c6eebd0caaa308219df4c113ff940e484e",
        "deprecatedHashes": [
          "dd5f9375a8028b8b1be8a68b886aa1d77dbfdb3fce0ba538b2c37e32c43d5d20",
          "b8a7d94ab3e4f924c1173597d2848b69d1e53def425f56bf2833010bc0a89acc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "bdca53a4-8457-4e96-9864-9bea3aea0b3d",
        "line": "7773",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\"code\": \"\\\"code\\\": \\\"'http://username:password@hostname:9090/some%20path%20with%20whitespace',\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "63ad69243f924f1b662420cb7d75ccff619550facc1c414b1bee3f4a3658b515",
        "deprecatedHashes": [
          "cb42a99f93e7cd98f01e422e213166273cbe9d9690ae078701eb9baab03bb729",
          "ea71739ae1ff0c26c0359924cc33c5dd26bb6e5ad332d5f52e333d44207e5df5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f6f05f7b-b5fd-4b5a-9468-f5bd883c1966",
        "line": "7835",
        "column": "37",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "ser:password@www.mautic.org', 'http://user:password@www.mautic.org'];\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "b3379894cb10d9a459434938926705f1748cd10cae08df7ad2de77cb71ad468b",
        "deprecatedHashes": [
          "22d3dfb9706de07a95c7593715a8d0b88e5729f9cca58c03af3410e23756297c",
          "be5b112535b5e632c6ca132d65d0f52178996b10197775dcf81dab07cb106a1b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "df68a848-a301-42cf-9a03-372c85de568f",
        "line": "7866",
        "column": "37",
        "confidence": "MEDIUM",
        "file": "app\\horusec.json",
        "code": "\\u003cimg\\\\u003e:\\\\u003cimg\\\\u003e@www.mautic.org', $sanitizedUrl];\\\",\",",
        "details": "(1/1) * Possible vulnerability detected: Password found in a hardcoded URL\nA password was found in a hardcoded URL, this can lead to not only the leak of this password but also a failure point to some more sophisticated CSRF and SSRF attacks. Check CWE-352 (https://cwe.mitre.org/data/definitions/352.html) and CWE-918 (https://cwe.mitre.org/data/definitions/918.html) for more details.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-27",
        "vulnHash": "153572685ab04472a952349f27667f2fdf0107270d4a86231470f7917bd513c1",
        "deprecatedHashes": [
          "a89805a18e37d4afd480c8cab7e056da1bc4c2152456fa56b2332896f4814b1d",
          "fc897d43ee9c3f49fa8a96754897c295ee1e5a793bc43c7896f97c02bd9b8f43"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "30d57f58-75f9-45b5-a628-00cd0e352ab6",
        "line": "9418",
        "column": "93",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "lders'},",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "6f7b464f1b55179639f7b4402bc1da3cce7515c9accbe10b36defe3360ec72cd",
        "deprecatedHashes": [
          "120ee3ba948a8959b52116befda0df63856d4ace62e97923ccac567e9aa89d07",
          "6e3c0b353165be72686b7f5fd0ff9b72b6c2d7aa8f7a37a5368b15cd66ddeba2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fa3ecf66-5353-4aab-8100-82cbc75254e4",
        "line": "11185",
        "column": "5480",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "pass\":\"mpm\",\"application\\/vnd.bmi\":\"bmi\",\"application\\/vnd.businessobjects\":\"rep\",\"application\\/vnd.",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "7604e0f25c816e187c596592ab5c2f07a1173d640eb15b2a05cbb3fa54473acc",
        "deprecatedHashes": [
          "00dc0842715635b4185b20927fdf43f11714e1d7b32b46a86402251c95642970",
          "264158c8c07ba18c3178a8ae27a5a5a2f4b8f8fdddd6f00f684b042b5d2f9a6e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "36357a52-0de5-4ac6-b40a-890d39b2e23e",
        "line": "27142",
        "column": "83",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": ": 'return', options: d.options},",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "11cd100c2a6e94d8fd3bdae3d9429f33f34c40dc63f5f060529e7073ce1418b8",
        "deprecatedHashes": [
          "eceb397eb8beb973fef6a235980fafb0ee1cac8890e9fa367505cdd31d92f4cf",
          "f0dac27f855ffca3b49b642b4ac6a8d355c9f0e5a727ba646dae12ae3538ffd8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ecb19954-b846-4661-beac-358b303e97cc",
        "line": "27227",
        "column": "99",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "m'},",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "7a51c11b6fe3cd2677285c790589f9d993cf7ebb7f3dc6bc13508ce87acd2436",
        "deprecatedHashes": [
          "334388ab50f3a941bf762e52bb313f411bd7ed42c7c606f11908938ceb2c1857",
          "01e744356623389ecdfaa50517d2ca389c220b0945c3d0df33840f41fb09cd17"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9bd277e0-aeb7-4cf4-b6fa-b49939e43cb3",
        "line": "27263",
        "column": "98",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "data   : {cmd  : 'netmount', protocol : 'netunmount', host: d.netkey, user : d.hash, pass : 'dum'},",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "1c644588e75c8ef3ac4ec81277f538326c2ce41c87e1abdff9e4c033588a07cb",
        "deprecatedHashes": [
          "c48da0a0cd1ad99e725278403ecc953230247a158af3efead0800df0f887258e",
          "13d2fca89756746ee7baa0c739e343a02b00b93304c2e48740390c28edb94d85"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "444c8456-17f4-47c3-a2cf-809d768b42c8",
        "line": "5",
        "column": "273477",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "AAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw==\",d\u0026\u0026(n.width=n.height=1,t.display.wrapper.appendChild(n),n.",
        "details": "(1/1) * Possible vulnerability detected: AWS Secret Key\nWhen use AWS Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-2",
        "vulnHash": "4bf60165da88a815a9a66057f518b4238b365be6ec1760ef84630ecd5a6dec37",
        "deprecatedHashes": [
          "e5b4c29af80fbfceb15039e9dcf1014f37a7933116d9e5eaf6dcb1707ea5e9ff",
          "f3ba23265bfe0a6017d0a4c3aa2d0bb6cef7c788d47a06a8eb56747b9050e9ac"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6b7c22fc-dca3-4929-b615-223794077f17",
        "line": "14",
        "column": "23092",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Password:\"Password\",labelTypeNumber:\"Number\",labelTypeSubmit:\"Submit\",labelTypeReset:\"Reset\",labelTy",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "fbac7296dd1bbef59e18774a58355a87d74bf15e045f14f9ce1810dbe0c8f01a",
        "deprecatedHashes": [
          "54f1f7f3cb254e9707ebacdbb9c14264a0e232cee1339e14e430a715fa63c3de",
          "c006937df58174a27959347cdc6cba1a4590738117003b76f6372a7d9dd23773"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ea30569a-147b-48c4-a4f3-24aa25f4c818",
        "line": "8",
        "column": "1230902",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Pass:\"overEvery\",always:\"constant\",any:\"some\",anyPass:\"overSome\",apply:\"spread\",assoc:\"set\",assocPat",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "42b03e6f70748edd319ff50d5134b4ea02a5bd4b6837210105374ad37fb26a4a",
        "deprecatedHashes": [
          "5a605100ad8db01f34737a5af346dbb19afb4d91036efc3e93508aa0e99d3f2b",
          "5a05c9ec01e2230f4844abf3a58618b9aae512b4b2fb8072de0438a2b03064cc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fd3952e9-884d-45c3-96ac-5ac857fc4a51",
        "line": "41",
        "column": "1229832",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Pass:\"overEvery\",always:\"constant\",any:\"some\",anyPass:\"overSome\",apply:\"spread\",assoc:\"set\",assocPat",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "1f5d53b46fa06808328a872911b14dce4eb5f417ff45a11c40d15df1b31486a6",
        "deprecatedHashes": [
          "9a87579c11522e1f96b406660f8536fe66da6d2d38a021ea75741a7cdb79942c",
          "2710bad10249005a78c7925c728d8a67921bc3c1e117a9aaa8885cc67de59306"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "970492ae-97e3-4c14-b6b5-b84245914d79",
        "line": "90269",
        "column": "78",
        "confidence": "MEDIUM",
        "file": "phpstan-baseline.neon",
        "code": "tterBaseCommand\\\\:\\\\:printQueryMetadata\\\\(\\\\) has no return type specified\\\\.$#\"",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "6fc622e13b7e9d0e9b309a0e78e619a9bbec4a2ad30669c5b9fe05e9a365730a",
        "deprecatedHashes": [
          "1d97f4472c602bc234fc26c13f667477fa40a85eb5970580b8e80958bb0374d3",
          "26c8d1e16414a485296f7854aa09b959783bea08550bfb6c392839998cbde97d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "28663491-db70-4ad4-9e9a-02de7aaaec2c",
        "line": "90274",
        "column": "78",
        "confidence": "MEDIUM",
        "file": "phpstan-baseline.neon",
        "code": "tterBaseCommand\\\\:\\\\:printQueryMetadata\\\\(\\\\) has parameter \\\\$metadata with no value type specified",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "fe40a6d96711dbb785764f018cf40d237ecdc181497fa9c3ed375c5c6d2cf232",
        "deprecatedHashes": [
          "3d9e06a17d7c1a9dc44595006033c2a63526e9b646933cf5f5a16e16c8b19e54",
          "7603aaa9353e7581d9adfa63e1a4f37224e39d59257c1566af1f8594cc5e6b3d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "54c7802b-5e5b-41b9-bbf6-ea6103aa2b7a",
        "line": "90299",
        "column": "107",
        "confidence": "MEDIUM",
        "file": "phpstan-baseline.neon",
        "code": "tter \\\\(MauticPlugin\\\\\\\\MauticSocialBundle\\\\\\\\Integration\\\\\\\\TwitterIntegration\\\\) does not accept b",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "2a132e4f0df7c9e841b8472ce53e10f1e7bded6cbfa257885690970df664a919",
        "deprecatedHashes": [
          "4f416761ab49cc4bfb81aa89b2cbdac1764a5501d465c2165e3a5f7c07c012f5",
          "d765a57b1ae7e81793814eafea4e260c285e5cb9b83cfeab93082dc97f50c4fe"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "29675791-e9c9-4291-b2d8-5b8792ce8a55",
        "line": "91154",
        "column": "70",
        "confidence": "MEDIUM",
        "file": "phpstan-baseline.neon",
        "code": "tterCommandHelper\\\\:\\\\:createLeadsFromStatuses\\\\(\\\\) has parameter \\\\$statusList with no value type ",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "c68144875eb0c5f1c20d066054b5a3324d1d8c134a3d950cec56ebf0cb07c1b1",
        "deprecatedHashes": [
          "1bc03ef309a5b6228042ad7b6fb45ee3779891e33c372cbb6772ad3ab5c58a25",
          "7c92418913aa45deb5b0a4005c4b3b2a73ffafdaa8287694a46ab02f5b94f0ff"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a882c468-ee54-4e91-8926-92ca12ead3ca",
        "line": "91159",
        "column": "70",
        "confidence": "MEDIUM",
        "file": "phpstan-baseline.neon",
        "code": "tterCommandHelper\\\\:\\\\:getManipulatedLeads\\\\(\\\\) return type has no value type specified in iterable",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "aa1f0de57d439bdea8b59ba34ed8d32ae714506c333ce150f824e6fea871029e",
        "deprecatedHashes": [
          "99b9a0f7107b7226e72c05a07fe21767cbafcd9bf6610ca28d264c41b8508335",
          "72c3fa06936623cac4a301053b3fbf4efe47562862176d9be4cf666b7a1f590b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "313d2085-4932-4820-93d3-3d2a96556cad",
        "line": "91164",
        "column": "70",
        "confidence": "MEDIUM",
        "file": "phpstan-baseline.neon",
        "code": "tterCommandHelper\\\\:\\\\:incrementPostCount\\\\(\\\\) has no return type specified\\\\.$#\"",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "39b72e19a3cc35727225ae8ec3e45525bf37e283d5ac1fd49355522e23d36477",
        "deprecatedHashes": [
          "4a9ea5ec916061f7c8726d389a03081fd293318854e61971c9741c7bfd1ab0e4",
          "f669a8685cbe67c4df9b9aeecb87afb5cc449ddf1244273185efd20e35346a55"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4806a11a-1115-4d4e-bde4-6ba3cb98fe21",
        "line": "91169",
        "column": "70",
        "confidence": "MEDIUM",
        "file": "phpstan-baseline.neon",
        "code": "tterCommandHelper\\\\:\\\\:incrementPostCount\\\\(\\\\) has parameter \\\\$tweet with no type specified\\\\.$#\"",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "8e2d1668985a02eba590db48a34526fd506369b7a800d13da6f9b2fa38f3ac69",
        "deprecatedHashes": [
          "1289ba6e1e74e05b9d752fafc7125e307f4f494b137c1cf32441918a1f6a78a5",
          "a548c370f70f9404053a58655808c4ca59058e0a90083a4b693e416edf004a7d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "dd571e76-9aab-466e-b791-c48efb255ce9",
        "line": "91179",
        "column": "70",
        "confidence": "MEDIUM",
        "file": "phpstan-baseline.neon",
        "code": "tterCommandHelper\\\\:\\\\:setMonitorLeadStat\\\\(\\\\) has no return type specified\\\\.$#\"",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "be20051d1ed12ac8351a73606f69fce7ded9ff885bc3a9d6c0774ed3cc1fc27b",
        "deprecatedHashes": [
          "efc7bf4243bd338a606ab30f77ce10a74008b52abdb422bd2d682191f5b04bd4",
          "47a45856e3becfaedea8c41671f7327262d9edd29e027cf683b001d05614074b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0a0cc89a-b32b-4769-bfa3-5305c9e3100b",
        "line": "91664",
        "column": "75",
        "confidence": "MEDIUM",
        "file": "phpstan-baseline.neon",
        "code": "tterIntegration\\\\:\\\\:getAvailableLeadFields\\\\(\\\\) has parameter \\\\$settings with no value type speci",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "07fafa32a78e9fc7fb7fc88c68d0183673765ec1f7bdfd56c13ec522cc6bf8d4",
        "deprecatedHashes": [
          "11cc7342a28bff170bb62c8b43498c47de0196f146163d2834f0b7f66e2ed62f",
          "66908e3b2a164bd9564dcc45e6dc1d0a2773e65ee663f73e1a59f5a648d00293"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d312b231-654b-4a59-b1fe-6acc8f698c8e",
        "line": "91669",
        "column": "75",
        "confidence": "MEDIUM",
        "file": "phpstan-baseline.neon",
        "code": "tterIntegration\\\\:\\\\:getAvailableLeadFields\\\\(\\\\) return type has no value type specified in iterabl",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "00412f36576affb848a2fe7ee8ac6302fd03d1f48828b21c9352dedc00c5af36",
        "deprecatedHashes": [
          "7be4243135746050caa1d793d34cebc993077df20fef631ca009e41197ecd7d2",
          "b4a6de1d914b8d809e51919d7d30e216d14eed9923689a0a5a025c35e2eb2f79"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0dac4277-0c70-4770-8e18-47924d5f0e44",
        "line": "91699",
        "column": "75",
        "confidence": "MEDIUM",
        "file": "phpstan-baseline.neon",
        "code": "tterIntegration\\\\:\\\\:getSupportedFeatures\\\\(\\\\) return type has no value type specified in iterable ",
        "details": "(1/1) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "48f6fabbce646a755462c8ce74c4e0845f84cf6f83e073f80ad1953ceaa601dc",
        "deprecatedHashes": [
          "b8eb5c01ba150330728b99333d56204442e3bbbfccf2bff63f1e60351761bbe4",
          "d9d810f2d4fcdf4cf5d6805af1bbccb5dad722067eb45bce4b0450f575f28df1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a8d4fe31-9f03-4257-b638-4cadb4bdf6ce",
        "line": "91499",
        "column": "75",
        "confidence": "MEDIUM",
        "file": "phpstan-baseline.neon",
        "code": "kedInIntegration\\\\:\\\\:getAvailableLeadFields\\\\(\\\\) has parameter \\\\$settings with no value type spec",
        "details": "(1/1) * Possible vulnerability detected: LinkedIn Secret Key\nWhen use LinkedIn Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-10",
        "vulnHash": "160b9b02ff82efde7a0c52d5f04b9fc9314c713a89ba9247b73c537f207ff7f0",
        "deprecatedHashes": [
          "67131968ff66eba9c3b36a9838248d7eb8d83db8ef333693c753f6a4eeb100c3",
          "03411ae0a4f77aac726df2b0de2b81bbdd1812689a873253b56f532275673f30"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1e5c8b9f-5c80-47ea-9ae3-bf526be9cfad",
        "line": "91504",
        "column": "75",
        "confidence": "MEDIUM",
        "file": "phpstan-baseline.neon",
        "code": "kedInIntegration\\\\:\\\\:getAvailableLeadFields\\\\(\\\\) return type has no value type specified in iterab",
        "details": "(1/1) * Possible vulnerability detected: LinkedIn Secret Key\nWhen use LinkedIn Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-10",
        "vulnHash": "536cebe5f8970958af70c0f08b8ec25c78bb85e1845d00054b7e0e6808dcb6c9",
        "deprecatedHashes": [
          "ddc7cd13285e999383bb571c4f19226957ca397fb9698a47dfd3217b0d846803",
          "75553af744ea3053063819f9bdf24d80cd9d4d4c12495eb1009142eb825d0222"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "faa1f3aa-30f9-4924-a48b-eadb97740108",
        "line": "91519",
        "column": "75",
        "confidence": "MEDIUM",
        "file": "phpstan-baseline.neon",
        "code": "kedInIntegration\\\\:\\\\:getRequiredKeyFields\\\\(\\\\) return type has no value type specified in iterable",
        "details": "(1/1) * Possible vulnerability detected: LinkedIn Secret Key\nWhen use LinkedIn Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-10",
        "vulnHash": "868a3558edbbe54fecd2e3685ae513394e41c09c1513ee828f6dfdba4af05e51",
        "deprecatedHashes": [
          "8a63150f97f5acff3dd4fcf2845b935b79b779028f70e91efbd9c215f8a02fbe",
          "acb4c40047af4d416a70cfd51c7ce9cdf7d8c6d0a2afd7137f13d852e7cbfc2f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c937fd56-5352-45f4-9879-d1d9677b7f8f",
        "line": "91524",
        "column": "75",
        "confidence": "MEDIUM",
        "file": "phpstan-baseline.neon",
        "code": "kedInIntegration\\\\:\\\\:getSupportedFeatures\\\\(\\\\) return type has no value type specified in iterable",
        "details": "(1/1) * Possible vulnerability detected: LinkedIn Secret Key\nWhen use LinkedIn Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-10",
        "vulnHash": "85c5a1ec84806497a837cce33c2a9f2a71d31d6754f5f04f26112366dbd4836b",
        "deprecatedHashes": [
          "ccb5dbcb95507b4332bd093af97fc75b202b00c0109cf42dc3aaa447fc6a45d3",
          "92bc5530c7556520d0dd749dc5ecfdc47993e4659ca16b7970e4a44fbbff4cfe"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3324622e-a6b0-428d-a1a9-8f4ccc754290",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js.map",
        "code": "",
        "details": "(1/3) * Possible vulnerability detected: AWS Secret Key\nWhen use AWS Secret Key is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.\n         \n(2/3) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.\n         \n(3/3) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-2",
        "vulnHash": "172db898147edafbab456208d43d634b5789f0c547dbb8ebf5366fbb8e72485d",
        "deprecatedHashes": [
          "9828c74ebdf4ca9ec01c60fb7cb6c6df66be3625a9dea4c962182b60e6f225e6",
          "d17da95b6e705fdec64ef010836f8f086830c100235051da7444abe15611011f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8621957a-6650-448c-a4e4-19b3c3f42f0c",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js.map",
        "code": "",
        "details": "(1/2) * Possible vulnerability detected: Twitter Client ID\nWhen use Twitter Client ID is recommended use vault or environment variable encrypted for the best security. For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory.\n         \n(2/2) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-7",
        "vulnHash": "172db898147edafbab456208d43d634b5789f0c547dbb8ebf5366fbb8e72485d",
        "deprecatedHashes": [
          "392923f5099852195b8d7108f082428b12f53ec8f972eac6a7178308e62a8c6f",
          "ce40a2296a0779c8227aaffa4e3cac7b54f992f1e04a5a7303cff3d290e9bde7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.987131-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "dc4380ec-29dc-42d6-9f24-0eb585173a83",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js.map",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Hard-coded password\nThe software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "Leaks",
        "severity": "CRITICAL",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-LEAKS-26",
        "vulnHash": "172db898147edafbab456208d43d634b5789f0c547dbb8ebf5366fbb8e72485d",
        "deprecatedHashes": [
          "fa3d3cd0156b9842988bd259456e96ee72b43f5adbb99bb4f8cc1f58e8ee36cb",
          "8799e32a56d3a73b00eac76d27ad40705051e64cd3cef3289aef3dcb2aa4fb4a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9e31c6e4-71af-4f6e-9c81-b00ee9aeb3c1",
        "line": "2771",
        "column": "",
        "confidence": "LOW",
        "file": "app\\assets\\scaffold\\files\\package-lock.json",
        "code": "diff",
        "details": "(1/1) * Possible vulnerability detected: A vulnerability was found in diff before v3.5.0, the affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.",
        "securityTool": "NpmAudit",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "1085700",
        "vulnHash": "b4309500c704a97daf9ea0293ad721a41612eb31d08fcf463291fa61e05b2ff3",
        "deprecatedHashes": [
          "f7abff87ecbad317678cfb6a50c78524b2c0cbcc3895f61f1ba21fa3e05b3057",
          "c55a5821c8213e6e0d349499d5c6377db32f2ef1e8bf400cca849b454f3c46fa"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6491921b-2a14-41ae-8236-5ce540e74d17",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": ".gitpod.Dockerfile",
        "code": "root user",
        "details": "(1/1) * Possible vulnerability detected: MissConfiguration\n      Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.\n      Message: Specify at least 1 USER command in Dockerfile with non-root user as argument\n      Resolution: Add 'USER \u003cnon root user name\u003e' line to the Dockerfile\n      References: [https://docs.docker.com/develop/develop-images/dockerfile_best-practices/ https://avd.aquasec.com/appshield/ds002]",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "",
        "vulnHash": "613f825eb7f4073c189ea70bd6be7a8311afd4e017dd7e3900193c81207cea30",
        "deprecatedHashes": [
          "9ad5959283b0f2e9bb14b7305a92405cb8f1984777f770cf0194d214079b8aa3",
          "13dd378dd3bd1a71bf58b374a49b2c0fe61f98944d7b1b23923c0cd2df24f07c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2e64f386-9463-4a6d-a989-d51ba10b4a67",
        "line": "7388",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "composer.lock",
        "code": "                \"source\": \"https://github.com/phpseclib/phpseclib/tree/3.0.14\"\n\tInstalled Version: \"3.0.14\"\n\tUpdate to Version: \"3.0.19\" for fix this issue.",
        "details": "(1/1) * Possible vulnerability detected: Math/PrimeField.php in phpseclib 3.x before 3.0.19 has an infinite loop with composite primefields.\nPrimaryURL: https://avd.aquasec.com/nvd/cve-2023-27560.\nCwe Links: (https://cwe.mitre.org/data/definitions/835.html)",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "CVE-2023-27560",
        "vulnHash": "fa71ce2d28e3ed6628a9db76a69436150ce29f4b1665fd717e73c58420c2e165",
        "deprecatedHashes": [
          "b2f40ed95e8dd4f2a432154b79abf83d1de5e13c3317f6277d2f2756102442de",
          "0d039dcba2056226466c94c88b60cf4dd50ab39738149eedcbc86bb25be58959",
          "07667bca08ab1807379e482999bcfea2d44700dc0bf2833b20c99705217040eb",
          "ca06de2a8c2f2a903366b962d25158057810489c75496f46269db77096367b3b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c0802b1a-51b2-48d9-92ee-c2ff57e07eac",
        "line": "10802",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "composer.lock",
        "code": "                \"source\": \"https://github.com/symfony/http-kernel/tree/v4.4.41\"\n\tInstalled Version: \"v4.4.41\"\n\tUpdate to Version: \"2.4.0, 2.5.0, 2.6.0, 3.1.0, 3.2.0, 5.2.0, 5.3.0, 2.7.0, 3.4.0, 5.1.0, 5.4.0, 2.1.0, 2.8.0, 3.3.0, 4.2.0, 5.4.20, 6.0.20, 6.1.12, 6.2.6, 4.0.0, 4.3.0, 2.2.0, 3.0.0, 2.3.0, 4.1.0, 4.4.0, 4.4.50\" for fix this issue.",
        "details": "(1/1) * Possible vulnerability detected: Symfony is a PHP framework for web and console applications and a set of reusable PHP components. The Symfony HTTP cache system, acts as a reverse proxy: It caches entire responses (including headers) and returns them to the clients. In a recent change in the `AbstractSessionListener`, the response might contain a `Set-Cookie` header. If the Symfony HTTP cache system is enabled, this response might bill stored and return to the next clients. An attacker can use this vulnerability to retrieve the victim's session. This issue has been patched and is available for branch 4.4.\nPrimaryURL: https://avd.aquasec.com/nvd/cve-2022-24894.\nCwe Links: (https://cwe.mitre.org/data/definitions/285.html)",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "CVE-2022-24894",
        "vulnHash": "94ac50482de2b4d9813d27a63145c05d77a7a2517d55fd957e92e11f3965f4c0",
        "deprecatedHashes": [
          "62a72cc53ba7f4f7bbd3230f51246d931470620f99fb2cb26a1040118647ee92",
          "6cb7c688425a0d79a83c943706bf5eae731af6c3f87a3fc1b39c0fa12fd5d498",
          "0955996110c86e3f8772b0376d370c67ee3f30fa717878a6b8357830f46428da",
          "4bb26a9cf6bf11327d82f46928bd87ba3b84e2b836578ecafa5c0d5aa72dd285"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "447f3ffc-0c29-478a-9f98-bc8c042b7aae",
        "line": "12815",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "composer.lock",
        "code": "                \"source\": \"https://github.com/symfony/security-bundle/tree/v4.4.41\"\n\tInstalled Version: \"v4.4.41\"\n\tUpdate to Version: \"5.4.20, 2.7.0, 2.4.0, 4.4.50, 5.2.0, 6.0.20, 6.2.6, 2.1.0, 2.8.0, 4.1.0, 2.2.0, 4.2.0, 5.4.0, 2.3.0, 4.3.0, 5.3.0, 2.6.0, 3.2.0, 5.1.0, 2.5.0, 3.3.0, 4.4.0, 6.1.12, 3.1.0, 3.4.0, 4.0.0, 3.0.0\" for fix this issue.",
        "details": "(1/1) * Possible vulnerability detected: Symfony is a PHP framework for web and console applications and a set of reusable PHP components. When authenticating users Symfony by default regenerates the session ID upon login, but preserves the rest of session attributes. Because this does not clear CSRF tokens upon login, this might enables same-site attackers to bypass the CSRF protection mechanism by performing an attack similar to a session-fixation. This issue has been fixed in the 4.4 branch.\nPrimaryURL: https://avd.aquasec.com/nvd/cve-2022-24895.\nCwe Links: (https://cwe.mitre.org/data/definitions/384.html)",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "CVE-2022-24895",
        "vulnHash": "3ac316eaf0425f5181f29871c15657d12aba4f97c4ad33fdc440ef10e57c9e74",
        "deprecatedHashes": [
          "8ec86dcd211508e4736a0048d7be2e76b03ed2049ad8e5a822a374bb32d883fd",
          "b15fa3588062091f84bc75cd2408205c3f273c28d2f6b358d63add584a68b054",
          "5d514a155920926a83aa620252f989af4f88b8b4b6fe1c0ce1fe3c4fd903b492",
          "98cd9f0910d801ab007470af21ce9544a559eab520d4b3d3bd9b553826a20f0e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fb67e0f0-b804-4808-934c-3d4d45244b21",
        "line": "",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "composer.lock",
        "code": "\n\tInstalled Version: \"v3.3.10\"\n\tUpdate to Version: \"1.44.7, 2.15.3, 3.4.3\" for fix this issue.",
        "details": "(1/1) * Possible vulnerability detected: Twig is a template language for PHP. Versions 1.x prior to 1.44.7, 2.x prior to 2.15.3, and 3.x prior to 3.4.3 encounter an issue when the filesystem loader loads templates for which the name is a user input. It is possible to use the `source` or `include` statement to read arbitrary files from outside the templates' directory when using a namespace like `@somewhere/../some.file`. In such a case, validation is bypassed. Versions 1.44.7, 2.15.3, and 3.4.3 contain a fix for validation of such template names. There are no known workarounds aside from upgrading.\nPrimaryURL: https://avd.aquasec.com/nvd/cve-2022-39261.\nCwe Links: (https://cwe.mitre.org/data/definitions/22.html)",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "CVE-2022-39261",
        "vulnHash": "3377c38d747a51d0da9f2c7155aa362d367c95646acdf522b9cef11ab5d8d0e9",
        "deprecatedHashes": [
          "28c8193065002f7f5af1deed7e1e4fdfb3423fc240e6d28d5f0d71a1263b21fc",
          "64845b86c89eaeaae18794fc89eb756f4fb28906e6f8a1b6d82696ad4f103a8a",
          "f71165064f86eb6fd875b46765f5575937bda596592f4f9dc3f373d854a17d80",
          "260f0a1fa6ae206c17cc582a37efa669c5da2cf0db05cdabba171bc5eaa7bf6d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7e1aa979-89ee-4e14-a8d8-d9f20b9c631a",
        "line": "7175",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\package-lock.json",
        "code": "      \"resolved\": \"https://registry.npmjs.org/jszip/-/jszip-3.6.0.tgz\",\n\tInstalled Version: \"3.6.0\"\n\tUpdate to Version: \"3.8.0\" for fix this issue.",
        "details": "(1/1) * Possible vulnerability detected: loadAsync in JSZip before 3.8.0 allows Directory Traversal via a crafted ZIP archive.\nPrimaryURL: https://avd.aquasec.com/nvd/cve-2022-48285.\nCwe Links: (https://cwe.mitre.org/data/definitions/22.html)",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "CVE-2022-48285",
        "vulnHash": "e0840744c71a63be6990b36b520f7fe12a32df3303779ca6459f2d5a3d987d45",
        "deprecatedHashes": [
          "a1968f15c51cc84c6db02ffb783df9baf2593711dbc01258a4c2f5c1906e2c08",
          "33ac5a594e5f08879156986b324a51b6167a5ead35db88a68cb5422a0ae9713f",
          "7eb48ed2f1ac106bfbb2424e3bba29a81c3d0d40c1b0791e252c722d6b285a7a",
          "ad41b8f3761db76f5ca438febb00d17c6baeadf71dddde18344ec459890b4160"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "36abfd53-e3f1-4f5d-83d4-ce590d1b21e3",
        "line": "1594",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\package-lock.json",
        "code": "        \"minimatch\": \"^3.0.4\",\n\tInstalled Version: \"3.0.4\"\n\tUpdate to Version: \"3.0.5\" for fix this issue.",
        "details": "(1/1) * Possible vulnerability detected: A vulnerability was found in the minimatch package. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the braceExpand function with specific arguments, resulting in a Denial of Service.\nPrimaryURL: https://avd.aquasec.com/nvd/cve-2022-3517.\nCwe Links: (https://cwe.mitre.org/data/definitions/400.html)",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "CVE-2022-3517",
        "vulnHash": "e2ccf05359448f9ec37da1d692f5e8ecdd58bf38c1948a94fcbc1fc45357415d",
        "deprecatedHashes": [
          "c7ca443e285fd59d83c1260f401253de73d94ce37249d8727c46620f58fe264a",
          "3651fa8c6c321337ea05b82472cd7f74ad7ba6626335060cc6080b7d0c03e00e",
          "36a467b0dd5685f67155ad4103a8d133513f115d3c7f3ad8bd4ce589be0e705a",
          "8bd5212c46510c8f402c164869a6ffdf0ce7790f99347f1e606d2a347fa3a6af"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2cbc9a60-9621-4a53-a564-ca05c34761e5",
        "line": "8500",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\package-lock.json",
        "code": "      \"resolved\": \"https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.1.tgz\",\n\tInstalled Version: \"2.6.1\"\n\tUpdate to Version: \"2.6.7, 3.1.1\" for fix this issue.",
        "details": "(1/1) * Possible vulnerability detected: node-fetch is vulnerable to Exposure of Sensitive Information to an Unauthorized Actor\nPrimaryURL: https://avd.aquasec.com/nvd/cve-2022-0235.\nCwe Links: (https://cwe.mitre.org/data/definitions/200.html)",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "CVE-2022-0235",
        "vulnHash": "717d4673fcc599bc52a132720bdb75c3a216c950f5944ee330e4dad65a618899",
        "deprecatedHashes": [
          "e6e63959eff1f803b084b9c4277b072e0080e85e60f3a56a5d322f62c1e70b9e",
          "f171a4238c1121fe86e6abbab834bcb6ab42367bd52492823e009409683047ec",
          "40277f6497547b60f78339f30f1b781bdcbfade0dd9d521b6720d3eb53625762",
          "497cd8aba566d88113cc5dfb8542b3405dc46dcdb1ca9bb940e387c777a9f476"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4aee3439-39ec-424a-89a9-1a9fe26f6338",
        "line": "8585",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\package-lock.json",
        "code": "      \"resolved\": \"https://registry.npmjs.org/nth-check/-/nth-check-1.0.2.tgz\",\n\tInstalled Version: \"1.0.2\"\n\tUpdate to Version: \"2.0.1\" for fix this issue.",
        "details": "(1/1) * Possible vulnerability detected: nth-check is vulnerable to Inefficient Regular Expression Complexity\nPrimaryURL: https://avd.aquasec.com/nvd/cve-2021-3803.",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "CVE-2021-3803",
        "vulnHash": "b797ae921057931b2732e41a73fae905b52b07e980fa858e388122cb81cb419f",
        "deprecatedHashes": [
          "3c467fd01357d8a1af088b957e300e9bc30256a0afc465f564af8d8f742ad5bb",
          "bfb944961fbb174e9e6e4035f312fdb0094e402b7a7b3b20f0a3b0f46fce2bd0",
          "0479c648173bb585c1e42f48bf54362d5c3b191807e9615aea24a140812436e2",
          "2581f3f253887ccbac3efefcf9f88b206e39b5ede94ddef1e7f942f623f82dbf"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "77a2f843-1854-4a01-b470-3121ec4f90a8",
        "line": "2918",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\package-lock.json",
        "code": "        \"nth-check\": \"^2.0.0\"\n\tInstalled Version: \"2.0.0\"\n\tUpdate to Version: \"2.0.1\" for fix this issue.",
        "details": "(1/1) * Possible vulnerability detected: nth-check is vulnerable to Inefficient Regular Expression Complexity\nPrimaryURL: https://avd.aquasec.com/nvd/cve-2021-3803.",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "CVE-2021-3803",
        "vulnHash": "463b5134aa258ca52e3ca8bd75872cbf74be57186c0d4ade8125ec1991b5be24",
        "deprecatedHashes": [
          "3c467fd01357d8a1af088b957e300e9bc30256a0afc465f564af8d8f742ad5bb",
          "bfb944961fbb174e9e6e4035f312fdb0094e402b7a7b3b20f0a3b0f46fce2bd0",
          "cafc20acd0163a34f65af9bb3d19ea779f41c20f2626fb6d6a823c24e439941c",
          "4ef73107845d6b07276ae1ca4219515d8f9830eb2bc820ce3bca007bdccdda7a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "215a5572-db06-4b6b-b3e9-6c0d30c8b7d5",
        "line": "10140",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\package-lock.json",
        "code": "      \"resolved\": \"https://registry.npmjs.org/qs/-/qs-6.5.2.tgz\",\n\tInstalled Version: \"6.5.2\"\n\tUpdate to Version: \"6.2.4, 6.3.3, 6.4.1, 6.5.3, 6.6.1, 6.7.3, 6.8.3, 6.9.7, 6.10.3\" for fix this issue.",
        "details": "(1/1) * Possible vulnerability detected: qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[__proto__]=b\u0026a[__proto__]\u0026a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has \"deps: qs@6.9.7\" in its release description, is not vulnerable).\nPrimaryURL: https://avd.aquasec.com/nvd/cve-2022-24999.\nCwe Links: (https://cwe.mitre.org/data/definitions/1321.html)",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "CVE-2022-24999",
        "vulnHash": "4f1d1b816b1f540c428fe12353afacd4eb040e118320af6eba1597846aa5ab21",
        "deprecatedHashes": [
          "4617ce9be7aa9e5868fa11c0164a421d97a80e025c361cb97fbc0d62e6e90d0a",
          "9a8729e137950622c758b7ddde2cbb3262b27a1c95358826fb8919ac00c47fc8",
          "4816c612b8c1fa980b25da84a062cd77d71d7a929001d7aa88e78c3f57930e6f",
          "4c67bb08f3a2fbf2740453a51422666428030a5fd96ed67594a10c4e4055fdf9"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "83527f67-c7d6-4349-8b81-cc94cc73f908",
        "line": "89",
        "column": "8",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-wide\\js\\parallax-element.js",
        "code": "window.addEventListener(\"load\", function(){",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "5d4b0b6545361c0b9a888c17562fb026f978f0b752fe6d9ac165a60239672e9e",
        "deprecatedHashes": [
          "9a30d5a632f82097b8e5a75aeadeb80923e33119b22f2c2fbe34aaae5373add1",
          "58550985df54f66d1c1090ad03c244c01e1b0549736148a1a989a7caca7ba287"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "108d4ae7-313f-4e31-9fb0-0fdc1458480d",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\froala\\plugins\\lists.min.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "9e34c4cb34451d9346fd9bbbf0932598f337a079ec8cd710b11a4941bd0db1ba",
        "deprecatedHashes": [
          "5ab09ad5cc8d0ae2318639b9452ec313c7ba0f23e99452017011cd5a2a70e122",
          "313297bad27b918a161d32130f97d0e15187cd56167e950a1d950fd0be93825d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1d11299f-3837-4ec3-a3c7-0642fb86ed92",
        "line": "2",
        "column": "8759",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-left\\js\\jquery.min.js",
        "code": ".addEventListener(\"unload\",da,!1):e.attachEvent\u0026\u0026e.attachEvent(\"onunload\",da)),c.attributes=ja(funct",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "5483a942802424911dae138c7e5038958cb173a8b29a3061dc3c039fba4db23a",
        "deprecatedHashes": [
          "e367a2e85abe5dac1765edfb83be8112895ad6c6fffd08bb88da0fc4a0c1992e",
          "c02ffb91344f906cb875655ef7c44923c1c89bdc6d695fc560983b5186228803"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "da54e9d3-cd19-4ed2-a48f-11d8fcaeb3a7",
        "line": "4",
        "column": "6867",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-left\\js\\jquery.min.js",
        "code": ".addEventListener(a,c,!0),W.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "3a5370f018bdb1148238e0bd8ad27dfe780ca409bd6c063d3b781fb0b5f8c4ac",
        "deprecatedHashes": [
          "4822691bd04046c5b68b7bc8bff86066438c367338f82d427beed2298453af68",
          "84f3233a7a5931b1d97fec7be7cd37bba842968c750ffb5f8df9ea19e0c81bca"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "090c8199-6c9d-4d04-9471-a446bc9643ec",
        "line": "2",
        "column": "1910",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-left\\js\\jquery.min.js",
        "code": "Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "462740fa75162cc07858755a9de73302562ec2811df5d8907a2c350656fb5612",
        "deprecatedHashes": [
          "5c481f8c554190d8a4023685a5fed2cc613854deb030c949129e72888c6e7205",
          "247944f0649e8416b6330047422f65152baf9c349625b669035c4c5a276fdae4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5cd8cb69-540e-47b6-928f-5bec09f8df9d",
        "line": "2",
        "column": "21569",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-left\\js\\jquery.min.js",
        "code": "Math.random()||.1,z=x.length;for(k\u0026\u0026(j=g===n||g||k);s!==z\u0026\u0026null!=(l=x[s]);s++){if(e\u0026\u0026l){o=0,g||l.own",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "3f6183b7d884d2c3a3d9c33286e540a5e6abace64316e867a6beae6b8e5b419c",
        "deprecatedHashes": [
          "d114e23b3df2a5e11f834643b2b37cb7beb57b14e0ac72b00df93be73ef8c73c",
          "83d97057bab4a8547152c534a7d1d8af7ac6ac976ae75348db6380103aeacc24"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "20920def-1042-407c-a55f-d658b55fc920",
        "line": "82",
        "column": "60",
        "confidence": "MEDIUM",
        "file": "media\\js\\mautic-form-src.js",
        "code": "document.querySelector(current.data.element).addEventListener(\"click\", function(){",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "2c18cf4c8da1b118870b0039cf2c360fe3c8ad41eef2ce3a6e5e7edee61557c4",
        "deprecatedHashes": [
          "b88d82ba7f85d1210048877803d02588db14a15f61444433cc5461ff326a9296",
          "5205f892e2601d5585ec736bbe1360ec0276d8514d7c12e368d4700e8f51f133"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6d9a9586-6c07-4784-ae6c-2061fa6554bd",
        "line": "882",
        "column": "22",
        "confidence": "MEDIUM",
        "file": "media\\js\\mautic-form-src.js",
        "code": "this.modal.addEventListener(this.transitionSelect(), function() {",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "18a38eb5d7085d01aade76d8d58fea188ca24a245726874ce76ab200ad0e9355",
        "deprecatedHashes": [
          "557e7e95e2c3f5eea9b4e2e1f360060d6b0532d44be2292cf5bc1ee73200c18a",
          "4d08625ef9228d81eb6f419caeef99f13350584a9940ee71dc6868babedda377"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "67a36bf8-3242-48cb-802e-5ba41a7266eb",
        "line": "708",
        "column": "28",
        "confidence": "HIGH",
        "file": "media\\js\\mautic-form-src.js",
        "code": "alert(message);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "52b9346ad607cef80679787cc22f8e3028c7dd582f31c3b73c6787b516483bfb",
        "deprecatedHashes": [
          "27365335aaeef3baffd8047fd0290516482fd9df6b25a486bf2a4f06237efa98",
          "34c7729a1b5cecdd8adcb8b97d15675e181f563a897c9833addd10826f027e93"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3d26053c-0a4d-4466-9fef-2afc6876cc7c",
        "line": "4",
        "column": "335",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\mautic-form.js",
        "code": ".addEventListener(\"click\",function(){if(Core.debug())console.log('add event to '+current.data.elemen",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "2667acdaebfb6c3855f45cbe13469d76395fcdcb1f2e80b6e4da6e43c7ac5d34",
        "deprecatedHashes": [
          "4e2c4e3b6c27fb706eab7726e779c16ff6c6db2676d9c95b1202d36ffc82f108",
          "6c244d72eab6ece52c7649908639f0adc8b9ef3858193d7948a2a30cd154444a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f61d209d-f405-42f2-b4c6-6a12b139ccae",
        "line": "37",
        "column": "1218",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\mautic-form.js",
        "code": ".addEventListener('message',function(event){if(Core.debug())console.log(event);if(MauticDomain.index",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "6f28cf28eb475d82d9293b0645aa2d6f7c761615485a3916a4052dd06c67d46b",
        "deprecatedHashes": [
          "856a49e6652506d76f9b3cbea359a5d5b940f7c016110c4795bc53c7e3ecd5cd",
          "44f7e6d92e457108965fee162ecb0372f092ab54e14445c1abdb2f440080b91f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "61fddcd8-46b4-4676-b627-3fa32d5fb0b4",
        "line": "37",
        "column": "340",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\mautic-form.js",
        "code": "alert(message);}}},resetForm:function(){this.clearErrors();Form.switchPage(document.getElementById('",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "cbb2e7335adb8ee7bbbfc14482fb0282f11309c5404e08fa56268478026828c3",
        "deprecatedHashes": [
          "78494bfbdc6b2d9ad2ac8bda427da7d12a48ce8b8e8aa6e66ebe234a320d9d1f",
          "b8855e14bf99afa5a9e3b74742ae9daca1ea75a536aeb301768695180be73e41"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6166dda6-ef6e-4279-9122-0c4dc8cec5ed",
        "line": "89",
        "column": "8",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-fixed\\js\\parallax-element.js",
        "code": "window.addEventListener(\"load\", function(){",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "877348d949b69b07dc803979261844b53086ae6dc1819eb2f9353522abe8c980",
        "deprecatedHashes": [
          "e55d828fb46257ede3e014377c8702e660f1bd90df2d225c6cebed32df4aa62f",
          "a8578d01ba02f7076b0d570357c5f692d59da1ba626917fe6eb63cdf115219b6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4dfe9385-e828-4eba-b668-8def01b50e85",
        "line": "183",
        "column": "24",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\9.html5notifications.js",
        "code": "notification.addEventListener(\"show\", function () {",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "d2bc7f10c09ddf663d25abd2201d6d0c704fb77f95f21d4c9243a0ff4fbf1ab8",
        "deprecatedHashes": [
          "61aab8c1b84de205d40748a2fca829c2ea9d489f05dc8a1e7e72e53fee6c12a7",
          "cbdd905637606aaefee547122a0c9c25fbeb399b5126c2a2c78f71fe5f914367"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a774387a-1800-4f12-a885-724506a32131",
        "line": "50",
        "column": "37",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\9.html5notifications.js",
        "code": "ieVerification = Math.floor((Math.random() * 10) + 1),",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "1f96bc4e3c24aeb9f82c2e7ae33045131b0eacc7355a21c0be84bd170f506bf8",
        "deprecatedHashes": [
          "f685c163e19cc0908cdcacd422cf27736c9fa156ad88d9069118cc325d7f58c5",
          "32ed0b04f3fc5b1fcc509a89c369ad3a5f6d82f08026be32dbd38f4636ae44e6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0cfb9c6c-17a5-4ca5-8439-322c1877c399",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\8.shuffle.js",
        "code": "",
        "details": "(1/2) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.\n         \n(2/2) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "71b45fb076580a6556823b84930af3b0fb83769a601e4a646abea7c2f345bf9e",
        "deprecatedHashes": [
          "58c9f02e959e2cd71d1aeedf52bd802bb470daef20b89b9f3b927992f4f086cc",
          "2fef268d8e44cdfce4bf92777146e7c7b028a219c7f568a883b94a3ce802f94f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8fb1167d-0b7f-49f0-8d59-197c6dbf66d9",
        "line": "557",
        "column": "27",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\EmailBundle\\Assets\\js\\email.js",
        "code": "var selectedOption  = mQuery('option[data-mautic=\"available_' + selectedFilter + '\"]').first();",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "d6a881e7e80d8af9023f28402674ddaf1d4b8026ea2d7b258e1c69a01c4e6fc2",
        "deprecatedHashes": [
          "b1dc226d7a1a6c97d76dc1dd241a9993cb57ca1efaa49430445cec5c8b1feb11",
          "fc46741d40bd5509e57115524de9c41e8d4ada60f91e723684947aa2c2c85283"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5188c0a7-6249-4e7a-ab9c-bfa194b721d1",
        "line": "7",
        "column": "197",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\wsc\\dialogs\\wsc.js",
        "code": ".postMessage(a,\"*\")},unbindHandler:function(a){window.removeEventListener?window.removeEventListener",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "e1d95354c4c2d02db581d2b4b1d7adf8e88705251a698108da1701bc3122986b",
        "deprecatedHashes": [
          "c7e56a1ab511c23987c6569d2726658f48eb952bedf9f7ec9d2109f849fc6e30",
          "c3e025144f1347bfeb5d1d983380d6c85d82ff6681b61e9b6c54dede201d0462"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e83a8d65-17af-4e37-b457-d3954fc8dd23",
        "line": "6",
        "column": "385",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\wsc\\dialogs\\wsc.js",
        "code": ".addEventListener(\"message\",a,!1):window.attachEvent(\"onmessage\",a)},send:function(a){var b=Object.p",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "384a79bc7f6565a989c50d4fe119acb566252f3f0a119e5b118ea3e1ecc94603",
        "deprecatedHashes": [
          "aa4caab29ea55c4ebb11d83a7d982a93ea9d3f009757322223a1f0f77eee66ab",
          "53f4bff368493ce550ca425c1909cba22c11f026c0aa9931dd75daec1148e82c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ade621f8-e0cc-4c13-8908-7139b0d621ba",
        "line": "62",
        "column": "125",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\wsc\\dialogs\\wsc.js",
        "code": "alert(\"WSC: Options functionality is disabled when runing from file system\"):(z=document.activeEleme",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "6f88142f3af5771a97917fbdf52cb42e84ea0ec24f2c7f160064217c6b1b58fa",
        "deprecatedHashes": [
          "0529877bccbef8d8c1be2e2341628aff79f2d2eaeff9ae27f72386dd7154e433",
          "7aeb247b72032883540ffc2896618d3055640316d690cad7b86570994e604b87"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e3be7ed8-6f12-4732-9653-f721b07eaee5",
        "line": "64",
        "column": "143",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\wsc\\dialogs\\wsc.js",
        "code": "alert(\"WSC: Options functionality is disabled when runing from file system\"):(z=document.activeEleme",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "4ddb9f0bd9583a9f457c21bb03ca86f7553b095131a832fb98b5bba19d4f23d7",
        "deprecatedHashes": [
          "4802138c643ce45b1f60bcc242371259239afb00d49d943860a1783eac0722bb",
          "3a5baa7c3f464cd0321f94db93807359464fdccb9f3efea6c48d5182e4ff724a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "14d882b5-356d-498e-9347-f377d893d33e",
        "line": "147",
        "column": "58",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\3.bootstrap.js",
        "code": "if (!data) $this.data('bs.alert', (data = new Alert(this)))",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "5e33b97a517fa72d053e664dbef5a5e4696b3f66ae72bd2f6fad9374c60fb4d1",
        "deprecatedHashes": [
          "85ba1cc1caba675f5c63629f590a29e2973436318aa91bdfb255d736e3baac36",
          "edc5b216ac8347f7eba8118ca46fb845d3c04dcdb568b06e6dacd37bedff0631"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0bdf6569-8c9c-42b3-b260-c7958eb1851e",
        "line": "1681",
        "column": "24",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\3.bootstrap.js",
        "code": "do prefix += ~~(Math.random() * 1000000)",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "fba8e8eabd31921a89f0124d6615d74ba68310dea6540d28ba6ac084712e1d45",
        "deprecatedHashes": [
          "fc0196684428e3741c8bd83a735100ec185b4f2f84934c51cfd02d1c457a0178",
          "63444b9f4923f626c91511842a192c1eaf8a463aa289c387bf78857019ca0481"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f31cf3d3-3e99-46d0-9d13-df221dd31972",
        "line": "82",
        "column": "60",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\mautic-form-src.js",
        "code": "document.querySelector(current.data.element).addEventListener(\"click\", function(){",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "3f479b862a5aa397ebc357651613b70a3fab54a08195dca37c939b6b8d54cfd1",
        "deprecatedHashes": [
          "0cbfc2cf52363bf6864a55dea537f61121ec3b6fe24576395cc85c6d3d56953d",
          "5afbf5ce1076773d280220f378cc4a5ad13b159d5647380e05abd92b55cd562b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "46cbd1c1-748b-4557-aeff-c178cc87bedf",
        "line": "882",
        "column": "22",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\mautic-form-src.js",
        "code": "this.modal.addEventListener(this.transitionSelect(), function() {",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "905ae0f3edb7539581b4a4a94451b74967ba3948627f788c1a5eea55b496aff1",
        "deprecatedHashes": [
          "50350d6f231115c49aec4add6fada9a2cc351a4d3e003f8f265076e9259622ba",
          "b85503f6598a956b123044b1f6e30f5e1bcf68bb28640d6d3d55b02879df7007"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2cc1929d-589c-40b8-9c6d-a155ea284aef",
        "line": "708",
        "column": "28",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\mautic-form-src.js",
        "code": "alert(message);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "848968d6eab041304f8595298d8f704e528796d2af2cd647936ec407c56f3993",
        "deprecatedHashes": [
          "68ed1acd9ab71da301b32055a357a82c2a83e308020be38d75b034349977060b",
          "1e5c4278287003b9ebba0228b3769465032bec46111fb281bde716910b3094f0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2c866dd1-4736-4165-9b33-1673bdab4fb2",
        "line": "98",
        "column": "13",
        "confidence": "HIGH",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\codeMode\\codeEditor.js",
        "code": "window.alert(`${Mautic.translate('grapesjsbuilder.sourceSyntaxError')} \\n${e.message}`);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "9fe97e6d8cc4a7280965afec1e3237e2f10c0441a02b0cae893eb63658207616",
        "deprecatedHashes": [
          "e81e61bc7e651e14ed32e2fee36c5db4ce7ace8c8321e5a4935320ec5296ca0f",
          "ec1336c3f60d0f5f951f5cfb6a67410fa7b023727a7ae9478bec80038eff9eaf"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "204d5d60-d396-44ac-a4cd-b4f8f96eb751",
        "line": "2",
        "column": "8759",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-wide\\js\\jquery.min.js",
        "code": ".addEventListener(\"unload\",da,!1):e.attachEvent\u0026\u0026e.attachEvent(\"onunload\",da)),c.attributes=ja(funct",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "65840705e4ca7ce87b6942810924a06a3ce5284c1fe3cab48504acf8b05b0eeb",
        "deprecatedHashes": [
          "f5fdb5efa418da47d835e48a0d472b108852a1b89dcedb5c9da72ff101f328cf",
          "fc2c0e610c499dff50d04b9005b3fed53b8e2a686191c15434bc3c83591ec190"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d64251cb-fe4d-489d-91c8-189bfde73f9e",
        "line": "4",
        "column": "6867",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-wide\\js\\jquery.min.js",
        "code": ".addEventListener(a,c,!0),W.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "c078342433486b600cc373f728aab6c43c9ea264098d172654a0bcab90beae55",
        "deprecatedHashes": [
          "8a54b09fd039afab2484164dd97e591b493811fab23d3cbaf9edca3a4ac37865",
          "9c0f7ad014d176de30d3d178aaef587e4958d4c810e3544bbb1bc6e06dc53a2e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "253be766-6ad2-4776-ac34-baa777b4962f",
        "line": "2",
        "column": "1910",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-wide\\js\\jquery.min.js",
        "code": "Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "00f926804e5d74c8153d01eb891863bb37f71a7c75715634233add3f410df702",
        "deprecatedHashes": [
          "01970ba4f304889929c604f59028335e5bd0f7be85fcc8f3fd3363b4019f33b7",
          "37c022507e6738f13a6453f815631b920d276562e7c110a013f4ffe7b7aa9cb3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4d6bb55c-de70-4d47-aff8-b18bfa640237",
        "line": "2",
        "column": "21569",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-wide\\js\\jquery.min.js",
        "code": "Math.random()||.1,z=x.length;for(k\u0026\u0026(j=g===n||g||k);s!==z\u0026\u0026null!=(l=x[s]);s++){if(e\u0026\u0026l){o=0,g||l.own",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "0ce750e4e9fbccdfd8f462f13962143a1d1bd6e763a2cc0af3a3cbec82dd02a4",
        "deprecatedHashes": [
          "c881295c116ced9af8dfd6677908c0a68afcab69c29c5e140954d1524f6ad7d0",
          "cea91ad7114f8dcf2f65c4cf171f9eab4f6168a777be6e0342fa174a6041b792"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e88912df-6be6-4208-858c-7f1d35be820d",
        "line": "403",
        "column": "34",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\4b.jquery.form.js",
        "code": "xhr.upload.addEventListener('progress', function(event) {",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "f23b1944a140bf989c40ffa1e457a912dc22d649701fc043509ecae9e02fdd0b",
        "deprecatedHashes": [
          "60a2009c945830a71b3a3f3b7ae2bc85b48cdd044fa3798d28184a2d787c9ef5",
          "f66f2e0f50854f13b65bfdb0f7334b40737b8e9641c9f780bcfff779793d5873"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7b7d0cb6-5821-48c7-a34f-fb2179170f12",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\froala\\plugins\\video.min.js",
        "code": "",
        "details": "(1/2) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.\n         \n(2/2) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "8f4d70d3f47b8d35bd17c135c378a7f08443ed15b0ca0cc670b63a0c565f848e",
        "deprecatedHashes": [
          "1759a616a3e3366d72f28b441809a1cc6785460f506dded0f88726a089e8d0f4",
          "5c62de406b708c5f6586fc71ba4eab4f38411993cffffaf9e9009352cbd5667b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a8540854-b9c4-473e-8a88-d28d5e671184",
        "line": "4",
        "column": "408",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\wsc\\plugin.js",
        "code": "alert(\"Nothing to check!\")},toolbar:\"spellchecker,10\"});CKEDITOR.dialog.add(\"checkspell\",this.path+",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "a8fa2b9f7a851b3b3eb836455954f4d74f8f5e6f4ddedff28a6cabbca976b01c",
        "deprecatedHashes": [
          "b1910ec41a02b76ae97a795926d788d1dc3842029576aee60bf8c197dd68bad0",
          "69dc06dc932657fb7a7f3cd7b91b514a4fac106690e80b63cd242f74d7d79e63"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6707157d-4270-4892-a759-2d83cf3cfe57",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\froala\\plugins\\draggable.min.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "4c787c0804ae877e8e68b1e5f8bb8aa8fc74ed34c2d7651243fea7918b4ea621",
        "deprecatedHashes": [
          "510ffa8553d1eb0909359b184cde61d27ef6f5fdfe5600ac8b13c4cb77668677",
          "5e09e5310b8b6a52b436665d4575f945a2c9a8126289a9d225bf82da4e3a3333"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0d760a33-6857-4df1-89b7-67bbb4d419de",
        "line": "89",
        "column": "8",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-left\\js\\parallax-element.js",
        "code": "window.addEventListener(\"load\", function(){",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "97f4502405200575b260301f1e5f969c5ed95d63bf78e9d8dcafa382cac6147e",
        "deprecatedHashes": [
          "6c80e49d14cd5c70c13abe96233255230a44193a1f4807931aaa9e101bc1da02",
          "e739ace1d554d40d54e35964867bbcf88edbf6e95c51db4058ab19599e38c792"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "983d3249-40d5-4398-9a01-5b4a811014c1",
        "line": "347",
        "column": "20",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\1.core.js",
        "code": "alert(mauticLang.popupBlockerMessage);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "c0f6da75d89031a9007af5c63cd4c767be401c9d0cc74faea6c5c1e5319209a9",
        "deprecatedHashes": [
          "e8a91d6e1c738ec57b15f23e402b1a1f992a5fdac4beaa7afe710ecaaae9decd",
          "e6de67a7d70c6843c7001f44cfcda0c5673005ef9f8714e9bc93fd51ed8d1dd3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "369cf19f-041d-4a9e-aab3-8cdce42e5327",
        "line": "634",
        "column": "20",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\1.core.js",
        "code": "alert(response.errors[0].message);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "cd2a69e0e33bf115125ff918ec48d00377d5248be2a12585103b6aefd95a1baa",
        "deprecatedHashes": [
          "95d61f70fac38efe1032a37bde13cccad0c4344e80ab4e5bcff28a0ddb8c9948",
          "4b259a8e68bb5c7f9cdbff80b60c3b61819bce9abde5afc30e90964e71c92940"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "050d81cc-5174-43ed-914e-b8de198cee88",
        "line": "0",
        "column": "0",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\link\\dialogs\\anchor.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "89f21ab2bfdbadd1f14f388320b3542fa7085589f0f0f99b2aa45ac1701caa44",
        "deprecatedHashes": [
          "395dbff2b57bb81fb6fc6cc5573c2103fab87da32f0655053a13e11c4b069b9c",
          "cf749afe14c1e0979881edb80e212326da86da32f9dd5c99819a74659c4fff6b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "bd499c51-c39b-4503-8115-21f290070b87",
        "line": "0",
        "column": "0",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\froala\\plugins\\image_manager.min.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "39b1873d7c10c5eae90ca033d68a5c4dde03479631faf70e1e28fadba3849992",
        "deprecatedHashes": [
          "86beb152de92a43c8736ded38b328be917b64c04636e34235e2738b786470447",
          "eca0b14c2cbc0fa357dbd9ee0eef13856db48a816a78e741082a2ad9b4e816f9"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8e527f36-7902-47e9-a7b6-9071283f1e7d",
        "line": "563",
        "column": "10",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\froala\\plugins\\image_manager.js",
        "code": "if (confirm(message)) {",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "bcc213c08e64432e111a1c2ff8160163184e5427a2a73d7fae49e80ba3a6440c",
        "deprecatedHashes": [
          "a574f663cd678762eb7660c1eaf474b168b51369c1aab0828df89c358fa55791",
          "50321d9bd8916c8bb2ec0971f5ce3243ee1ada14dc315ab1f2f8b3d94c174ee0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f704e503-2d78-4eb3-81d3-f2341b1c9cf9",
        "line": "225",
        "column": "12",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\1a.content.js",
        "code": "alert(response.errors[0].message);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "8d573158bea8b6d6d879ba5828dd05c2915081a3d15d7ac7ee1fb5ea62e67b04",
        "deprecatedHashes": [
          "caaa959c886f55dbdd090b5f15f6fc2a0e172c5709077969a5785233deb4e3bd",
          "f7424651d06e75af5185449ba88bedc1ece87b0bed3bf10ffb12bfb5ac1c9835"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "63c8cfbf-b090-49cd-be63-d0b05ee0a347",
        "line": "186",
        "column": "12",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\9.modals.js",
        "code": "alert(response.errors[0].message);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "f0fdfb8f29d5fa6184fd642e419ea0745f20cec6f588380d592177ed15dd8543",
        "deprecatedHashes": [
          "8f36cb131e215d894165b8c41e5c3262064402f2c5a59f2db1490af1cbb48853",
          "88b6e143c0c87e1c1018d8906cdda6d3b764b1fa4f9dc2a1bb618bbc64f5ffef"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4bc5dfea-2348-4c6a-891f-d82f36eebd8b",
        "line": "188",
        "column": "12",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\9.modals.js",
        "code": "alert(response.error.message);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "ff17bf5e6e9376b4dcfb8e334debd79f79fb05626d9b7e78106bec8c47d184cc",
        "deprecatedHashes": [
          "c8ad5defd12006f8c10a47c76e8e92d66b1b568b5c3a6be555acf1257a196802",
          "790961aa172265563a7d66a347467c10edb0891f5d202694eba5430fec9d9e12"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "12bbefb4-703f-4bc5-aad5-1681ba473b77",
        "line": "190",
        "column": "12",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\9.modals.js",
        "code": "alert(response.error);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "f092db5f617b5c988531a1f9e4dad27e5b6b5198cd7acccca8b2bdaa9e88dc45",
        "deprecatedHashes": [
          "726071d347580114fd1505684f03f7d0242da278ec09499b942ea42858e7e6cd",
          "09b60cfa3cd808adc1b44aaa7f76a4b23d3289017f75d32c35136ff1493c3f3c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "46a3daa1-78d1-436a-bcf8-d74633aa8e87",
        "line": "272",
        "column": "15",
        "confidence": "HIGH",
        "file": "app\\bundles\\DashboardBundle\\Assets\\js\\dashboard.js",
        "code": "var name = prompt(text, \"\");",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "b32691c99fcf035ac4884fb27f084243ac8aefb7663f18bd6561aa61f4c89a9c",
        "deprecatedHashes": [
          "fa57154a5d6042a6590dfc61ee5dc5020d157008190001a089a1ef508698b021",
          "ab9ca3ef74acb625a716be26bd916cd43acc4d8a5cd4892d7e007c8bef641013"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a1ebaaae-bba7-4ebc-8cd5-46e8198c4fe9",
        "line": "284",
        "column": "15",
        "confidence": "HIGH",
        "file": "app\\bundles\\DashboardBundle\\Assets\\js\\dashboard.js",
        "code": "var name = prompt(text, \"\");",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "69826adb7766728e3309b47c700ba8a1ad92a20439fd29335e47d113507690b1",
        "deprecatedHashes": [
          "3baec98f31eefa5eb3e7d4025ae9e3a2aa2194f589ee5fc6d85e0dee9d5052df",
          "98d897f04aa7dc5b96adb0db142a9dc9ddbfd571e89c5d77247ffc2ddd22e31f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "73d83063-cb4a-4f67-8619-d97df4845115",
        "line": "1487",
        "column": "16",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\2a.jquery.history.js",
        "code": "alert(message);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "3ee5916d5963133d27b89b04924bbd3679c9c43fa02dd788e15517c33dee21d3",
        "deprecatedHashes": [
          "03bc9097803deb89724081d094c525bbaf7943f0d44947cb056f998ca2ce214c",
          "f53b92ac96b302d4be979b3d3b7fcfcc8909467abd55158fc6c182c105932c70"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "35f4cbeb-b026-4fec-8b1d-6674ac1e9203",
        "line": "1953",
        "column": "61",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\2a.jquery.history.js",
        "code": "id = (new Date()).getTime() + String(Math.random()).replace(/\\D/g, '');",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "5a46f07e5d216afd8eb84d551ad015749695c2d56edf5e16e6838c21ab2c2a15",
        "deprecatedHashes": [
          "43f0b954c195273652c0b2fef508b3bb7aea8dbf604c9337371a33faf7393e30",
          "a0480042614a03db2627fe4b25fd6e7720d250e82b81bc0eb673f70aeed24e35"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ebb56b49-5366-44a4-a149-3a6fca953824",
        "line": "404",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\LeadBundle\\Assets\\js\\lead.js",
        "code": "var fieldType = mQuery(selector + '_type').val();",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "ff77e8cb3c985b0d45d071ff30f803f60936e2e05480cd1d4d36041053a90b4d",
        "deprecatedHashes": [
          "e69e7a860312b88997b337b426eba1a456279993c139ce8eb334936fe88318cd",
          "969f9d639610aefd072522dd0185e679c7ee7519eca9a5af6b1680e2c471b2f1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6192131f-1527-4c8f-807c-bb2ba81b15f8",
        "line": "405",
        "column": "26",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\LeadBundle\\Assets\\js\\lead.js",
        "code": "var fieldAlias = mQuery(selector + '_field').val();",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "f5dcacb131e8ca144ff30ddb55ee8edc2afef44a77e2d5f5e9b2c179ba31253a",
        "deprecatedHashes": [
          "7e37f97b2d0a9e020512da2b515000ddde5183b109d2ca4a731296a40c2375fb",
          "6071e5c615fc28b4a3ede40ae3a1d15972e87e9d9c5e60c9fd6736256afa451d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "503476de-b6bf-456e-bd73-cae2ae294b90",
        "line": "406",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\LeadBundle\\Assets\\js\\lead.js",
        "code": "var filterFieldEl = mQuery(selector + '_properties_filter');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "5587cdd5408ebf310f2a454654958bf69f7897457a80094a17057a5f47bd5273",
        "deprecatedHashes": [
          "e661ad5abf00086aaf4b600dc2ab4abe597bfb7c9890032a808ad6b8d36597eb",
          "3dd9647f788fbecddd5f9d22f994943a67cd6f631a9b313da6a01799bdf1e741"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "02f0e35f-f407-4b4f-b83b-b83f98524b08",
        "line": "448",
        "column": "34",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\LeadBundle\\Assets\\js\\lead.js",
        "code": "var displayFieldEl = mQuery(selector + '_properties_display');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "79a9ec74c53773bd856e6700e9f048ab5abcae44936d609695e3c1e48a49e723",
        "deprecatedHashes": [
          "d45311327ac1bfea5b4af128eea1ed79f1453343e4aca2599c16760f6332b3d9",
          "c644d94406818556dc54e1c8c6d93ba5faf2292bd496374842ad98eb351681c2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "82c5ce1e-f9ce-4995-9438-44e715821460",
        "line": "537",
        "column": "9",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\LeadBundle\\Assets\\js\\lead.js",
        "code": "mQuery(selector+'_properties').html(propertiesFields);",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "5d1cbe5e40c6a725dc547194eb2a28b246c58707e070cd8b20178c140b1b5ae0",
        "deprecatedHashes": [
          "1f138cbffd0fce2d4018115b890b86502de7c1abcf8d988ba4fc6d14d96bef31",
          "e05dde970320e706c018b5c7d32300e184f6d211f441c08e70dfd296a919ad36"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d551aa4b-d46c-4e27-b315-73cc00c80ef1",
        "line": "4",
        "column": "335",
        "confidence": "MEDIUM",
        "file": "media\\js\\mautic-form.js",
        "code": ".addEventListener(\"click\",function(){if(Core.debug())console.log('add event to '+current.data.elemen",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "2c0aa270e57ce8cc4be4c40cae96b677413ee337a543885077878dc91e04e909",
        "deprecatedHashes": [
          "c6a5024ba6087d6cda855cf8ab8f4e5a29219b6829e631820b81169dea68ee5f",
          "ed9e12bf2c2b8a507946f15799c755f9bd4d810efc17816a70c74fcbb4ab08db"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "228962a2-3746-4ce2-bbd7-b741bc509de5",
        "line": "45",
        "column": "1245",
        "confidence": "MEDIUM",
        "file": "media\\js\\mautic-form.js",
        "code": ".addEventListener('message',function(event){if(Core.debug())console.log(event);if(MauticDomain.index",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "e5bf6ee516c2d2b772160d6b91336d740a1f0c34f4d1ce5624370a377b9f681b",
        "deprecatedHashes": [
          "693b679923c93a92761b5d1d822d3a44b2e7ccdff5545c382e07eebf7982499f",
          "1f963efc92c2a3221da8f07738f383b4633aba8bf66c5e98828118a0316ccc88"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fe4c9b8c-6dab-4565-9eb4-3d9950b9d400",
        "line": "45",
        "column": "340",
        "confidence": "HIGH",
        "file": "media\\js\\mautic-form.js",
        "code": "alert(message);}}},resetForm:function(){this.clearErrors();Form.switchPage(document.getElementById('",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "9a4a3e9c0d0f9f1983f6591b3d089067465f3035b8c93ac41183d6b4810145ef",
        "deprecatedHashes": [
          "1f58db605d0c99f0c97330c14429f6fe9a5f3ef80d032b373a209ec6b35f8c0f",
          "5ffd36b36e103db30c06399c02c95b4da56193ae1976b16f229549a012a72d60"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0ece2495-d0fe-48cf-a4dd-67d624dfa46a",
        "line": "410",
        "column": "8",
        "confidence": "HIGH",
        "file": "plugins\\MauticFocusBundle\\Assets\\js\\focus.js",
        "code": "alert(err.toString());",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "030ba9feda983d3e14fb4ad4b51abfc021a2451474a07dd4e6f90f5fbcb0875e",
        "deprecatedHashes": [
          "95be0b31e3127c9b117dee8ffe7039303f23018b13473183a877309e434c7cc0",
          "86b2caecb13ede47b060aa9b70d0b19a6b654e1adc780d02bdca9f0bd906847d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d3743d14-959e-4312-9c43-c22d165d4e7b",
        "line": "89",
        "column": "8",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-center\\js\\parallax-element.js",
        "code": "window.addEventListener(\"load\", function(){",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "71fc60a6be650bcaa29cd493f7aa4515e36a5fdc89de4b71522b7f518c5a4620",
        "deprecatedHashes": [
          "d85ab903be5c74ce1f7c5edd0c502c97da44e61fb6568f0b8588c80c53716d31",
          "b9ae9d86de7de0695ede1aeb66aa9684990eb91b39db43fadba9250b52bdc3ed"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6cc3c7f6-cfda-4500-a112-903724881aff",
        "line": "44",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": "-running-checks-status]').html('\u003cspan class=\"hidden-xs\"\u003e' + response.stepStatus + '\u003c/span\u003e');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "7544e0704dddbbde3f25d14879dd67446c1659e0ba96fa130e4f34d82ab5646f",
        "deprecatedHashes": [
          "9287823e966c0994dacd1984ec4347e0ff35be2348078e76219d0d6d15278ca1",
          "8a9c124e7b144bfc1fa0c371dfe0a6b734ffcabaf2e9ec533acdad943982a67e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5a316f4f-5aa0-47ad-85ff-4756db1da30b",
        "line": "48",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": "append('\u003ctr\u003e\u003ctd\u003e' + response.nextStep + '\u003c/td\u003e\u003ctd id=\"update-step-downloading-status\"\u003e\u003cspan class=\"h",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "5eff8f2d464a2671075c5b846d3f9d3f664043f3702187d7565a975cfe139255",
        "deprecatedHashes": [
          "4b2236bb9c3c84207fc44e74ad3c07521b8b7391c0af473b9ef48c103258b80a",
          "be02ea86a4af13b161fa0cd4ec7da906fb8b099b14923fd932f5b72988459de4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5430d791-7d3c-4997-8f95-6cf257d6a218",
        "line": "79",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": "-downloading-status]').html('\u003cspan class=\"hidden-xs\"\u003e' + response.stepStatus + '\u003c/span\u003e');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "2f001b8106a9d72ada5e3550afa3e4e91e6b3bc81c138f2a0d9f80d9bf8b4f34",
        "deprecatedHashes": [
          "2b89d6c95e3d2876c16a2b8eab40e739574eb293e0f48a12e27ba8b37de8d710",
          "55e8de7af90ce6dfe1a858abaebe579535321ef5bc81fff7ff787ffff42bb753"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0bc9ba4e-bc52-489d-b049-075e81ce71b8",
        "line": "83",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": "append('\u003ctr\u003e\u003ctd\u003e' + response.nextStep + '\u003c/td\u003e\u003ctd id=\"update-step-extracting-status\"\u003e\u003cspan class=\"hi",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "d7d74e485eb6ea81c994157f94961f2e6a11582a5dcd257593e8a41c7f52980f",
        "deprecatedHashes": [
          "37c5391324bf711ab1e6e91766b73cc37d60e4b0ec995fa9ee94bbe57f9aa3df",
          "adcfb7d1201e4202ef646b38c92f10960cbeb4dad42f246582413452bd9889c6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f06d52ec-7581-4c28-acb3-0823a3d29efa",
        "line": "88",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": " div.panel-body').prepend('\u003cdiv class=\"alert alert-danger\"\u003e' + response.message + '\u003c/div\u003e');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "23b80148a4720c7ff2196d4b57667488b831a3e19eb763c0bad9c6b16a2b959f",
        "deprecatedHashes": [
          "1c2b70ac41e04cfc64c381fc1f028f6eb4efbcbbded7e69795c93c573605a619",
          "a60715f209c89a8538ed12e20e0cbe596ed399af7db292601b7e6053f009cc48"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f112e699-1bc6-4cfd-9907-7379b90f1af7",
        "line": "108",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": "-extracting-status]').html('\u003cspan class=\"hidden-xs\"\u003e' + response.stepStatus + '\u003c/span\u003e');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "69d927c371703cdbe46da7751cc5faf9c3a2afdce577d11f3343fe83646bcc38",
        "deprecatedHashes": [
          "5a8a9a67917796d33ef9c0877e29815743d5a35e29fa83eeb73298e2d8275da6",
          "0ada191ddb7e5e21afc469bebf8dff5c7e344b6bf2310d814e48f72dca02bf4a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c4720cfa-49ae-4f35-8804-285a817ba381",
        "line": "112",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": "append('\u003ctr\u003e\u003ctd\u003e' + response.nextStep + '\u003c/td\u003e\u003ctd id=\"update-step-moving-status\"\u003e\u003cspan class=\"hidden",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "e1affc87f9d48c749e0d5e6634284eb07c1cc23b3977af2dc40f51502198f01f",
        "deprecatedHashes": [
          "3068e851eb09b04e5750501894239e3f1b2b09043980532db6eaaa03593e7bd5",
          "8e5b57eccdc9f280cd99022ab2f02247d83455ec77b0f60801419b317efb963f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5e57218d-09f3-4d1d-ac55-efdd4f90a9ca",
        "line": "117",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": " div.panel-body').prepend('\u003cdiv class=\"alert alert-danger\"\u003e' + response.message + '\u003c/div\u003e');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "5b56f8c7f742a3394e9b55e329fb7e7a9ef2a7140529186c95a65ebc3ada4bbe",
        "deprecatedHashes": [
          "5debede880b90209ecbebd5a4f4eb442aecc3268aef49a2e49880482844530a3",
          "a9302f0aa077654d93e5a21c1aedca48384e735870d8fc800214bb8da33e3a68"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "91106fcc-c93c-42ab-ac7d-de494382c386",
        "line": "137",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": "-moving-status]').html('\u003cspan class=\"hidden-xs\"\u003e' + response.stepStatus + '\u003c/span\u003e');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "e53cce4a3367bd42d26aed1d34f754840dadd94f407526e7c9f16df6cffbe7a0",
        "deprecatedHashes": [
          "2378369d7335a85d561a2fe207cd3e5322f9ece3e7227c6b8323677e5c945949",
          "c9b324b6f10689ca6d21e5110424bb2432c56fdf34be9a8395692147db82f3e8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "08b81a1b-2c7a-42fb-ac31-005d6178e6c6",
        "line": "143",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": " div.panel-body').prepend('\u003cdiv class=\"alert alert-danger\"\u003e' + response.message + '\u003c/div\u003e');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "f6ba82a40ea725969953bcb18a3759ed7acdf0c0ef414232858ec9ae3f11e1c0",
        "deprecatedHashes": [
          "e34ce2a48c899adfcb34fc40a3018e04d22b6aa86e34ad6fcf61377ac67b0cb4",
          "2fcb3d2af94a83bcc0bd938f0ee7905e967dd1a03f509ffca7e05c8057e223e7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4cce67ae-35de-4be9-be5b-741194edbabf",
        "line": "173",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": "-moving-status]').html('\u003cspan class=\"hidden-xs\"\u003e' + response.stepStatus + '\u003c/span\u003e');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "06b643087266509ed003f00e674f00a7629bf81025cd649f21c9ab7653993936",
        "deprecatedHashes": [
          "e6a0812702f7a4a1dd2bea933fdc7c9414e7933977940304743072830d3df500",
          "880b7c9c0f2a9d2e4b16ca7d6a83f3385b86da4b13b397135e323c02498e8bee"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3c22a513-8ee4-432b-8ebd-c937603af40b",
        "line": "179",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": " div.panel-body').prepend('\u003cdiv class=\"alert alert-danger\"\u003e' + response.message + '\u003c/div\u003e');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "10279e460b0c009cfaf3727308248316601e22fdc70aa75a6b22a4b473c5ebbe",
        "deprecatedHashes": [
          "0b7e0c56b80515567d1f5c1be0f6ff0291a89752b36e58756506db9feaba6f19",
          "81c6dbecc535d8a10b6160b232a980bd0b925fc673001f73f48f732d66900fd4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5dac8528-0b17-402b-ab05-9d1b72cdd726",
        "line": "209",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": "-moving-status]').html('\u003cspan class=\"hidden-xs\"\u003e' + response.stepStatus + '\u003c/span\u003e');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "ed3152d1865851254d63fcb8c400975b7ba8b97e010691d0200b832824b4bd35",
        "deprecatedHashes": [
          "37943c8e59290d1ecff5af2ea99214eb6c3a64834914b32e9530b3fcacc20522",
          "703d49179a766f98f8c426c415b910f3b1044308bb3cd8d09d67de42e103d9b6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0a7a6c12-fb62-462f-b4fa-25942f898aad",
        "line": "215",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": " div.panel-body').prepend('\u003cdiv class=\"alert alert-danger\"\u003e' + response.message + '\u003c/div\u003e');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "2f63aaaed589c0fb9cbcdcc61eb2003af5dc3c18f2a22b04dcc224a14949d906",
        "deprecatedHashes": [
          "33c26ae9ad22d6eb977c67be600c29b9edfdd58a74200634996ba6996c4cd034",
          "1d110ff9de81e1170a2e95a31bd1e0c14924583fec55a77f5d97167c20b85e5d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a811a419-c205-4faa-be5b-0946de07934a",
        "line": "220",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": "append('\u003ctr\u003e\u003ctd\u003e' + response.nextStep + '\u003c/td\u003e\u003ctd id=\"update-step-cache-status\"\u003e\u003cspan class=\"hidden-",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "55b752a7e6a6c56f83b848fca4c53a6aea586a6d1570f46de55dcf9a339323b4",
        "deprecatedHashes": [
          "f8901b1caeb5f9dab534845cfd6a108963e0599bae09af53b465e37c90e05306",
          "c8cbd5fef1590739d9f787271478f9b8e471cb65b99669da67a18f400eb4d80b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3f65602d-4040-4f15-bd46-d5d45f2c5a8f",
        "line": "245",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": "-cache-status]').html('\u003cspan class=\"hidden-xs\"\u003e' + response.stepStatus + '\u003c/span\u003e');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "451fa23991c73ed9c781a008570233f3da7e50f781bad4b29ae031c12b342f5d",
        "deprecatedHashes": [
          "0ffce8c4e1a22db9568cc6b54263ae18718023eb7f06cf0ce9dd65ce7ceb74e9",
          "d001f24ca9611461bd3ea0db0d882eda2205b55475a36dd3a0cb8ad4ddb14309"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5857bdd0-73fc-4419-98da-b45c31ca10c3",
        "line": "252",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": " div.panel-body').prepend('\u003cdiv class=\"alert alert-danger\"\u003e' + response.message + '\u003c/div\u003e');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "a2c00462f1bdc39a53637201e57de7a8e9e8f2c784df622668966c06238efedd",
        "deprecatedHashes": [
          "7daed7e2c16bf71099c4952e42d5e42b51c9d0c45a2aa9f7782b50e94365c45b",
          "867b8fb721f980b9930918b6a08fe08a022e173bfa69715de0596b8bde38ad3e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2845176b-696c-4d96-a3bd-a58bd52cc04a",
        "line": "257",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": "append('\u003ctr\u003e\u003ctd\u003e' + response.nextStep + '\u003c/td\u003e\u003ctd id=\"update-step-database-status\"\u003e\u003cspan class=\"hidd",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "f9eb5274a13ca0b9f24048f974b68232602683c51ec5023d28bc763153e0893d",
        "deprecatedHashes": [
          "1bc1793f04f16331416ca5e888ef67cd14322353f226fe0b4d08096f05f02320",
          "895f99d7ad813c2dead2b3e87ce0319bbfaa18b33bfb3e868265530522b38147"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3112b766-b25c-47b1-8d21-8ebf40201482",
        "line": "286",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": "-database-status]').html('\u003cspan class=\"hidden-xs\"\u003e' + response.stepStatus + '\u003c/span\u003e');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "56eb4860dde34b37acda92a93a1510e86937ec858f4c23bc3afa653337348524",
        "deprecatedHashes": [
          "3313bacf4d97dd3e2647be7cbac72af5e0fdb799109ac384df58278ddf0247b4",
          "583c9abd152b6fbcacac2f51c5cd2cfd66f205a7eb1e4fad03dcd797a270721a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1ed34325-941d-4abd-8a6b-0c9adbccf37d",
        "line": "292",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": "append('\u003ctr\u003e\u003ctd\u003e' + response.nextStep + '\u003c/td\u003e\u003ctd id=\"update-step-finalization-status\"\u003e\u003cspan class=\"",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "d01b9fd6656228c52520a9fb41c23a4281f77825d3ec291f2942f3f4bce70ada",
        "deprecatedHashes": [
          "1331fbb2079768d0779eef19abf63fb70588d5ad3b283f45e4a78db3da316cef",
          "4b2c3132908da02b286f66de4c78f78c133698d9778ecbcc19e7d600f3395c32"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "86e610d8-ca8b-42f5-ae13-e194e9fcb0be",
        "line": "299",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": " div.panel-body').prepend('\u003cdiv class=\"alert alert-danger\"\u003e' + response.message + '\u003c/div\u003e');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "fa68fdc6e181b3c9ad4c4a986369a0314a5358bdb38741dac844fa30ae068373",
        "deprecatedHashes": [
          "6312be61b65dd4585aa411a7751e4d8783d7e9109d90287458f612afec8d0c13",
          "203284a9a6e9b77fef29dbd8ce8bbd391241b033e5498e4ad4407c2f5244c3cc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c669c4fd-459c-49fa-9b6b-291624f15b9e",
        "line": "324",
        "column": "33",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": "mQuery('\u003cdiv\u003e'+response.postmessage+'\u003c/div\u003e').insertAfter('div[id=' + container + '] .alert');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "bfa3542144a15e0f7f3e967414537c7f1d92a364b9af7ad6ed02f2a29a34f3a2",
        "deprecatedHashes": [
          "9d5cb76ac68247e122572d335f4d07d4ec007a082043c5149d2db3346693348e",
          "959f0140eebe0e1a5ea046dad71c32bb87078d024065bf7e4a56ce54edfc637b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "811aa1be-bb57-4bfb-a683-065c661c0f85",
        "line": "327",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": "alization-status]').html('\u003cspan class=\"hidden-xs\"\u003e' + response.stepStatus + '\u003c/span\u003e');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "2eb66b642c93d735912168f3cb0166cb4e31c133d4b78b7f537c23175bf7e9b2",
        "deprecatedHashes": [
          "5bff481716fe9e5a66cb8ed128ff71d2765b54a2c3746f1be0433da646ffbc7d",
          "d002b9e9a875df28576ae63f99f85ec30abf71b89d5d653947ef1839a43231f1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "236db1aa-60b6-42b2-bc84-5883f183b304",
        "line": "330",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\3.update.js",
        "code": " div.panel-body').prepend('\u003cdiv class=\"alert alert-danger\"\u003e' + response.message + '\u003c/div\u003e');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "0959344e133c14cdab44ac5ed37ccc61b4f00a41d2ba3960f93277364c1d5b5a",
        "deprecatedHashes": [
          "fe8f7ba5644c52c639c144ff9ef3db9f9361570f2a9bc097434c7b1eae499175",
          "275e5b72d3e002e7e085526071e1dc0e96313ab2eafb3292fa4065694408afcc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7fa96ef1-ca5d-4484-a094-72331e1edd0f",
        "line": "14",
        "column": "472",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\image\\dialogs\\image.js",
        "code": "confirm(d.lang.image.button2Img)?",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "f1b5098aa3d72d44aa55e086de28f08d6cbbc1d697766e505a6f0080dd756312",
        "deprecatedHashes": [
          "b522b2ad585df3f95794ed9c5ac1956416fe6bcae4cde7017e53556aefb4390a",
          "6b70ab1d220caefe3f48b600d88217091fcb84f8fc5e7734b4ffa95fdefabbd8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4375fb1c-f531-4b03-a35c-9aa4e910f2de",
        "line": "15",
        "column": "150",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\image\\dialogs\\image.js",
        "code": "confirm(d.lang.image.img2Button)?(this.imageElement=d.document.createElement(\"input\"),this.imageElem",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "78bac1f58dfd980597a9ad99e23ba09e676ee62d61da1a507a97d88cc168452c",
        "deprecatedHashes": [
          "9952816cedd70f990fef711047ceba03bdadad53ab5aee3460fc387c58474ccf",
          "df9b9ee33487bb4bdd5147d99b99742af63a336e6d6a2094c9730aef02cfa427"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "842fffa4-d6b6-4a53-a0a9-1974b33a7a60",
        "line": "22",
        "column": "391",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\image\\dialogs\\image.js",
        "code": "alert(d.lang.common.invalidLength.replace(\"%1\",d.lang.common.width).replace(\"%2\",\"px, %\"));return a}",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "606c3c83306470e1978f0c968ff60591da43c7b658af6ad71e6ede63f308280d",
        "deprecatedHashes": [
          "7d155e16cd18077b4ccfef6f58f1e982e9653b5006322c5fbfe7d52d177c8733",
          "b9f3f41108dc2148f9ba50cc0064aa12b84dc5903c266509396f04f4b00c1fd2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7706b02f-c3a4-4db5-9400-e9ba293835aa",
        "line": "24",
        "column": "113",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\image\\dialogs\\image.js",
        "code": "alert(d.lang.common.invalidLength.replace(\"%1\",d.lang.common.height).replace(\"%2\",\"px, %\"));return a",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "ad099aee8f96367a945a031c069f1a6dd4503fbce6b9b55d8606b22fc2f0041e",
        "deprecatedHashes": [
          "38a38ff614744844d5985af942e1036775d94c4c16354326a4859dd387aa1508",
          "ff1274b674ec01f7ba746a3c94b248a73ee7cc555aeaad28b94a4ed9e43a605b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "db6f7935-f8b2-494a-b568-aa6c3716fd45",
        "line": "1",
        "column": "7176",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\9b.dropzone.js",
        "code": ".addEventListener(\"click\",d));return o}},removedfile:function(a){var b;return a.previewElement\u0026\u0026null",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "35d33904a3939a70b644cb2f52fc6defe27cce726247b9fac3ebd10a612a53d6",
        "deprecatedHashes": [
          "94e48dedb79cff248a987ece8c8956538fdc05b72db9e8df3984c6ab5fb48c75",
          "69e5fa35b60dcd398fd7af7012433a750569d51404b5c1e8c174b93c71777fe0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "89897578-9fe3-4b1b-aff3-7f481b0d3371",
        "line": "1",
        "column": "6850",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\9b.dropzone.js",
        "code": "confirm(b.options.dictCancelUploadConfirmation,function(){return b.removeFile(a)}):b.options.dictRem",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "1e83c7b16f1e67e12bfbc611823a4d238dac6d4c8f4bf1345ed7e93c21e73726",
        "deprecatedHashes": [
          "6fe267286d5b901e8179a0da62c997383afaa1dbebfe04eb002b90ccf09da8d7",
          "56eee2d793d401e140b6c8c1de804f2884e2a6365d74cab42bd1b199a59918d3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "191f18d9-bce6-4f1c-ac56-a83bd01558f9",
        "line": "38",
        "column": "90",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\4k.codemirror.mode.javascript.js",
        "code": "\"return\": C, \"break\": C, \"continue\": C, \"new\": kw(\"new\"), \"delete\": C, \"throw\": C, \"debugger\": C,",
        "details": "(1/1) * Possible vulnerability detected: Debugger statements should not be used\nThe debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to attacks in production. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-15",
        "vulnHash": "11bcba8d98a65b8a560836c856bd0b0e170b6f91b4c74f7387ac10c7c48a4b03",
        "deprecatedHashes": [
          "6e0ea30d4592e302ba546587a8d1b61435ee9dcc8b7da95b2db29884e44cee44",
          "2bdc2a03f9156b2d95471726883f2e97cb2c16e5855871ff45d4df0abe966ed2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "402bef95-f90c-44cc-a3d1-1e380fbca9e8",
        "line": "891",
        "column": "12",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\froala\\plugins\\image.js",
        "code": "reader.addEventListener('load', function () {",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "5c5af254580c3dea51319903a849861ccf096ee9bd6af41dd3e4335f99602994",
        "deprecatedHashes": [
          "c2624af8a64c010515bf7d5317a76a6958f6250577142a200efa25c76def3045",
          "d6d81b57b555fe4f8d364901b74a804984e4800ed4f709b0dcddea1b60c8efd3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9ec7486a-4809-4df4-a187-b93ae2a8342f",
        "line": "52",
        "column": "16",
        "confidence": "HIGH",
        "file": "app\\bundles\\PluginBundle\\Assets\\js\\plugin.js",
        "code": "alert(mauticLang.popupBlockerMessage);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "1d53d7f623027fc008dff8ca7d0d03013a7529c4f91a61fccdaa2a9e24c219b3",
        "deprecatedHashes": [
          "480df11740cdccd40f7fea5cef0ec6c441c2a39c59043e665d7df87c1498836c",
          "eb351d93044b40c313c245ff884c38167a3ce5dff9edcc9baa78f6d14a42fd9c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0fa88d3e-7cce-4013-bd62-b967063d6ddb",
        "line": "14",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\PluginBundle\\Assets\\js\\plugin.js",
        "code": "gration_details_featureSettings_' + object + 'Fields_update_mautic' + index + '_0').attr('checked', ",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "42c7dc25abb29474c595f0a3a6ed8fcecb34fdfa4319e786229325348b1a6b31",
        "deprecatedHashes": [
          "b8af5d3e1ddec2096d0c7853c140cb6e0fa406d144ed532c2f8dc0e1ecac21e7",
          "1ff60fe3c368f3f4d824952a187e0e1b31ba599be284247e99d192b45b173859"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c14f3d30-f753-4175-bf63-d00b48cfd555",
        "line": "15",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\PluginBundle\\Assets\\js\\plugin.js",
        "code": "[name=\"integration_details[featureSettings][' + object + 'Fields][update_mautic' + index + ']\"]').pr",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "c024cc9b75a4f94332a2e278e3f1f6537c31bc72d7cf3dd6a55649fa3f7d6564",
        "deprecatedHashes": [
          "0ddd8f683fea7ca9c57c0cbed574e3d175f7240b9d8b371ca52cc0a9e9f05967",
          "7a854b554d97c309b54800343edd2ac4fcd26394ad913aac87c5db032de13c69"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a7d515f4-1b85-4c41-9842-3be5fc6f81f7",
        "line": "19",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\PluginBundle\\Assets\\js\\plugin.js",
        "code": "[name=\"integration_details[featureSettings][' + object + 'Fields][update_mautic' + index + ']\"]').pr",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "0a2aec83da68469eea2b1447232ffcc7aa73eebec082bdd5cb873680b5e062d8",
        "deprecatedHashes": [
          "70032df401482237a3cea9c780d870f34833fc3a1e4b652911430820f2e454b4",
          "ab6c088f150bd3683dea16d8ceba69ca25ac1ef1573666ad0eae8392eac76459"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f515821f-7c83-4a93-957c-6d0d1201523b",
        "line": "25",
        "column": "33",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\PluginBundle\\Assets\\js\\plugin.js",
        "code": "nput[name=\"integration_details[featureSettings]['+object+'Fields][update_mautic' + index + ']\"]:chec",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "26ffe0d61bdf40b3221ce441a15756c779cf58b66bc83c8c5dbec2d5658afb56",
        "deprecatedHashes": [
          "a169063aeb91c9b4268517b8b98499a0aa84ad9bbc03dbe0badcc694fc247400",
          "2a01a20e4a9dae6eb94dd04942a0f6301e8402f6b55e9e886ed8936633a8353b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6ede95a4-30f2-45f9-9334-4c6f2e5fdd9e",
        "line": "27",
        "column": "33",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\PluginBundle\\Assets\\js\\plugin.js",
        "code": "nput[name=\"integration_details[featureSettings]['+object+'Fields][update_mautic_company' + index + '",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "653e6783b07c4507a19cc433ada7d76afe420fbd920e6ecda7348a19016228bd",
        "deprecatedHashes": [
          "9162c67fbfd1d50297ad1a6cc76dfe14cbeccee4043c8eac3b6799b1b60e5bfb",
          "17f4fc8e16701bd8d5d31fa563eb48993e06cd3f242092bd6d7c3427da59ddda"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fb23c80b-a9fb-454a-887e-b6d8f54cbe92",
        "line": "12",
        "column": "17746",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\jquery-ui\\jquery-ui.min.js",
        "code": "Query(e\u0026\u0026e.connected),s=[];return e=e||{},t(i).each(function(){var i=(t(e.item||this).attr(e.attribu",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "cec7fa400c995681e2102db940600aaa9a24c4263b1eaa100d073861526ae900",
        "deprecatedHashes": [
          "ec99909f9465988d0f7e52668d3878260cbb593f0ba088127f7193a300c1798c",
          "96258aea135a79da02f55fd0c680ebfec08f2909a4e56db48f5987a4b5c17745"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4d9edd23-7cc6-441e-b4b3-1f1957584d90",
        "line": "5",
        "column": "293",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\table\\dialogs\\table.js",
        "code": "alert(a),this.select());return f}}function r(a,f){var p=function(d){return new CKEDITOR.dom.element(",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "3f70b15ddc5ba41f57311c66753ff7595f13e580227cd0270a3d44a906f3822b",
        "deprecatedHashes": [
          "e0aae4cd81e23213497f7b86fc352f2aeea646419929fa1686b48d8b2388e864",
          "57bc5ab6319e2391cadbd0db2da91b8f067b3cd171dcc965a487cd2075766d9d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0b85bcd8-b995-4164-b2ef-1456cb48259f",
        "line": "7",
        "column": "10841",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\froala\\plugins\\image.min.js",
        "code": ".addEventListener(\"load\",function(){var a=h.result;if(h.result.indexOf(\"svg+xml\")\u003c0){for(var c=atob(",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "59919092e327388cf2be48d181db488f50c28d16241e73ae577a3cf4d900ef9d",
        "deprecatedHashes": [
          "24980f66b8c8ee7da30b69ff7bf0989dd96f1aeba56dad1d0dcdaaf6ee9acb9d",
          "b2ca8c28ca98f3690e48b255df7d8dda66b66c342ed7d43265f46697a682fc32"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7318b1fa-a7e1-4b5e-8a5d-3ce1c757cae2",
        "line": "7",
        "column": "4778",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\froala\\plugins\\image.min.js",
        "code": "Query()).get(0)||b.el;xa.css(\"width\",(d/a(e).outerWidth()*100).toFixed(2)+\"%\")}else xa.css(\"width\",d",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "c60a06cc26e3b2dc8004c9ad5c76116314a26edb70f397c529e8529b42abe305",
        "deprecatedHashes": [
          "a8e05d29bdb96dc7b51ef71e9f506e65b209e3bab3a47c46c8549bd8f625cad9",
          "8cf32206e298b9c999f6b6c14ae2a97795619e02066cd2bc81ef0e4b66b1ed84"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "182ce915-9aa2-40ba-bbf4-7e828ee07f32",
        "line": "11",
        "column": "387",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\link\\dialogs\\link.js",
        "code": "alert(h.invalidValue),!1):this.getDialog().fakeObj?!0:CKEDITOR.dialog.validate.notEmpty(b.noUrl).app",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "4e222ec396a93389af09ac258e6468a9fe249d38d086af42bc6a66e3bb20f47d",
        "deprecatedHashes": [
          "b47b8e5de308afea36d78e51d9b2828f9e9acc31bb7a3edf41d0aa7601af44ff",
          "d5fb66c61df9f26bc4cfa3a80e57d894b45f37e38d8a5d205901480ca0e4cdd1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "35e9605e-f2b1-4d9e-b21e-41e66ca25c44",
        "line": "18",
        "column": "489",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\find\\dialogs\\find.js",
        "code": "alert(e.notFoundMsg)}}]},",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "1a8552fedefcdd7b8c63207020785603a5c86fb639ce67bdc2e3caf879f78b9f",
        "deprecatedHashes": [
          "519506ff2d22a3b5575996c6bfdfdc906f287f243325d35e7d53a6fce3a70d41",
          "83b14b64507a0b70f8d738a1c3aa5f411f7162d6d9198805e1d851b63ad24bb1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7ed81158-283b-465a-9141-0c0f3fc0745a",
        "line": "20",
        "column": "438",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\find\\dialogs\\find.js",
        "code": "alert(e.notFoundMsg)}}]},{type:\"hbox\",widths:[\"230px\",\"90px\"],children:[{type:\"text\",",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "3270f9e330ee6b0cef1fc17ff310da94431a614759784fb3a8c108508d4441ed",
        "deprecatedHashes": [
          "33673adb73c681fbebcfdbe70bca14325306742714872eba0f8ff9d5756b4399",
          "7bb1feba6d60e19a750e7b12272e497ed7a084ea53856b0227b26604e960abcb"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "74c2ac7d-0b0c-48c6-ad42-11dea202c68c",
        "line": "22",
        "column": "48",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\plugins\\find\\dialogs\\find.js",
        "code": "alert(e.replaceSuccessMsg.replace(/%1/,f.replaceCounter)),c.fire(\"saveSnapshot\")):alert(e.notFoundMs",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "b489f69a449b0e0260fbd80ea24dcdc99e31897aef519877ab2a6378d840b811",
        "deprecatedHashes": [
          "adcde4c3f8d5a58be685dfc03421ce3553163677ddb3dcf8d4f973f9963dd7dc",
          "65e471d3943d13fc67299172a9633b8872fdbae9efce128f3b9018f21f50c102"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "26c24670-a725-42e2-899d-f3e4501f38ff",
        "line": "54",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CampaignBundle\\Assets\\js\\campaign.js",
        "code": "mQuery('#'+thisSelect+'_chosen .chosen-search input').on('keydown.tooltip', function () {",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "da85997fa80ec639933d07421dd9f0d127dd9ba760bd31447601524774796b2d",
        "deprecatedHashes": [
          "f8be4e71a235eea1b13db79aeb08efeaef232897c46b31b43ad57c9ea7cb94ef",
          "79d5006a80f319bf68657a21c25e3feba47713ff0442d6a69f26ee6421ce09d3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "77de2cde-f7d7-466f-aee1-86aba72e253c",
        "line": "77",
        "column": "13",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CampaignBundle\\Assets\\js\\campaign.js",
        "code": "mQuery('#'+thisSelect+'_chosen .chosen-search input').off('keyup.tooltip')",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "200a1af4c3c9f0b37007faa6b64668fe9310c6ce71a9870563407ac8527bb24b",
        "deprecatedHashes": [
          "1a126b62b3b42619e0588a039f70b355ef8c7fc914156303f4fc7451491cae29",
          "a4598f1943e4fd068e1daca4deb7e31ec60a388778f2270ee4c8345b9b42d881"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ab9b4048-c6bd-4fd5-8264-0a1f46a2fb56",
        "line": "1678",
        "column": "17",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CampaignBundle\\Assets\\js\\campaign.js",
        "code": "mQuery(selectId + ' option').each(function () {",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "55194b720ed168c117807441f83edc819e1217e034966c08d1755110f5983df5",
        "deprecatedHashes": [
          "597c63390462db2e4f35e1a41890c4d28ec373e44a665f88490b37928fe634bc",
          "c14b8aee4afb1cf0c988547f099fad8d78b6e9b345f73e8430594e71a93e54d8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5f67e6c5-cebe-4819-ae92-81918e7fcc36",
        "line": "10",
        "column": "12171",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": ".addEventListener(\"progress\",t.progress),t._xhr}),e.ajax(t)}),\"iframe\"==this.transport.upload?this.t",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "bdf40bdff9454e9171f0f6329322f5f1acd755a1ef972ddfee5bd7f6d83d59b6",
        "deprecatedHashes": [
          "fbb42ef6eee0f2e567fd4fd38d6886851252666a5122b8233f473a111eb89274",
          "b211272850187678040bf29cadd282b4922d8b3344b63eb52521c58214d2a3b0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "26adbda1-0513-4f91-8bd8-2056b13f497c",
        "line": "11",
        "column": "21144",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": ".addEventListener(\"error\",function(){0==o.status?E?w.reject():!d\u0026\u0026t.files\u0026\u0026e.grep(t.files,function(e",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "552e594db64d22a6330b5c169a2c7a0b72cbaa75123f633d869c9c8a616ef294",
        "deprecatedHashes": [
          "53b4719832055c2df0efa5dc68ca6d2786045e4cacce5eb902829c7652271326",
          "60e4decc14fdd78b0bf3e8acf63cac01a2ed0b82637fb46747c35db1ba0ae5c7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0981b256-784f-4e8a-9a89-6fa618da4d8e",
        "line": "23",
        "column": "10319",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": ".addEventListener(\"error\",function(e){a.src\u0026\u0026u.convAbsUrl(a.src)===u.convAbsUrl(e.target.src)\u0026\u0026(++l,",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "0663b99760afb5cf95c7c8f5052bc58fc9d65156c70075843db4800599e60af9",
        "deprecatedHashes": [
          "feab39ebd5d467b4ec15db177d1c45192b449e071db350d721f8824ccdbe24d7",
          "0bbae4ec7fb9cd431cf3e01f8c33cbbdb4745ee9df6a52ffd10935a1a4fa30b5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8fb2e05d-9b4f-40e3-8622-51a632aaf9a6",
        "line": "11",
        "column": "4400",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "alert(u.i18n(\"errURL\")):alert(u.i18n(\"errNode\")):alert(u.i18n(\"errJqui\"))},a\u0026\u0026\"function\"==typeof a\u0026\u0026",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "6dad74119b0c7ebd6d7db4dc22b0b368d9b54dfded9952949fb33158a6bf00e9",
        "deprecatedHashes": [
          "5f50323eb5b7cb455e7cc357cdcc333898d9b6dff68521f7d419d9210284ef99",
          "b901b632f377b42c491215e4c2592c1d3d2498a94a1ca53758084cbb6ba2a633"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7f151494-7515-493f-bac1-7fbdf595e689",
        "line": "20",
        "column": "6268",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "confirm({title:n.title,text:r,accept:a,cancel:{label:\"btnClose\",callback:e},buttons:t?null:[{label:\"",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "4169e9503805ff118fc43c40b4bee73cf5aa531373f26e0a8e87e417cca02e01",
        "deprecatedHashes": [
          "70d67c7b07b0ef507b1b73deae171222fd85c28d38a1a2ec5998b6e7a9f5efb0",
          "4906d6db02e3c9eef7202ef0470c1a9c2f42819c10695dd3e524448efef22b90"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "48f2dfd2-2cdf-4743-b04d-4070529e46df",
        "line": "21",
        "column": "21494",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "confirm({title:n.title,text:i.i18n(\"confirmUnmount\",o.name),accept:{label:\"btnUnmount\",callback:func",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "b0809026f584073d94bf7d09be2b500364ae2fcc0354ed7f069aa56fb3713b1f",
        "deprecatedHashes": [
          "1bad501c178a21e3bfc2a69338839bc59c9c4ea72c07b452be32f5d9ff3dc48f",
          "838b30a17117b6bd7db5d7ef37ca84012afd4adfc736b1fe12bc5631f245d065"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "247cc7e1-aec8-4430-aa30-91505fcdd518",
        "line": "24",
        "column": "3551",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "confirm({title:\"cmdrename\",text:[\"renameMultiple\",l,a(o,[c.hash].concat(s))],accept:{label:\"btnYes\",",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "b0c009acc52eef0875469645a3b1445fd3f0880a8fcd3a3bb2f0f06e2b12ccbd",
        "deprecatedHashes": [
          "4cb2cbffbae35c8d59140eb365dcd94934b10c1f3b16d1fe810597d1be60edb8",
          "a49f47d111acd0509ed4394a31cae32c7c759e743a4006e8f8ea2d002be75ee2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "12eaabff-de7c-49e3-8b85-0752fc1fb885",
        "line": "0",
        "column": "0",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "",
        "details": "(1/2) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.\n         \n(2/2) * Possible vulnerability detected: No Log Sensitive Information in console\nThe App logs information. Sensitive information should never be logged. For more information checkout the CWE-532 (https://cwe.mitre.org/data/definitions/532.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "7f5f7fb9c8e87023356a2d2f45efe1e438eb45ef9c31c0598a4c6e01a7b429f2",
        "deprecatedHashes": [
          "0e2b61e5b875156a6747c8d1e0aac85470bf4554e726151bfdc8080d00ca89b8",
          "c0b79965e6b45a9abd4bf117a76ce82c246e19d2b5f810baa5d98446aff61dbe"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9847e6a5-93e1-454a-80d2-d4b9cfe48f4d",
        "line": "9",
        "column": "22334",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "Math.random()).toString(16),p=Object.assign({},r.customData,{mimes:l.onlyMimes},t.data||t),u=p.cmd,h",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "4f273b23b03bfaa850a2cde6decc37821abf03cf2ee9605921a19a3350969a3a",
        "deprecatedHashes": [
          "b7f49e2879d875e324e77be54611d810e6e34b401826a925df8d135a91064c43",
          "6016c974544627998bd659f5fd9be24e5e55f0ab770303cd28ba7b937763e42d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b05c760f-04fb-4c1d-8020-90286b36b568",
        "line": "11",
        "column": "20397",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "Math.random()).toString(16),\"function\"==typeof x[\"delete\"]\u0026\u0026x[\"delete\"](\"reqid\"),x.append(\"reqid\",e)",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "db94e647be41d5689788b56220565e4d802782b2c1863ca5073f2a1040aae633",
        "deprecatedHashes": [
          "1f04bd5217fa5e9ab0f6a6e94ebc5b61fd5d6b6f25c2c59be96499c55eff515d",
          "c9edbf24792540e6eec2441d092a02431471cebe9c2a6ac24432b85c36a10b52"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "91bb32da-154b-49bc-bbfd-5c354361d933",
        "line": "11",
        "column": "25982",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "Math.random()).toString(16),x.append(\"reqid\",R),o._requestId=R),x.append(\"cmd\",\"upload\"),x.append(i.",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "c5ace5cabe338e627e236d2266aecfa3391e11142c89d890ff00378ddd2f6cf5",
        "deprecatedHashes": [
          "1014cbf0157a2c7cdb50875a8f3f7b389d92d2884c255028ddb4c5f51fddf7d7",
          "2682bde5ed0a72c31735ddffa01b3831033537a3d1d2337f36132cbb7018b165"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "dd6790f3-9b53-4fea-8ef3-d78b931b62f1",
        "line": "12",
        "column": "16273",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "Math.random()+r},i18n:function(){var t,n,i,a,o,r=this,s=this.messages,l=[],c=[],d=function(e){var t;",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "c7d75b78449c36b3d687ec203caa5042f011ca8fadb5b9dd45c3b30fc321f0f4",
        "deprecatedHashes": [
          "24ba4a04e2ac661a3bba9f25460693a4a371326b40c09ee895a30cf30eab06cd",
          "08f6893c26e27ecbe0e775fda6aeaffcced0e57d48a5c657e0b09c1606f6af4b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d36054a5-071c-4775-a882-8ba95615b535",
        "line": "13",
        "column": "3745",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "Math.random()).toString(16)},arrayFlip:function(t,n){var i,a={},o=e.isArray(t);for(i in t)(o||t.hasO",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "c170c6f5f0cfda6d1b8b57e179ff132b9fc8e1702802691b1eb5bc8da07852d2",
        "deprecatedHashes": [
          "403b69a30484d39d42c8ce92bdeb08d1d6f9091e476af18c67df92bbfa5e70df",
          "fbc1cb931c4b79d778d303b7d0430d80dedbae045d73fbb920ca7d0b54642ce0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "beac6d60-8352-47a4-93c8-a19995351053",
        "line": "14",
        "column": "23139",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "Math.random()),j=this.data\u0026\u0026this.data.target?this.data.target:v?u.file(w[0]).hash:u.cwd().hash,O=new",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "83f6aaac365129d9950906d85d4f19c1b68808224a3805ac3ca2b8c8f6f10395",
        "deprecatedHashes": [
          "e87af174c323342e1e5142f5234487cf740b5a0ea986cd7240ccdf33a293d4d3",
          "aeeff82cfff5e4bcf4aa542b96ecafa01f631e6e73739a40c380bacfdf1119bf"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a0c28b2c-18fe-4094-b1f4-756eef7d5ac0",
        "line": "17",
        "column": "11014",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "Math.random()),C=e('\u003cdiv class=\"ui-dialog-titlebar ui-widget-header ui-corner-top ui-helper-clearfix",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "90ebbce574321c9a5b4065156ef02c7a54b45e1149abfd1d6704d1c09ee83441",
        "deprecatedHashes": [
          "3c4f92414d0277243cc0df505dad37bd5309463be834f5c6a67c98748bd38243",
          "0589fc14ddfe711b01f080139f841c2afa6bdac82759b884c9f51d757294ac92"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b15e6144-801c-4054-bcef-7ca932ed4647",
        "line": "134",
        "column": "16",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\4.builder.js",
        "code": "alert(errorMessage);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "e6d8503e5c8e49a2876a5d6e5a8adbd8fadf5d5e6ca9742c1127cd030d73d021",
        "deprecatedHashes": [
          "c4580e5c7902bf8fb01b1cb292672be12b2a090a19bf9d5550e0028e0d36f536",
          "9d68e7a7888b20c230f1cf6b623dfaed54f03d9b80372cd660e8237e55ad775b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8ca666eb-3241-499f-92cf-b9d9985dc69b",
        "line": "410",
        "column": "24",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\4.builder.js",
        "code": "if (confirm(Mautic.translate('mautic.core.builder.theme_change_warning'))) {",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "aa9dc54f766182d3df8327b6605eee4620cac90a10fbf29749ad669a55665be1",
        "deprecatedHashes": [
          "bbf1772849fa16ca145e5fb024a7a911e2d89d8dc3421ec8d49a6687b17ce985",
          "f5bb42b3bfa5e950a0f0b3677f2fe7e77eab2d5b071556cd4d93f8b6117e93c2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3bbf03d9-28ef-4ce8-9b28-d610f8dad4b5",
        "line": "417",
        "column": "24",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\4.builder.js",
        "code": "if (confirm(Mautic.translate('mautic.core.builder.code_mode_warning'))) {",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "91b4f866a59ff9dfeb8cd6d13f693e614b8e4086258e116d470267eb56e3693c",
        "deprecatedHashes": [
          "77e6fb1d8ba30a45b1eb3d631c3e793411c032af2d451802940f9cd190efdc20",
          "078e9ed20ca08a26f43086b3836c716a71e711321de4f24b57c2a75873eb6174"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "83843e53-4f63-4137-88ed-3a0ed18a3356",
        "line": "549",
        "column": "12",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\4.builder.js",
        "code": "alert(errorMessage);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "654314409bb1085f1e3cc4aab5616fe3a8d8f51d6404f7bb11283628d5eb8258",
        "deprecatedHashes": [
          "563753671fdba05a4df04a21311484c4bc4e43ada1db3e999b2500b209d36775",
          "4602d31775374410bb405c85c43ff5bb852e7fc47155c9492f3f5dcc3ce4f210"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d8a5db63-21d6-4b31-8cdd-ff83a105f9ea",
        "line": "766",
        "column": "28",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\4.builder.js",
        "code": "if (confirm(parent.Mautic.translate('mautic.core.builder.section_delete_warning'))) {",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "1769bdcf40984c7778b439755f15428acd3b4e9d33e2541756f0f64bb14d1e60",
        "deprecatedHashes": [
          "9646b38981fef8fbd5484d7e8b76bd1d6822ac1dadda83f81e48de29ae194a67",
          "c06e64a7918c9725aa894dfce47d07aa92353bfb62b3d5253fbcc6531be3a89e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "99f75564-44ea-4d34-be18-e847cd0a2583",
        "line": "19",
        "column": "2961",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\8a.adminre.js",
        "code": ".addEventListener(\"DOMMouseScroll\",C,{capture:!1,passive:!1}),this.addEventListener(\"mousewheel\",C,{",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "dbba8014be906a23f0fb431741df1b7db14d2898085301f6b3473eb23b8179f5",
        "deprecatedHashes": [
          "90adb213109e7ede60154cb5b03f5999a73ab8e1514139e445578a9775d147b3",
          "ca46ae11f9b576293574542c6275513745e6bdb8aacc51873686e7edc1bd9813"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "eee383da-aaf7-4818-a136-ee63f069fb8d",
        "line": "345",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\ReportBundle\\Assets\\js\\report.js",
        "code": "var option = mQuery('#' + selector + ' option:selected').val();",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "7b968158831252089c5e6e38ab2e34aeca0dae7b7ca13565f27da903421bab4e",
        "deprecatedHashes": [
          "1cf4d390f89a75fd7394b5d25ab440a125377ca6b7340b8f6799ddd8233733c2",
          "31d3a3d7a5670e40db8c393e023e6d4540ac829eaf9543096290c12de1f56c63"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9cba6342-0d74-4b66-9114-f46636cff8ab",
        "line": "372",
        "column": "28",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\ReportBundle\\Assets\\js\\report.js",
        "code": "var selectorChildren = mQuery('#' + selector + ' \u003e div');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "69fa87972a8fa13cd28872e0bc525a27d60a869073cd7ecd03fb80417be1e347",
        "deprecatedHashes": [
          "a4080a8b5289d18e5089338cb88249ad6c3e78ee35da02c042bc901765b95f84",
          "fdda196e8ee3785e4e155a23df075bfed342cb83356df515e412f0a87e10c6f5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b7e77801-29c1-45d8-ae34-e1d475375ef2",
        "line": "41",
        "column": "72",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\12.jquery.multi-select.js",
        "code": "ms.attr('id', ms.attr('id') ? ms.attr('id') : Math.ceil(Math.random() * 1000) + 'multiselect');",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "ab8b30e09d54195079acd274fb0de3c33d6252f30b92ba21bfe423a0bfe2ef38",
        "deprecatedHashes": [
          "12f3b705e2bca410749b0cabddb8ccb806c8de333543b76cba80eb67ef6062db",
          "1a64f3ebcc8a7adf37e261259fcfe010fe804cb2f58006e07017e9c70565fb1b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "88777da9-febd-460f-851e-ae2e0278dd7d",
        "line": "299",
        "column": "34",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\2.jquery.js",
        "code": "expando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "350fc877983696975e52f9a0f091bb7797817c742ad57268641183d088b7faf6",
        "deprecatedHashes": [
          "84c69dbebd1d3e090ea57d75e2723124139819a11aecb72d567419b4430899b7",
          "d4a86dabf3f7fb9f90a6aeb11b3a03cfc89dafce520d05975abf9968aacc2b50"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "63b53044-8195-471c-aff5-dfc11cd09208",
        "line": "2480",
        "column": "63",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\2.jquery.js",
        "code": "dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "4eaa21b9dce88acaf68d92eb76737a24030baa88c78ee3b1059686416f36b789",
        "deprecatedHashes": [
          "5cffefcde3001e1c6d6163ce2c68487350844e2f316de2b12aca9be436f1acc6",
          "e225917a14f81e44254261380f6f5ab6c9f74bb9e64c0b4b3f2297e2412603b1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7a185dce-120b-496b-a075-a036156761d6",
        "line": "382",
        "column": "14",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\4i.jquery.at.js",
        "code": "return (Math.random().toString(16) + \"000000000\").substr(2, 8) + (new Date().getTime());",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "ba9a76e57fe5a8c15ac475af5e2f744cfecd03f8936bad6066ab3437b9a6b48d",
        "deprecatedHashes": [
          "29527d3362dac205a5e0aa5b43a5ea4b7cf389034de9751ae6bd3b0339b3944b",
          "ea633eb2e600b117ddca667da24dd22b5fa587dc393b05d0e8983df63a170a50"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3645df7d-9e2f-4ce8-9503-74bd28676bb7",
        "line": "1127",
        "column": "12",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\froala\\plugins\\video.js",
        "code": "reader.addEventListener('load', function () {",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "ccf1c0ef50c7135cf28576bff83f0f5c96d57c867f9d556e6718d8f0787e2814",
        "deprecatedHashes": [
          "168afeee30295acc50bd1602c1aba6b1268c47c23704d16d0bf4e0fd5dd1ce46",
          "4f3ee59d72278ed1126e8a74c15106edbc1f729c351132463961a63235d97cfd"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0283c76f-592d-4fdf-be77-83e217429b11",
        "line": "2",
        "column": "8759",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-fixed\\js\\jquery.min.js",
        "code": ".addEventListener(\"unload\",da,!1):e.attachEvent\u0026\u0026e.attachEvent(\"onunload\",da)),c.attributes=ja(funct",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "6376ea272fc5b3094fb4f969c66017d786c67ea46a606fe5c534564252209dab",
        "deprecatedHashes": [
          "651fc024429e0ee31af69985e443e7d1b5b52f4bf384e7820007f5fadc8b337c",
          "2280df57393df77265c26e684b85b48e22321c131dc59c8e60e3791b0ee23e06"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f96b6e7b-defd-49b0-8b9e-aae701f47da7",
        "line": "4",
        "column": "6867",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-fixed\\js\\jquery.min.js",
        "code": ".addEventListener(a,c,!0),W.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "4172ea235bbaf9c599fa0de94bb5a8f31665c0b0b7b98c8a09beca1e5690e7e2",
        "deprecatedHashes": [
          "e9691eafe25cb03098a4b0fd6bf8c19c931db1071a7b11ef27c835fa42f6aed0",
          "4ac16e6feb57bf661c1cf1765f4f38a732ba9d6e1a499dc477a0fcca2b373da3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d8184cf7-ff14-4f40-8e2f-abd63bbd79c7",
        "line": "2",
        "column": "1910",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-fixed\\js\\jquery.min.js",
        "code": "Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "f2a446098f656591fa291aeaca1d43f9093163227e91712c553c33f05d0cccc1",
        "deprecatedHashes": [
          "783db049bf73370ed63c425c101f00bec0532ae34c804e9afa64c3167de50092",
          "749e6ae3f82449315868b9feda9de4eaa339193c9eb6295f418ff7939a5d71a5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4e6dfc12-a18c-40d6-927f-47e7363b4153",
        "line": "2",
        "column": "21569",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-fixed\\js\\jquery.min.js",
        "code": "Math.random()||.1,z=x.length;for(k\u0026\u0026(j=g===n||g||k);s!==z\u0026\u0026null!=(l=x[s]);s++){if(e\u0026\u0026l){o=0,g||l.own",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "27df8d96d649ec85e3a9b12cbc03bfc4fbc4e31ef2d8dd113b73324f398884e8",
        "deprecatedHashes": [
          "0f18d6bef3496023d322ca4758e602ddbef5a4a5e17814a0d8ee1925d5f45df5",
          "70575d46c0f8725772ea85e16be48aea315933f040cf4fc6456821db157c2331"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a9788dc4-5f21-43eb-8f58-a6d4b359b6ee",
        "line": "2",
        "column": "8759",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-center\\js\\jquery.min.js",
        "code": ".addEventListener(\"unload\",da,!1):e.attachEvent\u0026\u0026e.attachEvent(\"onunload\",da)),c.attributes=ja(funct",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "b742b5fb789caf792baa3284a79498756b08534451c8b61b44d929057ea054ff",
        "deprecatedHashes": [
          "0e425b4681dc6de47f390b0c72636a50205e6b61854bd2b037da14191d853c44",
          "3d8f5ce5537392a3520f23e9bc51f91abff459a53bbd452f7f31408b61d2fcb2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "92ea64a0-c331-4b28-ac0a-1e8f962ec4e6",
        "line": "4",
        "column": "6867",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-center\\js\\jquery.min.js",
        "code": ".addEventListener(a,c,!0),W.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "92306be0965127c98b2771d2d329bdf7e034d25f013a55d9b9d51551b98b7fbf",
        "deprecatedHashes": [
          "6c366454f0b35eadd64ada7f0ef54619a8cd1363f184c2f86b4e63e21b14fe62",
          "187c881a8a7f303e24ef90b42306cddc01ece1507826394cae7653adceed6f61"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6d901742-2f38-4596-a517-cb7857b0ec67",
        "line": "2",
        "column": "1910",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-center\\js\\jquery.min.js",
        "code": "Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "b3092ed4bf2e5cff2d29f37ff17efa68a0b19bbee651145419a91b0e315d5e21",
        "deprecatedHashes": [
          "9701442d500b68506ab9f5c7a7810ce0487650e5fada34802e5175a0587da34e",
          "1e737fe2cbfd471a7acba4a40e57480a98a5ed72261d32f78185630fb10290ba"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4d18de13-d9d9-43d5-a5ec-9fba23d23ef6",
        "line": "2",
        "column": "21569",
        "confidence": "MEDIUM",
        "file": "themes\\fresh-center\\js\\jquery.min.js",
        "code": "Math.random()||.1,z=x.length;for(k\u0026\u0026(j=g===n||g||k);s!==z\u0026\u0026null!=(l=x[s]);s++){if(e\u0026\u0026l){o=0,g||l.own",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "fc28a5e9e360e6913e1f0415c6ff2a28ea07c620d204e048b60dce3b46c5b5a9",
        "deprecatedHashes": [
          "fefe6f048b281b7772800161eab71198487cdad71fa5388767c6c02a82a206a7",
          "895e766fd7f604c3c93711f7c3dc7ab9f3ddf3bf400f1c387ffaa1ff6c882cdf"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9f26be21-c4b2-44d8-8b91-92b6a0c3b90a",
        "line": "507",
        "column": "455",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": ".addEventListener(\"DOMContentLoaded\",Mautic.dynamicContentOnLoad);}};Mautic.testMonitoredEmailServer",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "ae026aad8a9bc4d2c9a8ed0d6ea64dc5c02972f6e03933191a8ac8ae86774695",
        "deprecatedHashes": [
          "50fab6033b30154a356e57e7f061881babba9c2e0da1ad0119aec0053e1fd553",
          "bcb875bb9dd7a378dd0087d9da5583231ea10005afd73e26fa0983811f407f1d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6ea81660-fc83-4a4e-9892-3143418730e9",
        "line": "15",
        "column": "160",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\app.js",
        "code": "alert(mauticLang.popupBlockerMessage);}else{opener.onload=function(){Mautic.stopModalLoadingBar();Ma",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "2d182d170d1c2d299ffb2cbac5e2df825472228a8f86e9566f23d34bf67bef7a",
        "deprecatedHashes": [
          "4d44e05b1e618a56abb60cc48ce832a1e3a2084dabbcf53af9d3528a9767f862",
          "5f50323e5facd95a0e3f4aaaebe913758e56d0c2b6a595e0b74d1746038fa2eb"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "85f3cc27-8983-4a0d-968c-3913b0f9ad4b",
        "line": "27",
        "column": "659",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\app.js",
        "code": "alert(response.errors[0].message);}}}",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "a60f6bc6f042e20cc43da2bf67c74f53a0c7661e0604347094e86728aee2130d",
        "deprecatedHashes": [
          "31e14bbc1630ee3e9b970dae99d60b8fc35c2ecc2cd7e46b0f2526aaa35cfef8",
          "bfcbe6fe68d1a241408b462681dafcfd3ec0a2b0c39d92eeceb8e271e9579abf"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "25a4104e-a503-446e-934e-46633ba9fdbf",
        "line": "53",
        "column": "381",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\app.js",
        "code": "alert(response.errors[0].message);console.log(response.errors);}",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "bbc262cbface651c06b2999bfb38153d164aa7e2fe2da63d82c5abfe4cc2869a",
        "deprecatedHashes": [
          "ab3dd25d01d6f7882ea570e2af921d169cd8980aa162e7faa467fc148182ff37",
          "81239ef72a8f9ba2e028653fe5040b1c56b8cd264a6bdc178b8ff38675f43398"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "00391470-2eab-4b5c-87fe-4b1b9d689e78",
        "line": "159",
        "column": "214",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\app.js",
        "code": ";alert(errorMessage);console.error(errorMessage);}",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "d82db6a9d00150f332dccabdbe8fda71804e68289e449a25ee57057beaee5f3e",
        "deprecatedHashes": [
          "24b1ee459d51b561ba868006cfc1d766cb32f6f27b0b00632faa832e34ba107a",
          "a1dd91b00aa2f52c8ffbbe04e01e8e263f3fe558ad060be3d43b660b3e5d097b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "714524d5-7b35-4c5b-a862-5213edd9c9f1",
        "line": "177",
        "column": "300",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\app.js",
        "code": "confirm(Mautic.translate('mautic.core.builder.theme_change_warning'))){customHtml.val('');Mautic.sho",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "dc7e864b293339ec7ea7edc1b2ca04d2ea5955e179cdfb3f230038ba75ccb15c",
        "deprecatedHashes": [
          "e460fc91a316be79dcae70f6f0ed2c459edd9b9385f3682fae31ddee95974cce",
          "a47cac509586e50b732b133851b9dba1f3771d39f19eea24acaf5a73c4fa8f47"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6e39b3f2-887a-468b-8093-d2170d56b193",
        "line": "181",
        "column": "435",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\app.js",
        "code": ";alert(errorMessage);console.error(errorMessage);}",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "77fb92fa41b3c2e981339307d3b503aadc994800e591be50333b297d78e7a833",
        "deprecatedHashes": [
          "bc78c7334c0218ca753ab3358958d1fd264eafe269de7a11a6c04825654f6a03",
          "a09258a79b3feff4a2e9e1721d6f461b8633e5a31a8731103e3c1b80d534ec62"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "301ff2ae-ecd5-43d5-9f91-e3528ed3063f",
        "line": "190",
        "column": "615",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\app.js",
        "code": "confirm(parent.Mautic.translate('mautic.core.builder.section_delete_warning'))){var deleteBtn=mQuery",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "9d2910c702122a07d9dd2bf371ebdf8a91844d417e533731a7f4eb248e853fff",
        "deprecatedHashes": [
          "71f3097f7bfa54a81c9fff383f1a36f0826a7b904f78684b33b4e622c453a39e",
          "62f8150ed95d05ad204d97e43d44bc5c00beafcad701b8e6c574d3b1d540144a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8b505245-6a0a-43f2-a927-1e58f347eae3",
        "line": "327",
        "column": "178",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\app.js",
        "code": "alert(response.errors[0].message);}else if(response.error.message){alert(response.error.message);}el",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "c67629030ea1c06612fc7e5bc0169a27340ea4469789a15973b1c660242ebdd1",
        "deprecatedHashes": [
          "adb954896069719cc790b19da162e7d74bf3014307537d65f3d355e7d3571bf0",
          "c2cf17e9e9ecef5814a2d3c0531c7d60d4642001b92cf422602ebd0c319c8c59"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "427e0227-968d-4e32-beb8-fb9a3ad49a36",
        "line": "502",
        "column": "103",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\app.js",
        "code": "prompt(text,\"\");if(name!==null){if(name){baseUrl=baseUrl+\"?name=\"+encodeURIComponent(name);}",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "6f2a3a8bba604f19b36e9dadfd0756e2fcef276e8f5429cbade3efe29ed3b247",
        "deprecatedHashes": [
          "98c54413cea2aba43104b1244987cb3b19da219bc5d6d0a2bac43b73e7ce0050",
          "23102b7fa2ac31bda2e099df2344fcb567e9a2feaa16296c8f208af655759700"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9eda048d-91d9-4145-a051-ace58a9d55c2",
        "line": "503",
        "column": "78",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\app.js",
        "code": "prompt(text,\"\");if(name){mQuery.ajax({type:'POST',url:mauticBaseUrl+'s/dashboard/save',data:{name:na",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "c4f1fd8bb0fa225fd7f75fd658a234a7364fdbbd05b2f4cbaa457498ed9f142c",
        "deprecatedHashes": [
          "8d9fe89382d7c38c6a4f304e622b8064400518c789f622f0f1365e5505954038",
          "e82a3b420561312024e4d057826c7eb2217670859a112b15dce3e1dc3aaa3062"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c6949f49-e171-42cc-ad32-f30c3540ae4a",
        "line": "657",
        "column": "952",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\app.js",
        "code": "alert(mauticLang.popupBlockerMessage);}}}};Mautic.refreshIntegrationForm=function(){var opener=windo",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "4c3ee35de0493cdcbc0548c4725bdc8ba3227d668e6fbbd001d4d3d8e6492f63",
        "deprecatedHashes": [
          "0bc715486d0487fcb440d4b1abd05264b49db58f8f89e13d5da9c97c3872d7f7",
          "7ba8beccf0a9c60309e94fa87ef47e65be303be41633624fa53654ce8955b755"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "39a4550b-2dd4-4228-8925-2e57940a09fe",
        "line": "721",
        "column": "160",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\app.js",
        "code": "alert(err.toString());}finally{mQuery('.website-placeholder').hide();Mautic.focusUpdatePreview();}};",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "69ce0738ae2db068079cbea7c062b19398ef15f7fa4fb483a7225747765181cb",
        "deprecatedHashes": [
          "056d6cfec927de890b337cd59b80b9bf2d65a1d7230b2304d227d68423dfb3ce",
          "f81f5eea1eda2977f203fab65af1cf814125e933b0bd0ef464d1ee97d8d0f72b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a23bb06b-8b8d-4b95-9507-6c3795882556",
        "line": "21",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(el).removeClass();mQuery(el).addClass('fa fa-spinner fa-spin '+identifierClass+appendClasses);",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "541a688a41fe32be1d5cd8a8831c2108a594fa25061e8de8a48b768744cdac1c",
        "deprecatedHashes": [
          "0cd2321f9e0bb4ebfb816c3a0be9d25179517b0ad2f396b57c2a33297e157b26",
          "a0269b1ba8af7ad1529c62f0d5319339115c6685c043be516bcceec8fe1de375"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6d13086f-163f-4a10-a5ab-4e5d811246d8",
        "line": "65",
        "column": "46",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(container+\" *[data-toggle='livesearch']\").each(function(index){Mautic.activateLiveSearch(mQuer",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "1f4f26d180947cfee1d46e3e1e3aeb1dbbdb888237d0ac02b3a26cb219dc9a6e",
        "deprecatedHashes": [
          "c6cb07ed957113bc6abfd657f8c4ec26b3767e8bdf68c92ff7b36fd946a1c362",
          "29179be237639c4961461e528b2908af1353851e289d6680d325965b1e46ae26"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "168d381d-3a29-4bc0-92bc-481b27264dd6",
        "line": "66",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(document).ready(callback(this));});mQuery(container+\" input[data-toggle='color']\").each(functi",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "994a89b81746a5a8ffcf1985ee6ad90d8714dbe153ddd4a1fc86372d7985e8f7",
        "deprecatedHashes": [
          "9e57bd02616ae77493b2ad96c6bb26bffb31daa46a348332f6b0bd723dd6090f",
          "34735aa043023d9d0fe007ae138d810c1a28b93177509c232daf3797209a07ca"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ecc5c082-1efa-42b9-aa47-95d9d34afe11",
        "line": "69",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(this).find('a').on('shown.bs.tab',function(e){window.location.hash=e.target.hash.replace(\"#\"+p",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "4fca3f1801a8e27062109dcfb99c1ffbd2ee8af1a53ceb720001f77908a558cf",
        "deprecatedHashes": [
          "a7860e79998baf239e8d40b0570aedc7a379f2763b8fe65b9959b691654fb1a0",
          "a3d7677eb2aa971b4dbf62ac0188cd89ba012555627a002428b9134c71aec547"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "dbca69ad-025e-405e-83e5-8cbb246285a0",
        "line": "105",
        "column": "14",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(el).attr('data-chosen-lookup');if(isLookup){if(mQuery(el).attr('data-new-route')){mQuery(el).o",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "34556e570ced6f605a8bde9b275c4d0c388e2b77e02b051d6b2054bdbf9e17fc",
        "deprecatedHashes": [
          "309a8847b259e095c5217d87d59e94352611f70ada24c4d3e16e67c2f0cae348",
          "39747c4de80d165188e69bb5232c335e793645cb65e13260a2e908fafdfd0f91"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "414f7566-b239-4ba7-a347-65b487a1835d",
        "line": "108",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(el).chosen({placeholder_text_multiple:multiPlaceholder,placeholder_text_single:singlePlacehold",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "cfedda59c0f0ed75fffb964c1281ce75213ae059d86d11352e9df0a2dd90150a",
        "deprecatedHashes": [
          "ef962eb70644d22c769748c85b753fc4456fef15b250b15d4fb9d6a06c65467f",
          "8f259c4c197d622a829b78f22cdd1f2a80e4bc759060eccfc010d647b91ba326"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "07f5cbb8-3f91-4f14-80ec-c8b5e8b12757",
        "line": "112",
        "column": "39",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(\"#\"+field).length\u0026\u0026datum[\"value\"]){mQuery(\"#\"+field).val(datum[\"value\"]);var lookupCallback=mQ",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "0d19b2896803b860ca24357e4a2c9ee4139932c39b5be404b7da561d9dfeee39",
        "deprecatedHashes": [
          "a555c49e964eceef7b9e38979599b37226549fb2202ee50d0c154bac37ce0045",
          "aca14ca9cd991322f0ae9d129a1b0b1622758422d90229d1d4de9cf7f7f1aace"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7d96c1c1-592e-4bb8-a06c-253dbe513b67",
        "line": "121",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(el).addClass('calendar-activated');};Mautic.activateSearchAutocomplete=function(elId,modelName",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "767c6547dbfa0824c1b940964669b415539e4d1804ccb79e4ac33f8d40fe92c7",
        "deprecatedHashes": [
          "633930d337ffed052b7eb70bb227ee8c056c9f317227f54062f2b3e4f88eb61d",
          "d4c0db779871bd259359b48e8e0e237e4bcc114d4224495d3abff7eff30b8be1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5307d9f1-1e22-4cd5-83a3-7c55870c403d",
        "line": "154",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(this).attr('name',name);});}});};Mautic.closeGlobalSearchResults=function(){mQuery('#globalSea",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "a434959737067ec624ddb08a7fa055b28adc02f3305144891f671271500b9842",
        "deprecatedHashes": [
          "22d30cc8725ae8c98e290a2c6e4aff8dec74ef7eb5d38401e3a135d41dd36d2c",
          "daa02acff6438d98eb13377b3c67ec733be9ef6b15e4ecb9ab91cb29bfc858b0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4e6d00b5-fbd3-4f79-9449-e317368542ae",
        "line": "179",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('.theme-list .panel').removeClass('theme-selected');currentLink.closest('.panel').addClass('th",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "6c53825e9c86d1b9769993cd0fd44f551ff82ef37c09b9e8207848fb80991063",
        "deprecatedHashes": [
          "c9f77befc68beb4257b514268023a65794dd6b2b97a31af87d3afc0ae2bab5a2",
          "5c0a24c027ebd4a31fda85611e31271178c08d2b9359e9d0b14e87dbf9294715"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e001a279-8833-4f4d-94fd-7f1d25cbdcec",
        "line": "198",
        "column": "41",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#builder-template-content',parent.document).contents();mQuery('#section-type-container .secti",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "c48e05e178928fb65ee97d7aa8f6d7c8bf834ba43a3213a6c7223a6834a28fd4",
        "deprecatedHashes": [
          "1f8097537b11c555e3aa79683d6dcffdea7480d1c6cb5205ef391a995443be70",
          "254713a0fda442f52142e96bfe11666e77c4cea63920dc8ec78f581c0710cc86"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "82e878af-30b5-42bc-85e3-3c6b2c71ea01",
        "line": "206",
        "column": "40",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#builder-template-content',parent.document).contents();mQuery('#slot-type-container .slot-typ",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "d22876932aef22700ec25968810d0d537f9e442b85ac5c7de81b33ddfe5f8139",
        "deprecatedHashes": [
          "0c5fc697bb28484a17721385d8873fa20d8cde9686107b876815d57d7478b1b1",
          "e6a9304e5fab3d1be0fdb576cf0768d5dd085f7a8d751144d5fd66bd4e8388ee"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f0685359-318a-4274-9dad-f23866a6cfb5",
        "line": "231",
        "column": "1659",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(this).closest('[data-slot]');if(focusedSlot.attr('data-slot')=='image'){focusedSlot.find('img'",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "362c5217d4676a1b1ad9b08ec77073dec9e861490427b252d731d32ae6c158b2",
        "deprecatedHashes": [
          "b7ed7c3fc86f8018fe24c949752183f2c8903bfb10419c184b37191a81f1e408",
          "d40b71b88ca4dd9823f7a08e493cb45c8342a1df7c41c45ce78ff3d6f0780649"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9fd651c4-9884-436a-bf29-06f0a9174d8c",
        "line": "232",
        "column": "62",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#slot_text_content'),params.slot);}});Mautic.builderContents.on('slot:destroy',function(event",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "27b67e938906251ba4d7b2da120d76e78b5ec6b451c5eea265d402400edf6def",
        "deprecatedHashes": [
          "b8b0f3e70c6c9e34d80167bfdff67113ab2dfc7f4463063f09391d65b959f0e8",
          "8cb9da5aa3100af620461fce76dee26c2374d944eb31e70431bd6ad6c939a2bb"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a4e19736-99fd-4a62-a98b-94e91740d633",
        "line": "234",
        "column": "244",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#customize-form-container').find('[data-slot-param=\"'+field+'\"]');if(customizeSlotField.lengt",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "ddd2e7fcdbada78c7effcde6279d26de78c90683c9b7d5dab034f68d86f1ad49",
        "deprecatedHashes": [
          "8e2da2ebef2a3211d99acbcdb75279515b76e4d5176fe7e73086e125b32fab7d",
          "769bc80cd70314c26794db5266fa8358a474c821f4dfefdb3bc40046a295a846"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0053213f-c757-405f-8e7b-9d214eae4590",
        "line": "256",
        "column": "267",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(document).on({\"chosen:hiding_dropdown\":function(){mQuery('#app-wrapper').css('overflow','hidde",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "4e415c6969dd01a016252c31eab990bd00c53ea6b6dd9b39d9f71945197dc298",
        "deprecatedHashes": [
          "2146668b481b9a40154ff3f8e272f8bf6229d9c25a584fc2cbef734601f7d3ec",
          "70fc6c62ed2402928c03f01f99cd57fff617738a4f1bb3c0162715bb76f56335"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c0aa69de-23c4-4049-9a72-06dcec7eaa4d",
        "line": "263",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(this).trigger('chosen:updated');});};Mautic.postForm=function(form,callback){var form=mQuery(f",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "fcbc08747700364c44fe8eb3a46f46af947202ad9ce57c40b097457ab2f3f4a6",
        "deprecatedHashes": [
          "90a851b96fdb03c11d64d7d5a45e046bf8b515ac44a2576ece5eb33a0d8703cc",
          "46c4e0f64f0a4fca9d8d35abc3992655abea9eb64f4c878bb8ee0a7b59742d71"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "10dcc68c-9678-4c98-81b8-257c43ac108f",
        "line": "271",
        "column": "121",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#'+fieldId).attr(attribute)!=='undefined'){var field='#'+fieldId;}else if(mQuery('#'+fieldId)",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "b52e66d71b4fa66621db2c906a215ab7c52c3c2a8f460c215b6173889b54f4eb",
        "deprecatedHashes": [
          "2a71df8bbcbdb674eafc3a54897ddd28fcb09be5f688dcc5663eefc065267aa6",
          "b69be6270038d50e3b41e9ec9d03214fa3537fddf788ce3910402736ba2cf6cd"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "13dcd2e5-a576-47ea-8e8b-617c95576d37",
        "line": "275",
        "column": "324",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#'+fieldId).closest('[class*=\"col-\"]');;if(show){fieldContainer.fadeIn();}else{fieldContainer",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "11f0cc986cb8fe3f6b6dbd05772bb8a1f50d76969b9a3260095c057d9546d637",
        "deprecatedHashes": [
          "58b222e5412b128fc6be44a7bc09ebceeac75ea72968d0b8728b85e78ab1f15e",
          "e08353085ef30a2646d4a8f2065113bb061ee39deed3244d146f4440f52b1ba3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f627e4f4-6a53-405c-afb2-c7a815fede32",
        "line": "304",
        "column": "66",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(container).find('.available-panel-selector').each(function(){var sortablesContainer=mQuery(thi",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "a6f65bebf72c4626b4123c062cc75e4b3d0090433c70fc6d76d7136f53dc03e5",
        "deprecatedHashes": [
          "4bb786b184f0b3e30c71631d4eefca95d45a8f29dd87b4cf9c2b4f7a7dbbd275",
          "f97adcef71593caa8e304c99703320f42dc0009c71c3ce711d124346edbaed2c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "86fa49bb-0b86-4f9a-a48f-e4c42a842b8c",
        "line": "305",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(selector).val('');mQuery(selector).trigger('chosen:updated');});var bodyOverflow={};mQuery(sor",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "90b7a9cb7b13d5b3e97e6c75a3f7be1c4ec1f316d15c9717771cc65d48cfaaa9",
        "deprecatedHashes": [
          "9503f0c727a29a8dc74c09fedbf5d8b03a520181259125a91f6976d6d1ecf9d6",
          "55f0a290a7b303ff081319f55622619992c5f2be5f24490ea53251aadd246ac4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "45779db1-5080-4cf4-89a4-9f888bf739c2",
        "line": "372",
        "column": "80",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(tabs).overflowNavs(localOptions);var resizeMe=function(tabs,options){mQuery(window).on('resize",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "628cf35e7262e2433a03f0503d1dd2df8a65df76e0a87ca4a71679caf7109fe4",
        "deprecatedHashes": [
          "bc8bc017fdf696a7bc1f37494308b544bf4ca5a5e207a8e1878e19506ebd79b0",
          "9d4bb5fde010e8401f7aeeef1ae327f568241014e5b432a8d5fd6bd854d5f066"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "cd98abe0-31ee-4dbf-b38e-ea796d952328",
        "line": "388",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#client_name').prop('disabled',true);Mautic.loadContent(url+'/'+mode);};;Mautic.assetOnLoad=f",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "3a8844f953b057d5a501773a07584d084e46195d54ff3b5e0c8feb37c5847922",
        "deprecatedHashes": [
          "5b87dee3fd8c4f3626d22afde021fd18b022ed0db25c0324fce32b92cb90af2b",
          "bcfe288e911f7db2a6c2fdd8d883b928683c83a501157afd827fc0de0503e51d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "63b6f138-99c3-4ac0-96af-6c367b337964",
        "line": "406",
        "column": "4",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#CampaignEventPanel').length){mQuery('#CampaignEventPanelGroups button').on('click',function(",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "dbd2b5f18ef19473ffc5d1854352e095b82beef14b1f3a369cbafe6b3b40e22a",
        "deprecatedHashes": [
          "6d608efc135b21ab26befe2738047eaceeea6eefffc0261a78a9209bf663a5f0",
          "c710c5562a226bd7ebddbb446f6a1538a512b7dbd6121be55bd606d1104ebc4e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f0408d47-a215-466a-93e6-5d9d474e210f",
        "line": "407",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('.campaign-event-selector').on('chosen:showing_dropdown',function(event){mQuery('.builder-cont",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "f5b1c2f7e24a2d243c159a9039f4270d2a063fe585025e53db216a995f371a9a",
        "deprecatedHashes": [
          "b695cb1613210f99e2f15f8530666bbacd669ea586704f65316fa611fb4ad490",
          "ce0533d0b785a555a286c756187657b9804c5f5fc09975ada3ef561b6428e191"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d0f2f018-19e8-4cb3-99ad-986008b3313a",
        "line": "408",
        "column": "12",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(this).attr('id');var option=mQuery('#'+thisId+' option[value=\"'+mQuery(this).val()+'\"]');if(op",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "ee5b696630ac01ba97122e30c2fa0ae9e350c6328e9f4190cacbd81e8d4bef05",
        "deprecatedHashes": [
          "5ca59b038c9a4faa97aff5d887f4e0b5da7f0f1b8a6047f5dd77d96e8da69947",
          "4eccf2cf768fab8b27af5996093e545dc15ebab0c8db577c1fe6ff313a0f8b19"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2e7e3d63-3c68-48b7-9677-7bbad6d450b1",
        "line": "409",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#'+thisId).trigger('chosen:close');Mautic.ajaxifyModal(option);mQuery(this).val('');mQuery(th",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "5a8b4707b73f481bb1eec2948b564d0321a6186e9958e0edecec2aad0bd4a993",
        "deprecatedHashes": [
          "66d685fdbc2fb1d36c4f1fcb2330b8d08daba930ed8d46aa21f46b2ed2513fb6",
          "b36ee7af5bb1c0526117bab62b9fd9f46fcc1b35fcd44e8def36118936ccb8e7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "97fbfdf4-2842-4725-87b0-9fe2bfd136bf",
        "line": "414",
        "column": "412",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(eventId+\" .campaign-event-content\").replaceWith(response.updateHtml);}else if(response.eventHt",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "c057721c2e59e809c6ee52af1caf213bb0300e24d28e91838507544352eb936b",
        "deprecatedHashes": [
          "649a126773332484e49d1474da4fcb3b4e1fd101b61ac5e61d6770b327078fa2",
          "e483b4f5b7ddf9e2550100269326deb1509082044c4bb58c8af29839b3cd72d0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4f6de4ba-a080-44fe-9092-641704e43f69",
        "line": "418",
        "column": "314",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#campaignLeadSource_'+response.sourceType).prop('disabled',false);mQuery('#SourceList').trigg",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "0457b4c3d40a5ae23070048d58a1db65f2e1b6c6821506323f8cb2a64a3bedf5",
        "deprecatedHashes": [
          "7a4d49e567bd1fc426a4654d772eedc25cbececc6568a64ddea161d2e6beae6b",
          "770b03c101b5fc37a96a7bf67a4989bf82624d2553e061425b96c8f22d8d42c8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7b8ca92c-d439-40cd-bedb-44d31cc0d1bb",
        "line": "426",
        "column": "2619",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(params.el).attr('id')]={'left':parseInt(endingPosition.left),'top':parseInt(endingPosition.top",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "5319f7451b88e04296c195cd776f6a01b99819ee418dc0c7a2905430ef0e9d18",
        "deprecatedHashes": [
          "e19cbc378f940511d43f4c156626a3077990fb9def7775d3de4d13479b06671e",
          "0bb0cf2cacf749fef46e3f792fdd2a34e42e37489f7f6c8f124bebc7cbe5dd1a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fe47aa64-4e17-4cd6-ab88-f9271acdc45b",
        "line": "439",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('.btn-close-builder').prop('disabled',false);}});};Mautic.saveCampaignFromBuilder=function(){M",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "96da24d6a3f95fa696f138604634fedf601e982c825a241b04f4a9c71c380eae",
        "deprecatedHashes": [
          "47cadc9d8dc3f10bfffa7a5e7b8a256baa3226a6bb94c2f6d2b3027dccab8214",
          "574f641bc2f51e576b3bccac6467afd42ff66c85f10963087d1110cb05167894"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b01aec40-115e-4cb4-a614-774a0c52d31f",
        "line": "475",
        "column": "130",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(selectId+' option').each(function(){var optionVal=mQuery(this).val();if(optionVal){if(!Mautic.",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "6e6d1d7addc2834b03c05289e55ecc6ab32da9c673fdf5414e5e1e2206dfcb3a",
        "deprecatedHashes": [
          "104efb49f9ab24f046c3844798be7613e659676457480075e82b3e2eea6f48ab",
          "893cb5ce2d2ed2e9a7e5cb62906874dc2c6b54054ff6fa5ca5e3530bf4b6e556"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3117ef8d-5f77-4f79-a1ac-80e320471cc2",
        "line": "476",
        "column": "137",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#'+theGroup+'GroupSelector').removeClass('hide');if('source'!=theGroup){groupsEnabled++;}}els",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "4de35b5a932eec7775f0d984a3b7ed617657b0bcc0fc565f36f10942f920a792",
        "deprecatedHashes": [
          "df92aaf4a10fe0dfacaceadfcfe586062fe868325a99eb666486f86985442a91",
          "41123eb0cd532ef0cb2d3704406862bef86f4c47b86f8235c3e7123aac1f05b5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "17cc2f38-c7a5-4a0b-a304-8948dcaeabad",
        "line": "478",
        "column": "111",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#'+eventId).data('type'),'event':mQuery('#'+eventId).data('event')};};Mautic.campaignBuilderP",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "567a3d4e3f243687d30850cf0faa8c228b717ab9832ebaf7e4c6938869403221",
        "deprecatedHashes": [
          "bdea02a11e8dfaeb04658f366fbfe95070b6dc0fb4d750eb9db41cef273d3ad1",
          "6c7d8dd44df66ec40092b4b12f4323c668b5b9a3947f5b5c968c9bdf7ef6fb13"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "165a8062-eaf2-443f-8c4e-5fbdd998c626",
        "line": "484",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(input).prop('readonly',true);mQuery(input).datetimepicker('destroy');Mautic.ajaxActionRequest(",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "61ebafb378b1d98b0524ea44702c8815e46a845a5aac62cb673f2692fc4a6728",
        "deprecatedHashes": [
          "a221c0ccfe6bfbf3268544320f589c7a1a8a1c55b1083edff34ab7e31bcaacd8",
          "042ea1e084661c504497f9b3cfeaf9a660590bc2750eb74fca9af64c1b73c47e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "26f328f9-1bfc-4c6a-92d9-809f6f32e179",
        "line": "485",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(saveButton).hide();});mQuery('#timeline-campaign-event-'+eventId+' '+eventSpan).html(input);Ma",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "57fa846424c064659a3e299e183d6ab1a19878657667013d8c03c1d23a4f58d7",
        "deprecatedHashes": [
          "575c0bf647dbc8cc38e2d0ba3814d8feda4024e58728559d0fb2217413c77c19",
          "60107f629e3e27401deff36ddb96c710b259e9080ec0cc18d5c3595ccae4679e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0f0f91cf-6143-4c66-9933-8bb15ac27f39",
        "line": "490",
        "column": "45",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('\u003coption /\u003e').val(response.categoryId);newOption.html(response.categoryName);mQuery(\".category",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "a013e440323e5ffa17a46f5d3ab60a0308143e25a12832082f4260131cd390dd",
        "deprecatedHashes": [
          "6dbbd54cf8fa82fcf1d2a7fa4252b117165024cfda187be1dbcad8f0cd5a68b7",
          "1bf41dd0555adf8fbbb3fc497572fd560d113ae5f17cc92b5004282ed113bbf6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "53b7de84-b9d7-4134-bc3d-11ee6a596084",
        "line": "510",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#'+mailbox+'TestButtonContainer .fa-spinner').removeClass('hide');Mautic.ajaxActionRequest('e",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "3bdeafa33bfdb4ccbdd8cecc57db08e361b481a7fa36fb7486ddeeee44741d9f",
        "deprecatedHashes": [
          "947d33ee026b542e0c63e1c49b43d0c4f9886be4332ff13149373eb9f77b745e",
          "bb97857a96499d93b749eb115e3f5cb5c002d2964e14324de9d8899be15969ae"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "93c5ac5d-0fab-49f8-8deb-5b5cfbe1eb10",
        "line": "517",
        "column": "325",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('.btn-send').prop('disabled',true);mQuery('form[name=\\'batch_send\\']').submit();};Mautic.email",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "f8a8a78e1241d83c4517010a5fa0e231fdcc5959a53ca733ebc5c0df3146a702",
        "deprecatedHashes": [
          "80006d5849d76d476b4f703a426907f7e5e4a1098aac0c38838970a5fe7da83a",
          "3aafe1cd94142571ed4df5d65235d89c1b5dc05b707a37448488e8e327ba1fbb"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e79dd116-c41e-4a0e-8779-5cd52fff5e50",
        "line": "522",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(origin);if(email.length==0)return;var emailId=email.val();var disabled=emailId===''||emailId==",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "a1b98a0409f7fe4ccdf6d99e6d6ffec9edb7af311832fa2e53c52495ab2de972",
        "deprecatedHashes": [
          "bf1577caea6b5e91116c560792b4437fe553bbf98415e4c79b07e65e0c433272",
          "cac3e3969baf6b345b01f8175c727b0fe30e94a199797b42388225d7c5400cf5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4212c5bf-1294-444b-8f47-5aadfd4ed4b5",
        "line": "523",
        "column": "205",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('\u003cli\u003e\u003ca role=\"tab\" data-toggle=\"tab\" href=\"'+tabId+'\"\u003e'+tokenName+'\u003c/a\u003e\u003c/li\u003e');tabHolder.appen",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "88b94ee67bd9a58025fa0ef5bce137b3b91babd327338e4f817f63f6a0f29c0f",
        "deprecatedHashes": [
          "16474bdf78ad478f8a955014f2429a5d2ab563ef9103b5a582293387a195a3b6",
          "ec5b99f4dd49d5c9711fa51c3e5f3daa18bbdc751997b759a15820197dbaaca5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "46e99c27-5cc3-4f07-9261-263004b5d7b7",
        "line": "530",
        "column": "214",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('.tab-pane.dynamic-content');var activeDynamicContent=dynamicContentItems.filter(':visible');v",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "ed35616b088c9f134a11f8444baf1d757239d1d45b29ba208cd8f71185216aba",
        "deprecatedHashes": [
          "affcd4c00b2c8ff925c7a2b3f6ad2c491eb91e73a592fc57b9ef8ea4cca52536",
          "3364943a174f6fa8fb64d88749e87e069fd5e7c3aaf848484f9d7c41067f0b63"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c8efa9e6-5f80-441f-92f0-2cfaf498f5c9",
        "line": "535",
        "column": "717",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('\u003coption\u003e').val(index).text(val).appendTo(filterEl);});}}else if(fieldType=='lookup'){fieldCal",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "40d56c4568cf03cd9e3a3b7f0f7e87c57f78bef811b98ff8743c594a6d2e6b1d",
        "deprecatedHashes": [
          "90b92256206bb1407dc487a6431902d137bdb69aa60b1f0797cf69d73b988c01",
          "5b0e1763fb4956416c6ea3dad9091aed9755dc11f266b421d255dc10e6a9eca5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e91c3d65-c674-4946-b1da-8cf73d99a29c",
        "line": "536",
        "column": "15",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(selectedOption).data('field-operators');mQuery('#'+filterIdBase+'_operator').html('');mQuery.e",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "562399027288064f81933a18dcedacfef85ae58b9b123263bd74d7dd799e830c",
        "deprecatedHashes": [
          "53638e8d22d0c88a97f560cc6975db989e224bd50121705442671fd921b182a2",
          "62cc1d1c133f0d6a62af23c04290891a33666aa5e139ad74fb101cfbfcd7f882"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f73744c8-7ed2-4929-b3d5-87d8bd20a462",
        "line": "541",
        "column": "21",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('select.form-builder-new-component').change(function(e){mQuery(this).find('option:selected');M",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "937fd71226e39cb9613c0620032a329862f279f8046519169cf73320ea3f4924",
        "deprecatedHashes": [
          "f89b7b901ad324681249c0193ee6671111bb457e5d71340278c3eefdfb429cd3",
          "08a59d877cb029505f27273027990d2b1033d7438d2ac66b0034e019bd707af0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0efba9d1-20e1-4bb1-9a5d-2c1aa880abad",
        "line": "545",
        "column": "94",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(field);var fieldValue=field.val();var options=jQuery.parseJSON(field.attr('data-field-options'",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "59da07dbe60944d63bafdabe76504eb922362710287c6b613db45b0c6a6b033e",
        "deprecatedHashes": [
          "e74dfeda96281b8de45d71e0a62bc823715e392a30e85439eb3162c25d5e3070",
          "21c673edb8118439b3f8113a9cf10100b4661b210ff91f1c94f8b048bc94d555"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f588eeed-ccd8-40a6-8795-21cf23b5b3d0",
        "line": "555",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('.available-actions select').trigger('chosen:updated');mQuery('#mauticform_formType').val(form",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "26db33e3ca8e9a8a7e92b08289deceff4351ef271e5424d114c01284ea6205b4",
        "deprecatedHashes": [
          "200bcc8b9a45723209ef76e946bea326db3b8af99cb295d81b6f0b1ccb3469ce",
          "5b0c1f4a1ea7f3af1296991f53e7ad80f3940377cfd95c753f5e752601bdda29"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5b6fd09b-c6b3-4078-8199-106d74e8658f",
        "line": "561",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(modal).attr('id'));var obj={};obj[fieldOption]=fieldValue;Mautic.activeActions[requestName]=mQ",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "32ba6bbbdba37e4dcbbdf9c82926d747ea60a9c48282b100cfc10e0d933f7d16",
        "deprecatedHashes": [
          "43cbf19d8f6b3299aa9e341c53fb34c0a8a940138131e2cdd1cc3dc3156c966b",
          "2496bbfa3bb0c662e35362ef2939dd2fcacad6c392c2d6c797b892282a26957e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8f9348d8-ab98-449f-a02c-732aa8cb46b3",
        "line": "580",
        "column": "4",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#'+prefix+'_filters').length){mQuery('#available_filters').on('change',function(){if(mQuery(t",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "4e431056d91157bc734cb2e5f3476d59ed2a59c6d8da97052d65ceefabda8f0b",
        "deprecatedHashes": [
          "cf2d6658850db06159d8944f1819c46072263bab14e634c32301e9b38aee9a85",
          "2d2e8577c18c6a3f65d0f3e752b0a0af86cd294e3a58447240de8f495b4f2100"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "32bae7ad-860f-4ebe-a6c9-47f38e9da90b",
        "line": "582",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#'+prefix+'_filters .panel').each(function(){Mautic.updateFilterPositioning(mQuery(this).find",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "fbb1eb9c0bb41633f35ace20933f4ad73754a706b2c9bbca28c3eede3dfd964d",
        "deprecatedHashes": [
          "320cc885fa936ebfa076a3278fd35e56e5e696f04c3b2a866773a109f47beccf",
          "2e009183d88f78658a94365aef6ab4fe861178b3ca4648d1c47106a5b96cf2e8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "03127cdf-83ba-4880-8414-894e15f8ec74",
        "line": "584",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(this).attr('name',newName);mQuery(this).attr('id',prefix+'_filters_'+counter+'_'+suffix);if(mQ",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "990092c36ea2a9aa9eb5131b1f92c871a931cadf417272ec835d561a7da06fb8",
        "deprecatedHashes": [
          "68a351ee6f9d7a24e0339ff1b71e5c8ef11cecde7e4555fd2e5e4fba6fee01e8",
          "3ca6f0af9988a01b8df6bdf5443e7f83dd42b60610b030813e3993a2db678705"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7bf11de9-762a-4626-b9ea-c767bed91bf0",
        "line": "587",
        "column": "31",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(filterId).is('select')){var isMultiple=mQuery(filterId).attr('multiple');var multiple=(operato",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "69a0e294a254b1af33ee4b32cda3d4e5a4b0bf334102dca8a4d0494890de5231",
        "deprecatedHashes": [
          "b6502c4c78579c3e1a5ed094c8af1c4cd37711bc5b496408b5e3b6b0169b9961",
          "d5674e0bd0e73ce25667cbf2112ea8938d9e6be8b69a81f37a63e147586c6f3e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "cb897145-f51e-410c-8058-f231f628247e",
        "line": "589",
        "column": "22",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(filterId));mQuery(filterId).attr('data-placeholder',placeholder);Mautic.activateChosenSelect(m",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "0ea0eed1db0142f48ce1af4c0200724a8d5cf7b60ead4f98b7c780ba3bfeba5a",
        "deprecatedHashes": [
          "f55f577a10eeede0683305e1fcb999937f3a5f89713f357395d9d0da2e1d455b",
          "5ead318f2906ae05d5d28005d1d5afbd44e6d6b1cc850b98c2368576e9c2d4d4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f1b58b0c-8d97-4bb7-8d33-5891eae4553e",
        "line": "596",
        "column": "112",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(this).closest('.panel').animate({'opacity':0},'fast',function(){mQuery(this).remove();Mautic.r",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "62389b3a528403e4c8374715d06cf4af02a1f692271125929bcfe2db91f30539",
        "deprecatedHashes": [
          "b6229cf21bf77435eb1a93d1b48fa6e7b6c6c62a6e6cf42b7972ac2eac8acc56",
          "28b17e4a64045dd745f8a8b4c9fe395c6bf6696da762e1458f646aa3262951cf"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9fe84913-6228-4376-aebc-acbeee096275",
        "line": "597",
        "column": "52",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#'+filterIdBase+'operator').html('');mQuery.each(operators,function(label,value){var newOptio",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "64b42a32c2358c4d69c211fd7e7caa2e1e3ac64cfc161d2abf8912a626143c1e",
        "deprecatedHashes": [
          "69ac27dfc28a0471a0f4194ade0dff471ca7b6d910ea4d2e6cfb89e3633c73a0",
          "e9d8ebbb13baa65fb196be1ab6b7a2536b14726215ec4ae623fe7652b697ef4b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "667e8e3b-b60a-4c84-ba1a-ba11d9c99964",
        "line": "599",
        "column": "4",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#field-templates .'+selectedVal).length){mQuery('#leadfield_properties').html(mQuery('#field-",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "4b0fded1dffc6f39bb4c9555c6f181862ca8e489c86448e817ddcc0ec0c62c54",
        "deprecatedHashes": [
          "de172ebfe455aab882e6dc7286941851fb6a6270908b3dbedf4f5258a2eab3bc",
          "0153ac2292763c21bd62edd3794ddcd4f9fd0c995318e9e42e4aa632282d42d5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6a0bcabc-ce71-45fc-97ad-45726d19df58",
        "line": "600",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#leadfield_defaultValue').val(selected);mQuery('#leadfield_defaultValue').trigger('chosen:upd",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "56cb9d936dfe23155376e6d4f1c544a6b296b1609f63b415b09c84742b87dd2e",
        "deprecatedHashes": [
          "49b5c9826fad66052265a0ee57e214096c8aabfb0399b541a295efbfaeb70527",
          "3fa5c067e0efc78ad9a2f52f8e0da0ba25f1698f35df5718d985621050d6c908"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "507ec03e-64e8-4452-a3c8-20d7f1e30eca",
        "line": "603",
        "column": "22",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('input[name=\"leadfield[defaultValue]\"]').attr('type');var tempType=selectedVal;var html='';var",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "551a37ced1086ebd600f4c45e0c440a3288cd49eec6b69f2af2a7043fc780331",
        "deprecatedHashes": [
          "95ddc8fbea21f92b9e13d09a54014c6e49cc0157b497d86225da02f94a208930",
          "af69bb08303a5a72390ada7aad4c01718214a47aad54f233ffac4cc2f5701fa6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e9be6e8e-b05b-4c05-9155-db3c1fa9a275",
        "line": "604",
        "column": "67",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#field-templates .default_template_'+selectedVal).html();isSelect=true;break;case'select':cas",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "ef82d8f5a80286ce28375c7afa3c2387ae02f5e228721553583bf24c3229882a",
        "deprecatedHashes": [
          "c4a780bf469e3fa79d9ab312f224a50e1a9a235bb9178f4571fc13fa6a85058d",
          "a5ea649b5816bf8fa8b031795a62c0e647fa8541f8dd25f2cf39646d23910332"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "37e01d9c-aa8f-4f2f-b2c0-95e99b658917",
        "line": "608",
        "column": "275",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#leadfield_defaultValue_'+label).parent().find('span').text(mQuery(el).val());};Mautic.refres",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "e34c3f594afef56cc9b163121bdcececaf594125c8526b9b4c19587f1e95b994",
        "deprecatedHashes": [
          "696b7be09f5192f2b8a20c036c90cba8c27e8232d25668b5fedad452c5694dde",
          "1f2ffdd5a6a39d036ce97f834a8fdf1d7ea2adf70ac81d3f2981375ee505889f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e6f02d99-2dec-4219-ae08-089686437d3d",
        "line": "611",
        "column": "232",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(form),function(response){response.target='#auditlog-table';mQuery('#AuditLogCount').html(respo",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "0dd9f4fec797f089dea281af7c0f20be0eeefe174d58d443d8a4780340198b6a",
        "deprecatedHashes": [
          "3ef3cd13cb07742a9efb436056ae614ebcfa437c035f87d590ae49255192c24f",
          "ec5a9a7aa94fad0d0cb76ceec2d4429a693762f28dc64b703c17159b8066fa4e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1b0826f5-495b-4279-b7c6-6177a6d09e74",
        "line": "613",
        "column": "24",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(el+\" *[data-toggle='ajaxmodal']\"));Mautic.makeConfirmationsAlive(mQuery(el+' a[data-toggle=\"co",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "53f9dff4d3aad70b6da71ac55511ffa5d485d2d55093875daa309db76ba97175",
        "deprecatedHashes": [
          "0204fa9c4f7f96ede33b0a5d936f2dffb4e106f29d13fe7f767024bedc541b51",
          "1ec1340cb0e53ea29fecff9b7db362eab0f3ed73e22d56702ab290fe1b155efb"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8eb94717-989c-4df3-a379-9fa8bff0e39d",
        "line": "615",
        "column": "83",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#socialImageModal img').attr('src',imgSrc);mQuery('#socialImageModal').modal('show');};Mautic",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "914c425e679e068eb58bf7d5b32434972cb0b55e258728b4fd444c7e1b3abb8a",
        "deprecatedHashes": [
          "3ec06c369c9c20105727e33a495ccb5e80c48cba5f257f577524d3701cfddd72",
          "369ec84df49718b87cd17e3dc990ea4d167d59f0e79bd1328fc385e2528387a1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "09adbbee-3646-4af2-a4b0-630c77d9a7a9",
        "line": "630",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#MauticSharedModal').modal('hide');return false;};Mautic.updateLeadFieldValues=function(field",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "b4e43e0d0593502c647ace5267c59375f042ebfba7ed9b169d5bcc5645c44e0f",
        "deprecatedHashes": [
          "502b967cedf56b37af511a399d8e0960ce8e1dea9e86c7c1d20c7bcac97ea551",
          "e53dca1164c3788a78bb3166e9697a07ab13a0a06aec6b5583299f8adfb2143e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b3168850-6c29-4a59-ab2b-861c34255c53",
        "line": "634",
        "column": "10",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('\u003ca/\u003e').attr('href',item.link).attr('target','_blank').text(item.name+' ('+item.id+')');warnin",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "d52ecb289037dbbf89f8447d13836b13dc33500772aa11b05c679f364dd65969",
        "deprecatedHashes": [
          "4164bb06d6cd9ac0c0c61f24fc4052a4b7bb706623100591b2b9163432ec3c12",
          "44d2220156381ce000d362a78637876042690e75362960e71f0653375fe24e37"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "723dc77e-15a2-4828-a116-0b0cfce5b0b8",
        "line": "642",
        "column": "4",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(container+' #page_template').length){Mautic.toggleBuilderButton(mQuery('#page_template').val()",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "9e2cc463c91a1eecae085380b7e3c2001e6d88bfc6065401bc3c99507de7e9a6",
        "deprecatedHashes": [
          "d2c3347f267f10b3515383380826bf7834ef7cb43d11abb5e00323117916a184",
          "232281db24b5c9f3dd4ba806e2f1870288756d1cecb01bc52e95c6c7c46d5812"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c5f39434-7479-4fdd-8f0b-75bdcaf2c026",
        "line": "647",
        "column": "283",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(container+' select[name=\"page[redirectType]\"]');var input=mQuery(container+' input[name=\"page[",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "e38f5db9e26722984b28947e33a1cd4247147ac1d8d457f7c097a98ba3c9cbc5",
        "deprecatedHashes": [
          "28f189005025ebb2bf7e26ac9c9435b9dcf1e1170a06cc23fdb48f85135c6d42",
          "c3e1524b46c8ccb43910e7efa05a30b7db98d2d914b4df003439339f94eaf3f9"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5ad5db0d-fd45-42fc-be35-7121f54c3aec",
        "line": "654",
        "column": "22",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#integration_details_featureSettings_'+object+'Fields_i_'+index).attr('data-value');var mauti",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "8f9c01b83b4c31edeef3977e75fd3cff907f37a9a66fc228e42db3f06df636cb",
        "deprecatedHashes": [
          "8a7dfa0d4ba2a76b00b4230ff09d40f90a308af6051512bb09a3a77c8ead3ff0",
          "a803437303ae67f0f6e5b94e4ca27233ca077ac62c1b507fe4253dcc3e6b2e03"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d09dad4a-e1ec-41fc-96c6-df6ef59f19f2",
        "line": "655",
        "column": "6",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('input[name=\"integration_details[featureSettings]['+object+'Fields][update_mautic'+index+']\"]'",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "c78639873f40fda388a7b8ba1206ee0241aa5718263e8f77a19eb70a3d27c73f",
        "deprecatedHashes": [
          "bf4a365789f66d84ef31ce971df6a05a2fcc47a6099116dff0becb043b7bd599",
          "3f3e3c32a1b80ec643a66bdf4701a82dfd551cf898b18c124f2406de11db2a2b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "cf009a43-3a50-4920-9679-a7ab590ded0a",
        "line": "656",
        "column": "42",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('input[name=\"integration_details[featureSettings]['+object+'Fields][update_mautic'+index+']\"]:",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "e7c7d0bb35a9bf798e2973b957e21f33d6277c17f1a803513fbc532c9bae74a7",
        "deprecatedHashes": [
          "27196a4ea7190bb453e1480a57ea92792a13602951d51ceb54b8e0eb690b0ad6",
          "3ddfc38ebda64b4c04d40abfae873881955762aa02fcad8605422da1911d16cf"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "91d645b4-d00a-40bc-bdbc-1bbeeda71333",
        "line": "659",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('[data-toggle=\"tooltip\"]').tooltip();};Mautic.integrationConfigOnLoad=function(container){if(m",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "eead8492358868c04016603a5fcff5be1af56e37cbeaf28a636881cfff7050c1",
        "deprecatedHashes": [
          "6f10f59be2c4a0ccd157b757797b6bad63834d32d1a367662c7f6737ea910944",
          "63e034996f4c800e973ac27ff7848877894771468cf5854f87c55479615d632d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ab85f43b-634b-4ca4-a75a-273d8a2829ca",
        "line": "661",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query(this).trigger('chosen:updated');});});selects.each(function(){if(!mQuery(this).closest('.field",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "2cfbb5a065a153cb9301d512da90a862d8e6a5b42bb24e60e1cb38554944b0cc",
        "deprecatedHashes": [
          "5cecd2e4227fe1485581518eb6db2f29f81099aff6061d920a33b46253747b99",
          "8545d25f671d59a0b31d5e8e4afcc7733fc6fa06ad6885ffdbc0bc287229c54a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "15c42569-0a48-4abf-b6df-effd65e6948d",
        "line": "662",
        "column": "4",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('.native-integrations').length){setTimeout(function(){var Shuffle=window.Shuffle,element=docum",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "99ede2b24f42b2497bab0e90aaea3ea4aa44dbfaf321481a980c504ecd0638de",
        "deprecatedHashes": [
          "c09a1856dc2db3ec5aebf7cf65c14d0b256b5949ddd72af62609531cb73635fc",
          "dccbd75168abe76bd64f895c65987f7b1119bc90ad0e8ef8acd42a5cd3e5ed3b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c9e97aac-5504-4c14-85e9-7c632b1264f9",
        "line": "677",
        "column": "4",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('div[id=report_filters]').length){mQuery('div[id=report_filters]').attr('data-index',Mautic.ge",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "9129fd22bbcb97769b56677bc4c4d5621e5050fd9566c06655f63bcc69287498",
        "deprecatedHashes": [
          "3cfa84a38dff1b0db09e591bdd1b340de6b65bd5da0f44775d08a9d65c5385cd",
          "af691415852df4a4ae95ef00f3d6c8c6142122a6a23a746014e6839d5f6a51a2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a6a4bab6-443d-4a9c-bff1-742311e163c3",
        "line": "694",
        "column": "131",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#'+valueId).hasClass('calendar-activated')){mQuery('#'+valueId).datetimepicker('destroy');}};",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "63400fdaa7b0cff733c0ebc770170a9c60197b667764c3aab438328a321db2d8",
        "deprecatedHashes": [
          "72df53ee9d56c924010a3e0bfaee833a2e4d905610132034ac8409b0436774ed",
          "54a0d5466e0c1d78f54b550c9882d3fcf78cff07cb0cc5aa96e3d8a000598696"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8c36472d-7b34-4cfd-88fc-f9a16d990f0c",
        "line": "708",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#focus_properties_content_font').on('chosen:showing_dropdown',function(){var arrayIndex=1;mQu",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "9c98885f71e1ed29a2a777317c2167209a3e9352ce48b88160852ed2f6bb19ff",
        "deprecatedHashes": [
          "5c0b24a2861e6e05b1053e37b7212c187cb5c0e264aa78cc2e3f6196145c73ac",
          "410b94e9da5d78e910bff23bf18e966c770df2ee5b35ba3337d5b2258bdb04aa"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7b7e95a8-1ebf-4d62-aae6-4e26e4c787af",
        "line": "721",
        "column": "5",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "Query('#websiteCanvas').html('\u003ciframe src=\"'+url+'\" scrolling=\"no\" frameBorder=\"0\"\u003e\u003c/iframe\u003e');mQuer",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "1cbfbaa9a387e23abf8eba46c6a0835e25253d14314d9ea96bdd8a493aeb7bce",
        "deprecatedHashes": [
          "b72e67deb61fce914e91465361e4c704809fb4782b34e8782dd5091628bcbd03",
          "c3e97795a880bfbce80327ab79164c68d4fd8b69312d0834e9e3637f1125bdc3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "540a20a1-fc4f-4152-81da-3ef839cc3841",
        "line": "8",
        "column": "12",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": ".addEventListener(\"load\",a,!1);else if(document.attachEvent){document.attachEvent(\"onreadystatechang",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "d874e4b500f4b4ac7d68d83945b3ade966ff599e314f676d8b2266df8d555590",
        "deprecatedHashes": [
          "cbb4f83ae78a567ed11ed1fea5f290a3748dac0a6f9ba517711b8fa53c3e6b2b",
          "8fdc0589c803c44a6920e5d56b189c8e7a1f0e23d887432ac7dd623ee371c09f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8f161ed9-8cb6-4c94-909c-8735771948d9",
        "line": "293",
        "column": "481",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": "alert(a)},isDetached:function(){return!!this.container\u0026\u0026",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "dae2e14cd17ae6c35f9699f5ae56edda509334f66eea3553ae9650a4024b0d7b",
        "deprecatedHashes": [
          "f59b29dbf7d221e20984c0e79497f447e1aabc1dad72c900ed4578022d6c589d",
          "d7e1c4bc268e43dc110be6f6b2ee39db76835e750d5dd4c777b0d24af9a9f355"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ea6addab-6bc1-4304-b1f9-7dc9c44c6962",
        "line": "609",
        "column": "17",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": "alert(b);this.fire(\"validated\",{valid:a,msg:b})}function Y(){var a=this.getInputElement();a\u0026\u0026a.remov",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "90f2f36b56f6decea07dd31b825aff55fb7fa3d06e9cc4661710ffa09c06f545",
        "deprecatedHashes": [
          "fdcbecb3ab242f5c2d11dda43e46387c122c8b35211b688bc9c769a9a90318c6",
          "845019d1e0aa49b87a7e9d42873c7ed20c2e58fa88f0b26c5e118e49f1abcdcd"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e60bb0eb-886a-4f14-93d3-92e898412985",
        "line": "633",
        "column": "167",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": "confirm(a.lang.common.confirmCancel)||(b.data.hide=!1),!0})},this,null,0);this.parts.close.on(\"click",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "977abed396d20ad7ca6e48d10a3749e248a6a4fac66f383e088e5344ca874739",
        "deprecatedHashes": [
          "fb83d6b3984a4abb377ac2c9d1634eac12868deae339c7fa3dfc9b2a33ed2864",
          "5a1aeb323fd43287e00508ed6e019cb44961e2ef67413b73665fb2f011ee092c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "700059fa-14c7-4222-9858-9fae89076d84",
        "line": "942",
        "column": "356",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": ";alert(b.error?b.error.message:a.sender.message)}function h(a,b,d){if(-1!==d.indexOf(\";\")){d=d.split",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "5fd77ba3440bed3cfb706c70d842b18eef0d4f91d2cac8f91918bf7ea0b29209",
        "deprecatedHashes": [
          "fc4fc904f2c7fae5e13479cb3f5fd16a95ffbb968f7e74b28a6fb1f3d31cc721",
          "4c74a8f42614491eb64bc3fc47c4deb6fa329322c384f1b88aeae35009138428"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "80057559-3da2-4895-a5a2-e1eeacd43469",
        "line": "943",
        "column": "363",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": "alert(b),a\u0026\u0026(c=this._.filebrowserSe,d=c.getDialog(),c=c.filebrowser.target||null))if(c=c.split(\":\"),",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "004c17b2001672df08735ea8065197741a69548e767534d97e464fe66f892aca",
        "deprecatedHashes": [
          "05a28112254122de495b6c9c8757ae75edd3a1e6c1020cac0754461b1b19bb75",
          "8f77fe19c9fa6d684930d9eb2e2097addd0eff44f4deb461b1b2e28a7a72fe61"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "51b02e2e-b422-4c3e-98ca-380cd8da2af2",
        "line": "1155",
        "column": "329",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": "confirm(a.lang.pastefromword.confirmCleanup))c.dataValue=CKEDITOR.cleanWord(c.dataValue,a),CKEDITOR.",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "8959addd4ec43fda7820f23811294127a1929a55b298ffbf13228daf886b7664",
        "deprecatedHashes": [
          "e4f06b37409072a93d379f44145ed8bf25849a393997068594bc85f0a824de65",
          "19f35708a2e74e0782c11c58fc05922c725cba785510f798ea9b5669b8ba1d88"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "573690b4-57aa-4803-801c-ccfaf1b410b9",
        "line": "1187",
        "column": "248",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": "alert(\"Nothing to check!\")}});a.addMenuItems(b)},bindEvents:function(a){var c=CKEDITOR.plugins.scayt",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "11059e3333b93477a4a0df72b03964fcbdca86b05119620810b48adefe0490be",
        "deprecatedHashes": [
          "8e9da0ec6541a027901e7a0be48437cbe478005e0b419bccfa25137e71b724b1",
          "8c1354be1597e493d86af0bc7dcd018e754c8942cba2db8ad0043c73e1795ed5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "68d8e188-7673-45dc-bfee-d7882895f960",
        "line": "5",
        "column": "230",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": "Math.random())+100,_:{pending:[],basePathSrcPattern:a},status:\"unloaded\",basePath:function(){var c=w",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "1bd1c435cc1f5f86cbd5fcfa690c2f7ab81d89633e2c2aae9f327f2ad660e93a",
        "deprecatedHashes": [
          "33fdc08e5b22d323abba1ab79fd4fd49c409e13e9072370f5aa16d18b90a7f7f",
          "b301b43e12d565c817f7ad1e2be530f830800c6c7482c3100dbe3d03d77c2021"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6e9f4f15-678d-4d21-8564-a8eb798774c2",
        "line": "29",
        "column": "431",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": "Math.random())).toString(16).substring(1);return a},override:function(a,",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "54e816c1442e66118269772e02cd769854c20df29f37a591696976ea37d1fe75",
        "deprecatedHashes": [
          "288bc92149d7a78144ba76a3e6b51ce80f2c8ee8d48cbeefc912477a7019e961",
          "c5c8caa7f068162c7c58051d59b34e1463832f7bd0bb04ffb362a373a6f4f831"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "554dbf75-8fb3-4c39-b6fa-a7f8a9801082",
        "line": "42",
        "column": "100",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": "Math.random()));for(e=0;e\u003ca.length;e++)var c=\"abcdefghijklmnopqrstuvwxyz0123456789\".charAt(a[e]%36),",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "74a47ecf4795f7397eae4f6770cf987ecca33f560fed98345262709d3c24746c",
        "deprecatedHashes": [
          "23fb30431fe49f0e630c591bc4d9abacf8155f9e9a4c68bc753f55de088d2f4c",
          "687680971841b090e44e9f5ae3e49cd997424badcc4762f3812d2c3517ee4e48"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "529595ab-c509-463e-987c-fbf50996369e",
        "line": "42",
        "column": "208",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": "Math.random()?c.toUpperCase():c);a=b;CKEDITOR.tools.setCookie(\"ckCsrfToken\",a)}return a},escapeCss:f",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "8d301105d0914ab34b46fb3d9acf8037e7e759468bc01861e2513dc2df1c2f8f",
        "deprecatedHashes": [
          "ea7af97097a2636d58d4424cb11b89fe9c6698a9143056729650c5304b46fe38",
          "13d7241d09a4c9625feca26339051a14a1e361a373abd4e9f045f608314bde47"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "de0d70dd-957c-4f28-b1bf-a240d3055484",
        "line": "1329",
        "column": "500",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\ckeditor\\ckeditor.js",
        "code": "Math.random()},",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "be22f21801449739881e2790cc43c6c06e7a084d24099b23617c32f41cc4f9ef",
        "deprecatedHashes": [
          "3c84a18db02646cdc2f1a9007c1dab09aac1084d2aee3dcc49c74b1b64b33039",
          "0ed88321e37109857b5afec60752eb1271ecee1ce8e2ed9d6e5ea86bc25a757e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "683d3b60-9968-4d04-9843-dcb8219c8450",
        "line": "5082",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\froala\\froala_editor.js",
        "code": "editor.doc.body.addEventListener('mscontrolselect', function (e) {",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "f9bf7fc7fd9b3704f74d6456ade824ca5f2f4f2476ee3644defe0e1424b28f41",
        "deprecatedHashes": [
          "142eb40189e77244580cd7031db09b4a3bef1b84229462228e3ab9ce061fabd6",
          "11cd7fbde27e4050bd2c8e8bfad47523f17e75ad673aad823b4a4c7caca53d55"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7da1024b-3e0f-4483-a63d-32613664e950",
        "line": "570",
        "column": "455",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": ".addEventListener(\"DOMContentLoaded\",Mautic.dynamicContentOnLoad);}};Mautic.testMonitoredEmailServer",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "8c4de2c282c5aa720978512bd15e41648d584b49ea327db236c996fd101b7f0c",
        "deprecatedHashes": [
          "9cbd096949e0b6a80a7126338f2febb6daa60a482f0ca4888f9101c1d1376546",
          "b6d5ff501d96df46db916a2c9459418f46f80a6d254c62847f64924d0ccc25be"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fad2eebe-dc5d-4196-aecf-545407874e35",
        "line": "15",
        "column": "160",
        "confidence": "HIGH",
        "file": "media\\js\\app.js",
        "code": "alert(mauticLang.popupBlockerMessage);}else{opener.onload=function(){Mautic.stopModalLoadingBar();Ma",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "acf7b3d79efe468253bc2d77f711bc6daed39c854bd8983ec69c5515cb2ea201",
        "deprecatedHashes": [
          "f1bfe6393e64305a77e51b2edaeab7f006d6733cf25b10fc6f0e9ce50ac1942a",
          "4408d2de2089107679b844fbb27a5dd678ae91a24fdb7c38b118ff86a3ce570e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fc515097-c4ed-470e-8f57-e40c381de0a8",
        "line": "27",
        "column": "659",
        "confidence": "HIGH",
        "file": "media\\js\\app.js",
        "code": "alert(response.errors[0].message);}}}",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "8882dc7f46bf95103f10e4c16f1b27381df81f7e8106f43706571a6788efdd1b",
        "deprecatedHashes": [
          "fe3b7665cd14701a919b4b0b293b883aa5f4c16978025d2f24a7e724af7adea8",
          "6b98eb534e756a890c94c5b4049a14bf0c4ae56bfa5636939e6503d48b620a9d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "52a143e7-c6f2-412a-a449-2514fa1d20b9",
        "line": "53",
        "column": "381",
        "confidence": "HIGH",
        "file": "media\\js\\app.js",
        "code": "alert(response.errors[0].message);console.log(response.errors);}",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "7f061a94ac4192867a572c165c76c483f9ceccb147cf77aa9ead7fe2fb158ef8",
        "deprecatedHashes": [
          "abba304c9d54efbe8c4d391bdf7c1fa4fe6d0480d493f9bc15960eff9c31e74f",
          "73682f6cc0c18908cc213667ccf6400b7c5fa2ce091da0302e82a3c7c151375e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6ebeb6c9-77ab-40d7-bd25-cc68044ae6d5",
        "line": "167",
        "column": "214",
        "confidence": "HIGH",
        "file": "media\\js\\app.js",
        "code": ";alert(errorMessage);console.error(errorMessage);}",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "22ebd1ef82502551abc16177e4c3db6e88947e198c561159c209ebb9fe98d6c5",
        "deprecatedHashes": [
          "dd22d3c82d461ae0a875a8b73dc478e8922f1e97aa7c55409b38dc24ac788b7c",
          "84bb9cbb428b6173bc2c60a50a0a70c4a04325b04b2c5792a6f232420e3e06a4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "30b6e717-af0c-4543-ba0a-be19b5fb7c26",
        "line": "185",
        "column": "300",
        "confidence": "HIGH",
        "file": "media\\js\\app.js",
        "code": "confirm(Mautic.translate('mautic.core.builder.theme_change_warning'))){customHtml.val('');Mautic.sho",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "9c9d95031becb2dd1aad028ece3d6c86a5899a957decda9caf0f01e1df09d4a6",
        "deprecatedHashes": [
          "5e38faee1034907bc4246994461c056b3d0f12e43a9e8f5b9e50b6436a40239a",
          "0dca092d548e819ec35e65227c2bedc33af8ec33ecea88bdfe32d9e1f43df811"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "eadac983-610d-48ca-9663-733e3a36f390",
        "line": "189",
        "column": "435",
        "confidence": "HIGH",
        "file": "media\\js\\app.js",
        "code": ";alert(errorMessage);console.error(errorMessage);}",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "c6674121c24ebba9338921b573a917e9f2621b11debb8895457260bad37b72ce",
        "deprecatedHashes": [
          "2f1480eb3133711444572214ae1dab3ec23c02cb083db2d602ae044f99503065",
          "9a73ff7d22c7080afe82a46666e5579b067a3ffd2e0e23103aac9cb290b322cd"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9eb19d1c-c616-4f87-beb0-94ad8579018c",
        "line": "198",
        "column": "615",
        "confidence": "HIGH",
        "file": "media\\js\\app.js",
        "code": "confirm(parent.Mautic.translate('mautic.core.builder.section_delete_warning'))){var deleteBtn=mQuery",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "09417598b43a724eb06bd82039a025d5b418db0d0a8f7ab562a4400b7ddfd0f1",
        "deprecatedHashes": [
          "f102ebc5032ee575fa1fa15224642464828723ce8d1407734ca105cbe1dbdc15",
          "deec118e9ae863520730747b11a2aeda95c454f7fa826ed444a340073b485202"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "74c0726a-3032-4327-b4aa-d05365469137",
        "line": "347",
        "column": "178",
        "confidence": "HIGH",
        "file": "media\\js\\app.js",
        "code": "alert(response.errors[0].message);}else if(response.error.message){alert(response.error.message);}el",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "99d1c367e5fa8969d3c4582a93457397dabb8dde966226f8e9c395731272690b",
        "deprecatedHashes": [
          "b38fcbc07135a678e5ffd564c14dc675b838d09f75b140b5ba02b94d18eac5f1",
          "c77ec095b5cdbfd21b6711bc38d660a3a327d486d3fcb834c958350defe9261b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "49648008-a903-48b7-aea0-e9630bc5a9fc",
        "line": "549",
        "column": "103",
        "confidence": "HIGH",
        "file": "media\\js\\app.js",
        "code": "prompt(text,\"\");if(name!==null){if(name){baseUrl=baseUrl+\"?name=\"+encodeURIComponent(name);}",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "b3db55ee8660704554cff170cc6454d68b23f425d6ac92ca1210e1f11b03a616",
        "deprecatedHashes": [
          "25b1805dc2018213b62d61f5113e2ba90039fd1e8c56e0e50ee46991444758e6",
          "18372a4c52c55f62e4a7c04c4f0076b831cacd866bc573a40e919efb77b27909"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ff29555a-f924-4b36-83a3-f18b0243976e",
        "line": "550",
        "column": "78",
        "confidence": "HIGH",
        "file": "media\\js\\app.js",
        "code": "prompt(text,\"\");if(name){mQuery.ajax({type:'POST',url:mauticBaseUrl+'s/dashboard/save',data:{name:na",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "a036f7deb6722bd17c16604b195ae8db3f00adc0a595b680e058844f817a159c",
        "deprecatedHashes": [
          "59130f769c5300d72a2ff5a39c2aadeefc8bfda994598cc827000cea33206a63",
          "8fd6948048c5ac47e0ff1f22ab36a4de9196837dec41ecc8369e37b05a379e2e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5f4846d7-2f01-44e2-82e3-44b1087c1262",
        "line": "732",
        "column": "952",
        "confidence": "HIGH",
        "file": "media\\js\\app.js",
        "code": "alert(mauticLang.popupBlockerMessage);}}}};Mautic.refreshIntegrationForm=function(){var opener=windo",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "f1464e5579e7edcf8dfb678b5966ce52b004435437a9824073324c6c2da07425",
        "deprecatedHashes": [
          "100db3b1d742b3ccf4a44cfdaab9af8a93a6789d51b5d04ef5ceb61c3ef1813f",
          "87d0ca8438319c169aed5d5acfc5cf1a583f644862df4331cbb66545ea18ee90"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "39e7aa74-c1c0-4acf-baf8-4b9a4e4dca4e",
        "line": "0",
        "column": "0",
        "confidence": "HIGH",
        "file": "media\\js\\app.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "750df4eee189cf4fcbc71267a6ad213c4d595a811b127463d8c2264b00c0c48c",
        "deprecatedHashes": [
          "b5eb4bcd72bf7b722280c476f73b49b4ee24cd9e9644b8ec801ca26ef025206f",
          "1c31be177a6cd27408188990a55db74d1730a3cdb2f89cf7d9b6053692a73981"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a923dcb2-dfb1-438c-b009-ae732f6a3e9a",
        "line": "21",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(el).removeClass();mQuery(el).addClass('fa fa-spinner fa-spin '+identifierClass+appendClasses);",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "dfaeed9ba8fc1a8f280bd061a11f6cc522f210f60ceecfdc47cabf61fe454c9b",
        "deprecatedHashes": [
          "92bbb48969c27851d6078e93c34af3d058469844d5a4b6ec66d8aae7f23e037b",
          "44ffdaec82cb631083cda90a7ecd40928fa591d45322e1f9e41d91e7a48a5897"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fdc307c3-2c8f-465a-b35e-a9f6099de79f",
        "line": "65",
        "column": "46",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(container+\" *[data-toggle='livesearch']\").each(function(index){Mautic.activateLiveSearch(mQuer",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "0a74ff1ff2d7a5f326d301fd2b99746a115f926cb1c2cafeafe8bec8387c4b1e",
        "deprecatedHashes": [
          "dba0ea9b48a6cf59fe1bdd5c5ac60f00bad8bbec865f1dd2ab1bf691a44414d1",
          "447929a868ed3157a8f9be0230e0580df7acf8994adfabc518ec8e642a7b79bc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "bdfec56d-19eb-4803-8c53-4b7fc2254715",
        "line": "66",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(document).ready(callback(this));});mQuery(container+\" input[data-toggle='color']\").each(functi",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "6380845abe59844811df77b740b3b8df3016c4abe1c3d2a51592ce4fec27ab17",
        "deprecatedHashes": [
          "0f708e8daa884390ced16e2662ed16776cf20bb84f46bd0ba1ad0bfe4097ec8c",
          "a89e3887942cc73b7d8110d0f6119b0e90870a6b8d2672335339004244d65ef7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "de4bb7d8-7d1e-48ed-a2eb-b74b61f37bb4",
        "line": "69",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(this).find('a').on('shown.bs.tab',function(e){window.location.hash=e.target.hash.replace(\"#\"+p",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "18ae2930ec765b41f10c020a810723eb0ed203f0a359a4dba1814e7d0ea748e0",
        "deprecatedHashes": [
          "94008e2a503d0e0412d4f5f0840d410a88cebebc022f87a13174000ecee44b59",
          "7b6f080b4da1e402bd697957f03a1d0244905fb2935f0c1cfbf3f71e6bdf034b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c219de69-eaf8-4b47-8f11-d5ba5ffaaa3c",
        "line": "110",
        "column": "14",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(el).attr('data-chosen-lookup');if(isLookup){if(mQuery(el).attr('data-new-route')){mQuery(el).o",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "1aeb950fe1c9acab7bb8375e2d8b29cfe165d7196a2c9f6380ca5101539f59d5",
        "deprecatedHashes": [
          "145b6b19b7a9a7023c700bbb5b6aa446704c33537ff39bc2919bc7b41131e07f",
          "e021f9219917ba4a8d1925f6e094f191ffc6066614b7893acc4a655d301abc94"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8fea53b4-320b-464d-9ab0-dd986f0c2c82",
        "line": "113",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(el).chosen({placeholder_text_multiple:multiPlaceholder,placeholder_text_single:singlePlacehold",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "f8e7472b9616a5619f951868ac944e66f599534c77801fb5a23d7856f55d1d00",
        "deprecatedHashes": [
          "1121224df59127d282b8ba03ec8269677fc4fc0f2ee0d73a2f4630d41c9aba96",
          "a6e3f37c82b75d4f2fcff7f8d7e3f7ea3ed671770d0cb3f72b96c4467d325d3b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "362945c3-532f-471d-87bc-7e0753d5a589",
        "line": "119",
        "column": "118",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(fieldId).data('lookup-callback');if(lookupCallback\u0026\u0026typeof Mautic[lookupCallback]=='function')",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "4924334979734b0f2360c78617274980761fc3df2cbbea3065c10ccd6fd59ccd",
        "deprecatedHashes": [
          "822bd0d376a657b5c7df6b953a6cd1eefa6dd1f8f0423c32927f2d69d092e400",
          "637691af8ed6813705405c2ef090ed4b5af5d17febbb908ba82358abe203857d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ddacb772-5c35-43a1-bdcd-6d896a703b9a",
        "line": "128",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(el).addClass('calendar-activated');};Mautic.activateSearchAutocomplete=function(elId,modelName",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "360c7d41b179ea6b515da2315e7e8860caefa9089afbbc86473b5b6219026e96",
        "deprecatedHashes": [
          "2c474d0d2831a6d5f47c9004d429965fc2605650fde757857f1b5801a5999990",
          "f6aa6d335e8cd1f5f2691538f7fa5d20e65e2e776e31719502f75785893ed5a3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c4092696-2a15-4a7c-9e0c-e95cb4b6ee7f",
        "line": "162",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(this).attr('name',name);});}});};Mautic.closeGlobalSearchResults=function(){mQuery('#globalSea",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "5c3d926e715c715faffdbf2890c4cf4d8931469be06cf99765dc5d31931fa91d",
        "deprecatedHashes": [
          "9e2a16c2a3881e9ddd526f2911723ff164511c9aaee7b479c521b31f84dad1aa",
          "793a68a014f98b165d91a4aaec76f30138abdd944da464cb06778990ce2aa026"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b2d8a33a-b85f-4fd9-aedd-d38c6a8d596a",
        "line": "187",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('.theme-list .panel').removeClass('theme-selected');currentLink.closest('.panel').addClass('th",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "ef32970df7a53261f0a31eb1b5f5f05a09a68fd0b670fc1ce8c398b36e7638f8",
        "deprecatedHashes": [
          "fca781567c04a4ef671ec9377c7318c89261b84ab5dd340fd34e98cce1124999",
          "31b6bfd4b541bcdb8b6c25433775378a12cc05abad6a7d384ef796a4ecd3b272"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ac486349-c651-4a4c-a71e-522a86ca204b",
        "line": "211",
        "column": "41",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#builder-template-content',parent.document).contents();mQuery('#section-type-container .secti",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "0e9927d4c0fd19cc0c2370c1bb39e852e413091d622516012a1fdd68672632bf",
        "deprecatedHashes": [
          "3a5fe867b59cc724bff88d7729a5bb0484d6a0dcfd954e40f03c32ba57e62820",
          "2a0ec395c1ad98e26c9653444663ac6f34a973d206b871a8e781fba68e96fe02"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "306d8c66-bdfd-4049-a1dd-1192fbae87fa",
        "line": "226",
        "column": "40",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#builder-template-content',parent.document).contents();mQuery('#slot-type-container .slot-typ",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "26930395304afc1f46359cf57eff0a06ad0d4370acba47e42c4a3c2233736322",
        "deprecatedHashes": [
          "f7837833ddc4c64750e001a7269f319bf02d21fba39d138804d9fa9617d44dc4",
          "e4f632ec1fb7425e32eff39cdf8e901d2c5d7154de92ff50e626fe19de98439e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "44a76991-f71a-4bc4-87ac-7ac787e6e838",
        "line": "251",
        "column": "1659",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(this).closest('[data-slot]');if(focusedSlot.attr('data-slot')=='image'){focusedSlot.find('img'",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "affe657731d8360dc254530e110bd2d446c1f53b8c70ab05549093573302c3c4",
        "deprecatedHashes": [
          "bb34efc3ed2053bac4ff4fe590bcbee8c928e0d35906d1e29c39e15b0e720d45",
          "eaa45bc1d91a959eabb53aa20006b234c6342d7cb4e7777778e51f3245b4c9c8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "06e7c00e-a1cd-4db7-9130-bec76d9928cc",
        "line": "252",
        "column": "62",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#slot_text_content'),params.slot);}});Mautic.builderContents.on('slot:destroy',function(event",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "22931d173419ec0234856fbb40c998b5b66444c163aed71737b86ebac22d2f75",
        "deprecatedHashes": [
          "394afd68cfc8dd3966e35e94a48b186b0edfff43af431e6041c87cacc0524cdd",
          "29f656b5c0ca425e1769f37430baac796cc3f9022ea4d22632d4c906129b76c4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f7671591-f6e6-4287-b219-93830c827bdc",
        "line": "254",
        "column": "244",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#customize-form-container').find('[data-slot-param=\"'+field+'\"]');if(customizeSlotField.lengt",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "400aa505f42a78646cfe6032721b5fbec78f689256f0ae2d44ac3b87043ed34a",
        "deprecatedHashes": [
          "24858a53ffe18420ed96180810315f8a3e6054753f30cf8d36e8ea013e3639ae",
          "63aa69b278755818cb9002b82ba30a4d6943935248c0d1279b5b6a20e2707361"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "522f458e-3701-4f80-8e77-8e3380fe62cb",
        "line": "276",
        "column": "267",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(document).on({\"chosen:hiding_dropdown\":function(){mQuery('#app-wrapper').css('overflow','hidde",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "0ddf932f373500fb8357c6bb81a0487ca8db00fd7b446464739d74ced95477aa",
        "deprecatedHashes": [
          "967518060a4313a759ee6ebe28c734afeb0a1fd25bf976147813a85904cbf989",
          "e9c7aa60c39ec663dc8de69f080702ee63c3e7a848ac780500c4a9efdd588792"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4b2c3b73-2276-4262-bbc1-8e281241861a",
        "line": "283",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(this).trigger('chosen:updated');});};Mautic.postForm=function(form,callback){var form=mQuery(f",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "f5e6eda475d8895f166db306c08dc32638c71aaf8eea503ec411c2fa4edce425",
        "deprecatedHashes": [
          "7bec11729ed7384e2e9210764c67b38b44b281f78c40f65f885310009efc3b5e",
          "91dad6df50980cb638280239d6b08ed266329b22c18382dc13045046105f5499"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "31548c34-fe87-4431-ad1f-2b41beee8c9f",
        "line": "291",
        "column": "121",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#'+fieldId).attr(attribute)!=='undefined'){var field='#'+fieldId;}else if(mQuery('#'+fieldId)",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "628ab035bf0d6333371394f6afbec09a775ad53058f03ea84f045f1d3bc6d53d",
        "deprecatedHashes": [
          "73cfcd823cf40905146db3c19359da4a91bda54f741d312ebc74dee191ac8a36",
          "4ae40d1f8afa204d20a19d2c4c9a23edec939b96537ed613132cfc59e7f4d756"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2e2ef87c-be41-4511-8d2d-24b441ce353e",
        "line": "295",
        "column": "324",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#'+fieldId).closest('[class*=\"col-\"]');;if(show){fieldContainer.fadeIn();}else{fieldContainer",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "28176bc6772232f5946fd34cd6d29f35be076c0a0738cda897496b8b1391c63d",
        "deprecatedHashes": [
          "be91a0b89084819b74262709104ddcf241d30da24953b90559955e81c36ef1fc",
          "862b322377a03353c5a6fa72d5d026722154bff318b887ae34a4b3a1fdf059b7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3010a7e7-148a-41d1-a263-8c9def34cf9b",
        "line": "324",
        "column": "66",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(container).find('.available-panel-selector').each(function(){var sortablesContainer=mQuery(thi",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "fe466f45590433584585bc0375491e74fcdf2eb9459d32eedab65beacb16f9da",
        "deprecatedHashes": [
          "ac0a1d42572a19443f5f748ccd53f6a3761c70752d18e0b06f0d7a6c4469ecd5",
          "eab3b9dddc9f538fb80eb29f328d537c5d05de85b14d3f15241600f86e2a42c4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "10cfae1b-0d7b-4af0-84c9-b205b0d40e4e",
        "line": "325",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(selector).val('');mQuery(selector).trigger('chosen:updated');});var bodyOverflow={};mQuery(sor",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "9335d1553cb562f0aec430e1fa3a956c3536a567f7decfdf1aa655abac5f2fa4",
        "deprecatedHashes": [
          "732030ad1e1ad6bc63dcacab478057f1458d9b7467224a54436927ae56255bcd",
          "572c008ea240d84023290d2ec315cf574ec75df625d4fca092ddd4f2b384a1e8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f06f2c39-8e3b-4e3e-b65f-575d6af42e6a",
        "line": "411",
        "column": "80",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(tabs).overflowNavs(localOptions);var resizeMe=function(tabs,options){mQuery(window).on('resize",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "1b161f2310139d4838cc054ca246fc43a167d9a3f68ee6f4123c6e03e6027e9c",
        "deprecatedHashes": [
          "6141d113181d3da5fe37506a87fcb74f32a9c5d604cd83a9919853cd8650940c",
          "ddca594d08fe782ed5579e39e4590514e16181ca7f72cc4483c3918d3389898b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c7906f3d-f812-43d0-bf0e-bb1ecbd7e55b",
        "line": "427",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#client_name').prop('disabled',true);Mautic.loadContent(url+'/'+mode);};;Mautic.assetOnLoad=f",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "0538a339a33ee66a41d39dc6fa6134869e05c5f399840458850d7415c0db0da7",
        "deprecatedHashes": [
          "87d8f27bb4da969231147accc2ac7de0ac463ae3eb95ced81607eca20cb59ad9",
          "4e8e75ca6a3186426f709caf3f5eabc6383597b32d4449f1cfcb2eaec311717c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0a3491fd-8f79-4ca0-8eb7-f40363e1286d",
        "line": "445",
        "column": "4",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#CampaignEventPanel').length){var tooltipTimeout=null;mQuery('#CampaignEventPanelGroups butto",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "de402f2fa402ba5d093b349e86176db64d03b8e3b108ff6a01b6939259ec0bb3",
        "deprecatedHashes": [
          "fb6e7f16af12730b7a777be5a70fe0e15dbe4e06aac9948b016c610c558a1c37",
          "1b66aaa7a31cdb1ed74eba97315c57e294c838b399b5e1eddf07da1e8096077b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "68d86a2c-a11e-43fd-9717-0fee63c4ecc7",
        "line": "446",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('.campaign-event-selector').on('chosen:showing_dropdown',function(event){mQuery('.builder-cont",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "436a2b4bbeebb588f7d8abf2ea9ad9696e03f78da22f9ba6bc36da05354e808d",
        "deprecatedHashes": [
          "32d4829d363a3b0acc0ecf6aa41e5f33c3614a09ebf51c8af3a88bcbebeed28e",
          "5a10b4eb69074f02367f133aa940ce15cd5daf70cb3a07f2858b3f5e317f785c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ae0761b3-a491-4d24-a2ef-11135621e2f9",
        "line": "447",
        "column": "115",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('.campaign-event-selector').on('chosen:hiding_dropdown',function(event){mQuery('.builder-conte",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "884850161bf32762796dfe669ce53ea6142afa1073e862c890687361d6423096",
        "deprecatedHashes": [
          "c0ad52a863fb36ab09c9be35952c8b6d32b9ce79c10f9b29a22bb94ecc4a25cf",
          "a8a09469f10e83e56a6f52e92adb8d4fe74e9f9163d249539cb9536320352695"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b0e2ab15-2aaf-4fe8-83fb-763b6eaa6338",
        "line": "448",
        "column": "12",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(this).attr('id');var option=mQuery('#'+thisId+' option[value=\"'+mQuery(this).val()+'\"]');if(op",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "7b66014c6034b98bbcf0e5f46eb06eb0203382ee34ef6809153bbd0802ac1182",
        "deprecatedHashes": [
          "1792d681bf9d3d27bfc25814e1ec2812c568f99642bfd33bf23f9a9f863013be",
          "30ed3fd31d16e0a7d7fe4f3e3ae5a651bd4f6a41c2eff24815817c8f7cfaebfd"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "702ca2d3-7761-46e1-9434-5b4fe547ee6a",
        "line": "453",
        "column": "43",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(this).attr('id')){const chosenOption='#'+theSelect+'_chosen .option_'+mQuery(this).attr('id');",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "e6fa1ebf3543e625644cab9e79200856394e8994492bd4211b717b6d79d88836",
        "deprecatedHashes": [
          "4f308f03fbbd8ff6eb1baf7402976bf476248367117212ce2b9b4cbe4a738fe0",
          "48bfed673fbc74d0036dd40496d3f2567eab2bde1fb855f5c417c8473300aac3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "37c67058-e167-4e12-b5b1-95df04253e3a",
        "line": "458",
        "column": "412",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(eventId+\" .campaign-event-content\").replaceWith(response.updateHtml);}else if(response.eventHt",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "14d71d463a55b8fa78d8108829eaaf75f263581ae7216d3fd61b7fcfe0b3a398",
        "deprecatedHashes": [
          "041a70a6d068ef5840a83df8aa73576e85e212cda6bda33ec9a9e65dc8460894",
          "aa3da3b826bdb224c5f2f6028f48286600a5712635f5d6e6b180b085f9ea5512"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1aecdc28-687b-464f-8963-64daf394db86",
        "line": "462",
        "column": "314",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#campaignLeadSource_'+response.sourceType).prop('disabled',false);mQuery('#SourceList').trigg",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "465cb6c28a21aa33d2ce209e81a0527bdca4926f521b77a79dde67ba19409a9b",
        "deprecatedHashes": [
          "e77f9484a39fc38705aeb4ba451e1bd3961da4a1f160c849d11c3518403cc083",
          "780188bd52a9352ffb455c3702ddb8e2489d0d2dbee02d8c617e545a3822b65f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6ef7141b-1759-4620-a352-5c7b44963d9f",
        "line": "470",
        "column": "2619",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(params.el).attr('id')]={'left':parseInt(endingPosition.left),'top':parseInt(endingPosition.top",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "3c2f91583dec9155e6e6a1f6530a284e796e60249dbd63aac01fed9747575012",
        "deprecatedHashes": [
          "4cf426bc34b38b5b6af55bff9c4f5031033688f9363fea3544d62a66a69ea81f",
          "e35ec8720b0e7946fda8dd2d002f299dc9180381f742ea7423a67ad054047d66"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fe7bd101-30ad-49c3-b631-2144d7a2eddd",
        "line": "483",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('.btn-close-builder').prop('disabled',false);}});};Mautic.saveCampaignFromBuilder=function(){M",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "1b4a6619cd936c679be759be13278e339be4dc46cac00d2400ede03e03721452",
        "deprecatedHashes": [
          "131c16b5e1c3796e6a36a265f8ce7e05c1b5daf66acc3cd8f1801549c2aa92ae",
          "65a4bb8a46f4c89727de75a51086f9041c8b56195ef6c4ec87e02ae007f49d2f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3f5f7fc2-2000-4731-9d69-0b954ca3b0c1",
        "line": "519",
        "column": "130",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(selectId+' option').each(function(){var optionVal=mQuery(this).val();if(optionVal){if(!Mautic.",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "19d2fa3f98088b91a8756a99dacd2516b1c2c72d4cadcf346af73b02f579705f",
        "deprecatedHashes": [
          "10982b67d37a9ddcd38b7649eb43e0beb68edd7dc012d1e83703612e22eacdb5",
          "6d95452e460ee722cb205cdbfde571cb05787391d8dc5c41f78ad8387a23fdc7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e7afbb40-f0fd-4f99-95eb-c6afbea916d7",
        "line": "520",
        "column": "137",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#'+theGroup+'GroupSelector').removeClass('hide');if('source'!=theGroup){groupsEnabled++;}}els",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "aa60b048cbbc1dacbd46166d43afd1d968558a7f222b6d94b7e56c0a5a5da4ec",
        "deprecatedHashes": [
          "596ce07868cd0e0f6b67899682adc6ecf72cb01bf59a0a3be3f76cd425a45d6c",
          "632b57bb821fa0bdd95bf69869228cad2b615c494acb572ec97a386840c47168"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "52dfcb4a-dee5-4c1d-a928-103317f66011",
        "line": "522",
        "column": "111",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#'+eventId).data('type'),'event':mQuery('#'+eventId).data('event')};};Mautic.campaignBuilderP",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "9ecd4a7ffcde9a046836a0e2a2b51d12a5643636134b6caef22a2e4db1b46939",
        "deprecatedHashes": [
          "53e012ac35eaf468170426e2b71c8203618ccc0936dbb1f93e6d014c5fc90c04",
          "282cd9218713b5b579839ad1566f2414a459a09fcc65251fe53d3671797e6ce1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "dba32638-3ec0-4f02-92cd-31aec23ebe37",
        "line": "528",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(input).prop('readonly',true);mQuery(input).datetimepicker('destroy');Mautic.ajaxActionRequest(",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "ba3e3ab346eeb7a4a6c2270cf0bef9a7ff9949278f98da8814f39ba3ad85e796",
        "deprecatedHashes": [
          "539fd51ed8b2021c1cb1f2d3f95cfe4ba3c9e2ad20e8df7f8b01a397d9f656ad",
          "b2ffeb9e084092f2c542dd27dc1423ca63687a624f4ca1543fc4a4a7a51b73af"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6728a591-0ea1-480a-b0b7-8607ad600cd8",
        "line": "529",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(saveButton).hide();});mQuery('#timeline-campaign-event-'+eventId+' '+eventSpan).html(input);Ma",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "997bf96deb0c2d03d1ceda3c5135b616e43bde554241fb9f500b4d797f2837ef",
        "deprecatedHashes": [
          "39e5091b0ef3b1e9e5fb862614b03d1ef862faeaeef9457127ba7fac479304e6",
          "db0bd3af7752c3c89cf86a5a2cdf50be6ab34744e53bdcf2d3452a78c2f072cc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "440bd4b9-3cdc-4c5e-aec1-a0eb5d3fd1e0",
        "line": "536",
        "column": "45",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('\u003coption /\u003e').val(response.categoryId);newOption.html(response.categoryName);mQuery(\".category",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "85887c292b28e4cd134d79185beaeb7266e0134b1e6f95f2241f753e2b3948e2",
        "deprecatedHashes": [
          "1b21bcb27deebee178c5e769dc884da72f00e7d39aa0024f838ea3d9b7ce075b",
          "f51d12e648020371ad997bd96c108036cd6045c754d59fc317b8f5532c7a485c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b35d9e33-0613-453d-9b06-77399ca060e0",
        "line": "555",
        "column": "4",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#'+prefix+'_filters').length){mQuery('#available_filters').on('change',function(){if(mQuery(t",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "06ef9ce7c0fdb84ac48fd8dc8d82f34635242ffa51a1816f02b99091367513ed",
        "deprecatedHashes": [
          "bf18ff258a636767fccb9daef39253608f5fa260a731d3e0dee908637464e4e1",
          "dd6910a56b3cc2c3d3f4c50a60ab6d4aadb10e81da129c65ce81a286d414c2a9"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e3471f5f-3ab3-4d43-8a98-3fcd03764882",
        "line": "561",
        "column": "112",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(this).closest('.panel').animate({'opacity':0},'fast',function(){mQuery(this).remove();Mautic.r",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "32b38520e51e6c3fc015e3d50dd651a407da14b92b6be6b7edd30a65511bd2c8",
        "deprecatedHashes": [
          "351ae2cfc5e68713d05af2b8b2acd7c2ae0492a45fd63379c96fc46990d4ddc3",
          "9bf4657389eebe1f552e61a95bf75a791afd3471f440c49dca7e9b3215f60131"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ba2a4aee-cef5-45da-adbd-5ce25c6ca5d9",
        "line": "562",
        "column": "52",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#'+filterIdBase+'operator').html('');mQuery.each(operators,function(label,value){var newOptio",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "9d7765f6dd6b9ee124dda189a2f62ef105e2faecfdde4a57df90ed22caaa6157",
        "deprecatedHashes": [
          "6865add52fbffee539e68efe1f94de0a116a1dd1cf51c44c321ad4c41eb8aade",
          "7bb0406cea3b9d6ce2086e9c29d49b063767f5831b69726d31bd98f80c5d88a4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0715c16b-ab5e-4fd6-9c29-6a277d90b214",
        "line": "565",
        "column": "31",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(filterId).is('select')){var isMultiple=mQuery(filterId).attr('multiple');var multiple=(operato",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "7ab724cf5a504968897f247555d8c749f0d61c234e8fc28da0a389a88dc5cc7c",
        "deprecatedHashes": [
          "640c666629d230e8f94d2a6dbc96a878000ed9ddf8e90a04e65033f2ece092cc",
          "d34c9b4af64682697cc2af0249f94ea1512c5545d3e39746c3ba9271060630f9"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9ccacaaa-a9e0-43cd-a579-451e96c72141",
        "line": "573",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#'+mailbox+'TestButtonContainer .fa-spinner').removeClass('hide');Mautic.ajaxActionRequest('e",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "2acdb285b5c247550d18cdf83b14313a77386e3d7c87036e02f9dec2f2da88ed",
        "deprecatedHashes": [
          "f8af5c18b34a47dbf7fef3500dffa23774bfb72e3bdf6140c0b4cda5579f73ba",
          "e7952c72a3edd56dbf387e5c4bcec2df1fae6f720eed953b671d4c56a01fbd72"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "23e820ee-ae5c-4855-b49e-a8470450e32e",
        "line": "580",
        "column": "325",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('.btn-send').prop('disabled',true);mQuery('form[name=\\'batch_send\\']').submit();};Mautic.email",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "ab03a8e518f6ac9dcb56833ba8d21fd1b0808fb811b1db48a30e060fbc504e16",
        "deprecatedHashes": [
          "18d0de07bad8034d460c6b9014b95ed296d6c20f2746c2ec1eb37cd8c8c74da2",
          "afb1eb0d14b78e57406368c4d1dd9321b2ea147f2e13d12bb7e8f1e546182e22"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c37fd1e2-1e37-4630-9c91-4a5ed95861ee",
        "line": "585",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(origin);if(email.length==0)return;var emailId=email.val();var disabled=emailId===''||emailId==",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "9a00f85e8c2e37314e6d3032c81bc4e25ce060942461b367baf1cb9b3c1bccef",
        "deprecatedHashes": [
          "805bc49abae1d4c42a1aac47edaf3c1c593a16461a707f490a9081f3cad1a46d",
          "d63a98a9875551204e17edffe4b44ebc8190b2006a988ca006f183436d7b2c99"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d44b6254-e54a-4323-94c4-942c9f356d42",
        "line": "599",
        "column": "214",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('.tab-pane.dynamic-content');var activeDynamicContent=dynamicContentItems.filter(':visible');v",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "c91dc9474c05f32e70fc100e1897c3e3c9c67c40802d78904e85615432e041c6",
        "deprecatedHashes": [
          "a32e7fb26c7e2f8c31e365c2f5a99b719bcdb3aef3963a447c548160f3feb591",
          "1b66082c94af26f11122c09e69e6768b3a32d87f95dfe212deaedba297a20a6a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2c7cd057-1eea-44bf-ae3b-e8f79c4c3470",
        "line": "604",
        "column": "717",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('\u003coption\u003e').val(index).text(val).appendTo(filterEl);});}}else if(fieldType=='lookup'){fieldCal",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "1f06a52a4ba0f067668b461dff1d82e8f3aa0e94f5db38b2dfc54c9daf25e250",
        "deprecatedHashes": [
          "3e7bda2059e27a4537fff7e3392517cec61d1b90a2d8bb7e22587c9bafa5efff",
          "8121efd47f9c0b58f30e5374d96767281adfba3f6f128713b54b61db13c1f23e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5d5448d6-4c01-46fc-b8b2-6288473c4a7f",
        "line": "605",
        "column": "15",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(selectedOption).data('field-operators');mQuery('#'+filterIdBase+'_operator').html('');mQuery.e",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "383ac382483a3e5a05066eea77c1366c4c3d80d5e02846eca5d9223a1250511d",
        "deprecatedHashes": [
          "8056fb8dd7b35746b692e6b80e0edb0660b67df45cba3f747a7f617b23895746",
          "ba83b807797c83f0fd1a8c542723f7494f47a56d3c9900b21681c029b39cbdd6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "80c66929-5cf5-4513-8386-2ac7ca1da91d",
        "line": "615",
        "column": "94",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(field);var fieldValue=field.val();var options=jQuery.parseJSON(field.attr('data-field-options'",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "04bd9efa12a3299fc487d343ea141003d4b07ed662cf049d5b2d777ae3c832e1",
        "deprecatedHashes": [
          "8cebc6be7a28fbb33e77e60c902e7c7d4e207192e8c5935f438f692d772b7346",
          "081cde1c159997cc3e29c73ec282b2e20baff9765e921577a8a4943af5bf0696"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8ad7c902-5247-488e-88cb-5c840e2c6059",
        "line": "629",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('.available-actions select').trigger('chosen:updated');mQuery('#mauticform_formType').val(form",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "c5e89a41d8e17a90d05641814e8f3d3a48c8dee8c8ae630754c77d201bf41a5c",
        "deprecatedHashes": [
          "c98ce78fc292a23392bfdce03505460184e31a6342316225ee3918cb6052df8a",
          "35775cc28468c2b303548375ffdb1954240e73c95e406a8e8da6420edbd94ecb"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "48cebf77-597d-4eeb-bd0c-6ec40f546afb",
        "line": "635",
        "column": "29",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(modal).attr('id'));var obj={};obj[fieldOption]=fieldValue;Mautic.activeActions[requestName]=mQ",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "46d34e3b393841a8be2ecb7bedf556977b71fbaf03182db2cf77efc409256c78",
        "deprecatedHashes": [
          "0833db654dc889679574fb7d8cb760aa23970a4210bc3842153d345f71d7371b",
          "c3c08a04c8777e56a90f662f46def0a43d3ec40f6c3080579a132abad9fd35e5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9aa92837-b74f-42ba-901e-05e05b80a898",
        "line": "647",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#lead_tags_chosen input').keyup(function(el){const newTag=mQuery('#lead_tags_chosen input').v",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "40d2c8059c389d08dd5289954b01cf4a552dc6d5b34adc5c81a5d4494395b07d",
        "deprecatedHashes": [
          "9660c756825e28aae0003a229741120a1ccdbd5776a2d2398e49094799ea32d0",
          "94279c83bf1b04152daf36bb00de162bb470ac6bc2545de923ad648fec24e3e1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "efcad13d-2dcc-4978-a361-bbdb0f22eeed",
        "line": "655",
        "column": "4",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#'+prefix+'_filters').length){mQuery('#available_segment_filters').on('change',function(){if(",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "451270faff22735f90efaae936b2b11ad9df3a9ad6b256f3fbf77d3a09c5d107",
        "deprecatedHashes": [
          "b9413b7cb5430ba498fcc6f0a21d0cda45deac9b652bd396aa77bb551863143e",
          "c458c97011f3073e9d438d03088bd72f80c1bc6289fcac24d9be4aa185e62cea"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "191e8b99-91ea-488c-9d88-adde33576822",
        "line": "657",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(document).ajaxComplete(function(){Mautic.ajaxifyForm('daterange');});Mautic.attachJsUiOnFilter",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "7f85a2599296e464cf854bb8ea396110031a5de82947052256786f9d98ad7d0b",
        "deprecatedHashes": [
          "ff5c1d67c1adae84caade54a317c5a6055f41c409d8796b378ad8d05ab333bd1",
          "6f6d2eb250dcedf77f001171cc75eacd8c457dd43e54c645a35f6db2c927fbe8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e2589eaf-34ab-4e58-b115-94026ac4e354",
        "line": "658",
        "column": "686",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(selector+'_properties_display');var fieldCallback=displayFieldEl.attr('data-field-callback');i",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "82ad2c3a2a3d28fa9ad877d41eb052f8cd35a0cf4d72a48ac2dd0d254d83c142",
        "deprecatedHashes": [
          "d010390a1a81a2a5983a41439bdc77cf46b036189971f1c15d8a4ca26a65eecc",
          "b1ef08b2c9d35355b4b4c023a4fb2ed1043d205826397eadd497347737b8d70f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "89539c9b-6e12-4912-8508-e2483be5827f",
        "line": "659",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#'+prefix+'_filters .panel').each(function(){Mautic.updateFilterPositioning(mQuery(this).find",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "80173439d119ddc0132a38767353347b63f127aba044937ad19cd37a4eff1bee",
        "deprecatedHashes": [
          "b9332219d98075c6766b7598f7116dfbc5d35f0599eca932fa9fdbf38b054f9e",
          "9954adb386fd9665737c2c86483925c0a10931801a3b3c9020ace9688addb383"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a9e7c6aa-55cc-4f4d-870c-b0b5987b32d3",
        "line": "663",
        "column": "4",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(this).is('select')\u0026\u0026suffix==\"filter\"){Mautic.destroyChosen(mQuery(this));Mautic.activateChosen",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "e84b22e092e432febf7d157033ff104f7b9de76b7ad770614ad4c0b090dfa8c2",
        "deprecatedHashes": [
          "6781b7b433d8eb4d2e925446872a5b7494f5b817a3c4d9019ff8e36548621cfc",
          "041b4cd08707b3308b016f8b318510219e1caa5931cbf682160e799d93bc3689"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "252a1120-785f-45cc-9255-b3064fec8279",
        "line": "664",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(filterId).val(value);e.preventDefault();});}else{mQuery(filterId).off('paste');}};Mautic.updat",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "452bd1d516b241a637e9cd60cb02b4abd430f1d9aea809bda768ea3ab6525824",
        "deprecatedHashes": [
          "2346e43470e8110df7dfbf05de5646cea8b4eda51c22b7474b66a9e89a192f78",
          "6d1b3e223b15f658a9bba678b50fe4aadb4e35da70418532c54fbbca77b28ee3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9e7417a4-8b59-41bc-829a-858248f3c7a0",
        "line": "665",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#'+displayId).attr('data-lookup-callback','updateLookupListFilter');Mautic.activateFieldTypea",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "a3fd4cbf3fa874702e79b9efe5c5bb1b4b1474b2ddfd4567769949a49e4ae7d1",
        "deprecatedHashes": [
          "84287ddfb71ae028f632145a300cea143c2573cc447c4fb455170a10f8c891b3",
          "9ff383987e0efc3e9e6e4fa48847252d4928d6682665ace4206f40cd58ebe83f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "643c21ac-61c6-4bad-aabc-9a9428261d73",
        "line": "669",
        "column": "112",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(this).closest('.panel').animate({'opacity':0},'fast',function(){mQuery(this).remove();Mautic.r",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "aaa6430326c71b646b08a68148a41ac40919d5581cbb8bb342537813ab1de518",
        "deprecatedHashes": [
          "6c7cd2efe0820656042e570695815c571a027570ab7aa41e24076c56d292e29d",
          "4a37a2cdcc9670782f493878bef40cfbe2e1771ab6c97f0acdcde8be2fac3a9c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0d3c1acc-a92c-4f17-b339-22f88509c737",
        "line": "671",
        "column": "4",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#field-templates .'+selectedVal).length){mQuery('#leadfield_properties').html(mQuery('#field-",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "d37f158b11bd490fae9167a44dc2789a74f1d7177e5813048ec0ed734cb3e7de",
        "deprecatedHashes": [
          "2fae569d3f35e5c20b99f53a38b74adcd27b19d3aefb339badcfafbbda9f544a",
          "6d8dbd06bb832a4f896f09678918f8c0eae65aa3ff2a794ee8b3625658e1eb6e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f8f20a92-a568-4364-8624-f211c5ec90f0",
        "line": "672",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#leadfield_defaultValue').val(selected);mQuery('#leadfield_defaultValue').trigger('chosen:upd",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "56c29c059e8e07f594bd645d2f80b435deae0fe65ad014441ca8600ebc4405bf",
        "deprecatedHashes": [
          "6c3f995927077abdaaef918a09c42e8f6899deef9090d248881599c93e72ef8e",
          "98773e7a724a633104abd5069e85518700c93a3e38220f7a428d4e777bcbb2f8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ff860a3d-d5f4-4170-8db3-9a5ad8384e66",
        "line": "675",
        "column": "22",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('input[name=\"leadfield[defaultValue]\"]').attr('type');var tempType=selectedVal;var html='';var",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "71605ff6be93cc49ba0da625481da40234704fe7b4a4d1ecf6978be432a6e00e",
        "deprecatedHashes": [
          "5b73e22c2e1d6046e5cf9a42b613344083d72d94d8e02f152ad602d73701c5c8",
          "4ed0f382cc4fd556942d80302454e6b61b0ee39aa3782585073bc6e050e50261"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "92a73db2-0576-4343-b841-87e01c0ceacf",
        "line": "676",
        "column": "67",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#field-templates .default_template_'+selectedVal).html();isSelect=true;break;case'select':cas",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "e8608c8dea4c6e50b1b9916bd131af4f7ed5f75d8e74c9ccd2518bcb6c696837",
        "deprecatedHashes": [
          "1957348d0030aa5041d01f5d176dc54bb0f5947b12a20f3be2de99be35af2231",
          "4c9121708995e8709debe28fa08ac7d7f6c92c9040d9b32ed8e9c25f2b0ca830"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a002e81d-718c-40c1-9f17-5aef0fc5ee7c",
        "line": "679",
        "column": "31",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(html));mQuery('#leadfield_defaultValue').val(defaultVal);if(isMultiselect){mQuery('#leadfield_",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "32a741c8d3cd8b08b0cc3b605a40ed1bb972676be81f69f525047a0bc9ada703",
        "deprecatedHashes": [
          "9fcd43b497001374a614372011de990cb59fdbadd9c1b7944023ac3be0c107aa",
          "7e29ae15bb522c192e84277262e8f1242be6a2eb77a291585c2e4e258216404b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "94db9a44-d948-48d8-baef-f31340e727e0",
        "line": "680",
        "column": "275",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#leadfield_defaultValue_'+label).parent().find('span').text(mQuery(el).val());};Mautic.refres",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "381593866233992a0a39c6e2a749214e9add7bfe71ecc727e21e408c526bd0b6",
        "deprecatedHashes": [
          "bcd84889f047e983541afef0ded5de8e45d650d04fab87cfc006342e1ca3f15f",
          "fc838cd677ee39da7daea331f1711cbdd36f851c31c63b5b4dc37db0d60c97e7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a82c914d-4fcf-4383-a009-9412635d1e5d",
        "line": "683",
        "column": "232",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(form),function(response){response.target='#auditlog-table';mQuery('#AuditLogCount').html(respo",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "7b9c46d3c29d0dd7feac04857678d3f128aed05d27638e122b52b49d9f7957fa",
        "deprecatedHashes": [
          "b8f79913a15dc1142ba9caffec7539b51a2ffff3f50b8e80c42143b80e00351a",
          "834ee6aedc99066e2f9ed6b448793090e175c9867d6782ba11c9bf152ac92f5e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1f2c6fd8-69c5-43fc-b0a7-35a46f5cd24e",
        "line": "685",
        "column": "24",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(el+\" *[data-toggle='ajaxmodal']\"));Mautic.makeConfirmationsAlive(mQuery(el+' a[data-toggle=\"co",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "d90674c6d965011b7f8e0eb410c13b675d49ebc50e411990c3e2b12f71461b2c",
        "deprecatedHashes": [
          "dbb7cc778959b623085feef8cad3e49a26cad07f2b2fc137504efb03db7e7c1b",
          "6d27e0518e4af090494d3785ca4d1d637c9c49836bea0d6bb8e403acbf5e852c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7f5e823e-a620-4975-87c9-14f02187b6ae",
        "line": "687",
        "column": "83",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#socialImageModal img').attr('src',imgSrc);mQuery('#socialImageModal').modal('show');};Mautic",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "3b84a0211e0dc831a49cceb03814bd9046492dd952fff4cfc16426ce5d808465",
        "deprecatedHashes": [
          "1ace764c9b3fde655a61a30954f27f9412527df94c6c58c2f4f99de09b1f1850",
          "84a94560755d04d68cc04c3d876e74c2d3cb99de7051f0a28646734a0ac57ed6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "72046c58-da7a-4379-b3f3-217731b8372b",
        "line": "703",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#MauticSharedModal').modal('hide');return false;};Mautic.updateLeadFieldValues=function(field",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "a3660edd922b12d66cfe1fc4765e04d4c94ab03172dc0ae89d4e7a1a0cb286b5",
        "deprecatedHashes": [
          "7665c4e1ad1d2d1c2eaacc9c19045d616ddfe1169b4cb5f432fb1462bcd311fe",
          "634b0492e28b3c87ea4161e0a992acbd865afd0b81730a98d2125c3fdf4fb9f4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "10eeecb1-67c7-49f6-a47a-b0c70c33224d",
        "line": "707",
        "column": "10",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('\u003ca/\u003e').attr('href',item.link).attr('target','_blank').text(item.name+' ('+item.id+')');warnin",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "02e23e545f65a25057ce95dd5b5c02007951753d680681d266e793da661ad967",
        "deprecatedHashes": [
          "096689749cec0e2a603e684b81e7ca4f7b7ec2221615958139e4156275bddf01",
          "ab620dee4e63201e4d12907a28cd0521ef11fa2433e3740096567c3269170554"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "77acc334-36f9-41df-ad78-88d1c8d75d19",
        "line": "717",
        "column": "4",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(container+' #page_template').length){Mautic.toggleBuilderButton(mQuery('#page_template').val()",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "42a187aadfd52c841c89683a5dd077f17d64663789fc0ec8063f7c4c421a2465",
        "deprecatedHashes": [
          "c6189f6fbd70b0d76c8c9c381c3860836d4eae00d918b69500bb7b4b41027e7d",
          "b812092e53d644d6e32a34ab26bec9244d0654735606f93d5d56daa2f36e9044"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2273121a-ceb9-445d-9d60-9cc9fe47d920",
        "line": "722",
        "column": "283",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(container+' select[name=\"page[redirectType]\"]');var input=mQuery(container+' input[name=\"page[",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "6a2547f74968715e51f34d2fd04bd367a4fe776cb994e8e99a4225b2e2baddaf",
        "deprecatedHashes": [
          "b290a0ffa871cfdaaa7f9ace17d8b9bf619e435456892b89478c0b606c0d0943",
          "0dfde29a82f730e912ba333e86a9c7386371829e557a6f89607957d1c354e169"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "46d49e4d-107e-4dcc-aa70-d20019fc1962",
        "line": "729",
        "column": "22",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#integration_details_featureSettings_'+object+'Fields_i_'+index).attr('data-value');var mauti",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "3c518420935f77353731baceec38f940d984f12a9e9e0445bf517bbeb638ef8b",
        "deprecatedHashes": [
          "2424a19aa7c8c0c69de2df5f85affcac220cece8705be676ed6286201ac67b46",
          "594f96dc82af247f9849ed600502ec3e23f9337b92d9da66134fbc8931ef1168"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "596b5693-3c81-42d9-bb16-a49e22e10827",
        "line": "730",
        "column": "6",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('input[name=\"integration_details[featureSettings]['+object+'Fields][update_mautic'+index+']\"]'",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "3206057ee4c10728273e622bf708f43282d1e03bf3e2a7fac4ad88a9eec1ee8b",
        "deprecatedHashes": [
          "ca6444cb11646f6d3b3dd9d4c5ceb8f2d8472c70c254531611379fdcb7c791df",
          "af67a5f93dd1a13d766d8bc641854ae8c57a21897beb89100b4d01a252b0b0fd"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "cb0fcb5d-8ddc-4027-938c-5902a1547a57",
        "line": "731",
        "column": "42",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('input[name=\"integration_details[featureSettings]['+object+'Fields][update_mautic'+index+']\"]:",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "4427e2a903c8a05c790788904e431d40280715af06511e50e5845ef007f5140e",
        "deprecatedHashes": [
          "3c19d186625f799b77932ca178c544951c2c7b93fe8282c6a1df841107ec4094",
          "6e6f6be4c059b9eb5798c0a436423d5891c0e66a2360ba6c453aa7ce6afa4608"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "cb8403fb-c892-4767-bb21-948052ec9f4a",
        "line": "734",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('[data-toggle=\"tooltip\"]').tooltip();};Mautic.integrationConfigOnLoad=function(container){if(m",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "67b08b1c80ef0ccd1661220074be4acd69120900996346e10ff2b6e216766f47",
        "deprecatedHashes": [
          "3b63efccd65424c8abe646a224013dca4ecd0635f65f66a974b527fbfaa800ac",
          "212083877ca69f7d4cf168646e9ef36e5461ff554a09faaa4f818d863eed1bef"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4f885ef1-424d-48fd-aee7-e199553d88d3",
        "line": "736",
        "column": "30",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query(this).trigger('chosen:updated');});});selects.each(function(){if(!mQuery(this).closest('.field",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "1dd81504c11f29f8f351ec67833b5363835ea42b07495c4db64c23ec66cf62fb",
        "deprecatedHashes": [
          "ff7906a05794dfe0e5b6d47f8be2d359542ad3259a4ff2c205b368f47ae8855c",
          "388c0e5ab1dcef5c7a505b06fa64e1c2f418b4431b47ed3727b52fe5ca328fa6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f96d471c-536b-4733-8cb8-2a58c448e797",
        "line": "737",
        "column": "4",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('.native-integrations').length){setTimeout(function(){var Shuffle=window.Shuffle,element=docum",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "ecee3343957cc30c94456bbf7d8600a273e76368a290830c0407cb06819d8e76",
        "deprecatedHashes": [
          "91078c9515a73ea256c8abccc7968191b92806bcb63740948c11d074fbe1eff8",
          "bc67bb8e68ea0c1c13c8768d86da3c3f2d415c4deec5456d2994c7756e861bde"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "344abcc0-c742-4293-9453-1a256b80964b",
        "line": "752",
        "column": "4",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('div[id=report_filters]').length){mQuery('div[id=report_filters]').attr('data-index',Mautic.ge",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "0199972caebc920eccf2fe195336b3506305dbb4fba0d80655ffefd0dedf889c",
        "deprecatedHashes": [
          "56046cb5ff469b0b95397be906b4de3387bfc484024a5f4cf7f3c6e366708ba9",
          "9106a82135015968b3a9477107daa74803a3f1998bd3b38356284eb0b6f9a1a6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9ac88012-3f28-4e57-b7e6-82fdcff0ba07",
        "line": "769",
        "column": "131",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#'+valueId).hasClass('calendar-activated')){mQuery('#'+valueId).datetimepicker('destroy');}};",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "c732c7db90102e907413164a627a42c5acfc38b1ffa0f614d3392ed0d56e8392",
        "deprecatedHashes": [
          "c1eeff6fefc9d945b2dd024998392bbfa53ec9c6dfc9df8020fcd370e2d6b908",
          "faa247e39282fd297e87463f9a5f8fa09de79afc32f0cfc0bcb3d2e983e6321e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9d5e242b-0225-4a6a-ac98-c78ac9e2972f",
        "line": "777",
        "column": "4",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('.'+bundle+'_granted').length){var granted=0;var levelPerms=MauticVars.permissionList[bundle];",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "acd60fc0ca12d93069b424a8f2c7075a5a68460e49149e2da2b0cf0be58928d3",
        "deprecatedHashes": [
          "578c38f136af942fad6e9093180b74d1ca8aa73babf855ecd0e08911f9753143",
          "5380eb3b9cba1253c0352beba68be689052154dfb9354317780d8ff4dccddd95"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "60b271b2-05f4-4258-a364-dd19b27b201d",
        "line": "791",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "Query('#focus_properties_content_font').on('chosen:showing_dropdown',function(){var arrayIndex=1;mQu",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "2d0e15aed806129a16cfc441115c8408a03fe0b911afe2a6a17c562e68768552",
        "deprecatedHashes": [
          "f53dbbe570cba633e58b54d9b0e21674af6621d709aa0ca48713eee21f14e3b6",
          "e30c0a589aa92918761b02412923231ddb87598e4a0c3032b5566f75f6755979"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "336396b4-8e00-4cd2-b2af-96f40f04ff13",
        "line": "3498",
        "column": "90",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\6.jsplumb.js",
        "code": "// method will have the whole call stack available in the debugger.",
        "details": "(1/1) * Possible vulnerability detected: Debugger statements should not be used\nThe debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to attacks in production. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-15",
        "vulnHash": "bbf69a09b4e6e1f38123fcb9858991e4d8a41bbd4677775025ffaf489fc37f40",
        "deprecatedHashes": [
          "a31442508387b2ee2247ae04ab1e520ac29a4087c35fc56f083a3f46d6db7926",
          "dac9d0690c80851d42ab5c1012b530c7eb38ae297411a68a37413c6b285bcf9a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "79b82fe0-82a7-4335-8921-e381bc507c79",
        "line": "1233",
        "column": "24",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\6.jsplumb.js",
        "code": "var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r \u0026 0x3 | 0x8);",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "efb6dcff23d9ffc01e36702f504bd81a70a933a7cccdacd87b4171af1e1317e2",
        "deprecatedHashes": [
          "9f7e8215cf682b483841e01168822ee47b54c52c83b32132c54fd36bdc743c0a",
          "9330223511f708bab47fe5b2af4521fc4a94a1de985bd452ac5603dd83f07b62"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "37650a8c-3ae8-4a54-99cf-5a6a335c02fe",
        "line": "2381",
        "column": "20",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\6.jsplumb.js",
        "code": "var r = Math.random()*16|0, v = c === 'x' ? r : (r\u00260x3|0x8);",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "b8530508f35f93dd1e2c9d5d27210cd9e0a1396630775bfc31edcd261b6ea80a",
        "deprecatedHashes": [
          "fce31091116c2b68e844c39a1cada06b86e2922715ed54aae47e21ac10da94a9",
          "77c77f1718024be52a4390a6f17b616b61d9ec1a6740df6126123f986ab9254b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "59dc8cf0-1ed8-4f5e-9633-aeed4d983a6a",
        "line": "3327",
        "column": "20",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\6.jsplumb.js",
        "code": "var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r \u0026 0x3 | 0x8);",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "95fd40e72631d5f9219e29d45ba6cd91228b909296c10bc9383721a630c115a0",
        "deprecatedHashes": [
          "d81e237d0f8ba2853e1a7963604ff36cbffee153a23ada95a3d48eb242923184",
          "43d320d5e8b81288ec17bf4876a0433260e5bebdefa7e37d09ee322f64fc36b9"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "973d3baf-b596-4882-a2dd-56b28ab233f4",
        "line": "6742",
        "column": "6",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "xhr.addEventListener('error', function() {",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "669d1df1869224b09f71d736a48b50edeb37c3b0de955d750a1a12ba4176f645",
        "deprecatedHashes": [
          "4c766e756f958704f6dd2322b9d2453a03ec8b1a9be3e59399922c089c708f04",
          "fb8d7755684e9bb9727e0c4ab541d9e85e4c6410c259ce132956a0630e6ad5be"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f5048acc-edba-44dd-85eb-893cdbede00d",
        "line": "30481",
        "column": "11",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "node[0].addEventListener('error', function(e) {",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "35df8d27811f05782c99cd112e8cdb935d3244474ab73803dc1d2394869fdc23",
        "deprecatedHashes": [
          "8447a249f54c08c62ab60d8bd060cd29c97129c350dd1d8f8f0d6168226d967d",
          "300de3d92a5c96aaeb68144a27ab36a932ca4ff7dcd2ebbf9da1d3ba5b203e54"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0ba69ebb-1996-4ccf-961d-d542dfc115d5",
        "line": "4974",
        "column": "10",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "return alert(self.i18n('errJqui'));",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "d7d48f2be0ce3439c6d0119a5b1b640dc7e876ccac84644253ef7279abf01cec",
        "deprecatedHashes": [
          "76f12c732251f427d917c6f36235ebbe345ba5bdd0aa46c96349855268ffa0a4",
          "323eb2a38d9054b319784baa68269c8a3d787e0f2cfedbd248fa7f519b2b7c21"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "15c367d1-8f39-4ff5-b433-946accf55ace",
        "line": "4979",
        "column": "10",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "return alert(self.i18n('errNode'));",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "1db9132ac892ed01355b21ea0dfdd20cc61c2b1bf3e9d2af93c895db5bc521bb",
        "deprecatedHashes": [
          "1ce3fc362f1306adde3803994e7b3800439e6e0e962e6e4f93db07de45673ed9",
          "b093d990cf03bcbcb294b6e875f50fccc7d606ab71ad4522ac2bd12c0bd62945"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9fadb581-5673-4ebb-97d1-700e86ac626c",
        "line": "4983",
        "column": "10",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "return alert(self.i18n('errURL'));",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "378df8aa02c141606dc5dd4b607ba29eb85e09c1ba959c736ae7c406252e65a1",
        "deprecatedHashes": [
          "534fcce8dd50ad81aa0fdaa88fc9ca35037a2dcd1cbc1c043a107d3ea5be7ec4",
          "e0818b39f7d4bac2fe59c6a4d0f5adbc703914d27d98c1893e53d9a668548068"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e0f29b5e-8d02-455c-b8d3-623e3e8ac432",
        "line": "6130",
        "column": "14",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "? confirm(++ndx)",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "b1c76ca72dd346383243e13437b99f72fa8096e56dfe29f0ebe30704c1a1be58",
        "deprecatedHashes": [
          "877acc57a817668d1f2588ebca93c179446a8046f28faf78870d0ef68d539ad0",
          "081e94738e802a4e722e2559048ff4beb91cce19f1a6a66071a14db30f168783"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ad6eb3d5-6318-4b5f-afed-dae7bff1db52",
        "line": "6149",
        "column": "14",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "? confirm(++ndx)",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "94084c15156dec0b8a7990e6cef5a3e631e45383873a9c7a917049f81d556d4d",
        "deprecatedHashes": [
          "d1c31fb2eab81b0183bb1f30493c680077d8cafd7c317c4e1ea9e81538642717",
          "967b5dd1103b7339fed4807cbeed1dc2a969fc15154107993a77d786fa7d751f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "40557805-66c7-4002-bd90-2b205a48e83f",
        "line": "6175",
        "column": "15",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "? confirm(++ndx)",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "9d34ca2ce9ef70ed7b7875ea14e7887d22414de7063956b3be206932ba28a959",
        "deprecatedHashes": [
          "b37781364a4fe9c892e14ba648e21e9e326e82ff3dcec23db63dfe27a542d838",
          "a1bb280e78934935a1f320f2156d39bd2afcc773585b319f921044481de7da0d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "42f42824-746e-42c5-9a0c-01554003d1b0",
        "line": "6195",
        "column": "10",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "fm.confirm(opts);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "387d42ed3244c28e7989bd3f49bd2d5e3adffe65c5755a50ed514cc799ec46fb",
        "deprecatedHashes": [
          "023da0c0cb3a0b54f2de041910fb78cbc7a55acf88b7bf80e16dd12405a9aa1d",
          "b886086d27163931c67c98d7e892be219a69b65a7329e865c1542d2f239539ce"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "991b0f13-5cee-475b-a084-27f4e9a2c256",
        "line": "6253",
        "column": "7",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "confirm(0);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "b419b93c04e0320949da2bc7515dc8e91083a7112687a4067868db4e839723fd",
        "deprecatedHashes": [
          "9ff3914b701f53d8d2178046b3f509178257307058ce0abd0a4703f500b16257",
          "dee5740835bdd36348e22c35a7d17ea01894b14c3c48744352837baad0555b3b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4a5f525d-5d6f-41d7-bebb-7baf28dc8f77",
        "line": "8685",
        "column": "9",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "* this.confirm({",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "7a73ae88ec8bc24a01b4589237741988f8109e8f2f3274deb8fee87191e2697b",
        "deprecatedHashes": [
          "2734a6b5435668175ebdcc584589c6ccea3c8c0fd9fe9a8111b8c3aa0710f08c",
          "ea0e3388769e49cc0aab8500d55fe9afd71d61a006d1fd00e1f1791da0c060f2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "86213cd1-2804-4ddd-8a07-f68871c85401",
        "line": "24299",
        "column": "11",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "fm.confirm({",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "c26256937563d82aefd0e2d0dab898e5ff97f5224bcf489331e96350cfaec966",
        "deprecatedHashes": [
          "9dd6416aba9fec325c2543ec88b7ad136b3ab3183e6d4a514f0fa99828ccdbc3",
          "28795326a8054869ccc5430f7efb99bdcc81fc76c19594efb6dec52d16320eb9"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "def3c115-eb29-4ccc-b84a-32e92a0d0c66",
        "line": "24653",
        "column": "9",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "fm.confirm({",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "f3a2f77ef197416dbbef6081a3f48ba009aa6f33ee413ee51ffb8e7c71d5d3c9",
        "deprecatedHashes": [
          "f3ef9d635d3b64b9f2967d231b6d65b6cc16c801c564826af94b3ad5cc6370af",
          "cd5efb1775d12008bda37c96db5013b491a4fc772f2f4806642053d2aa2604c9"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d1a7c26b-b6a0-4661-ab0e-794a9053dbee",
        "line": "25398",
        "column": "5",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "confirm(files, index+1);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "ebee7121eb05fc043eb433c314115fcb6171d55fb0e07c15eef32a4c0e3f9c8f",
        "deprecatedHashes": [
          "5854df1dd32e09bde616a22cb000d1cc31f3c8ad603f8cfb0328b9b9ce3a1cc8",
          "377930643448a0f41177ff15f8132bb6829af0d514ef3fccdacd37a8b3119042"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "71136e90-2e49-419f-9afa-a2f437e12b8b",
        "line": "25404",
        "column": "7",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "fm.confirm(",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "7f02c034b67cafd38e61cb02f923364ca54a752f10e1776c03a9288172011cb9",
        "deprecatedHashes": [
          "0fc9df8953521120a75fc94f8f1cfc05f6b949ce69c9d0e538469797b6c032c3",
          "1a84533f7753f043a9dad75a06a696eb0942c196c60023fd40955edadc9d3508"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7c3577a5-890a-4aa7-b080-b01ca7f5b49e",
        "line": "25418",
        "column": "10",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "confirm(files, index+1);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "f476207c4e2e7a9ace492a208b11c67aca4109062d2ff8458428f1224ca7bfbb",
        "deprecatedHashes": [
          "330e5ad9016a77502af9dcf4bba70acd0da2a72eba008e1478fa7b910ef81f89",
          "b5bd549360b2ec6a01fcbb1c91818c30fd4502b2d65e25c010305200b3ba4c6b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "65df6cbc-6bbc-44c3-8aa5-a3de204fbd47",
        "line": "25436",
        "column": "9",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "confirm(files, index+1);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "16d2f6e9a47c7778f3a2bdf018fd57bae8e7660f4923c0faee17833215aad335",
        "deprecatedHashes": [
          "743e68f39318f2513901b3eae4b04aca2423902b1f727335ea49ea243c64eb07",
          "17073fd79a3dfcede9f92e00599b12ec3d144846061221d5830eb2659e88b77f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a7ee2e37-0944-4fee-b351-1f29b256dbc9",
        "line": "25453",
        "column": "8",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "fm.confirm({",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "588efaaae8c493aecbc61cf96245acac4f599f544e8013a695faeadae21be48d",
        "deprecatedHashes": [
          "1e8167993d86f0fddc5f2c912cd0311d0c5220d4f800a635fa24fea033019711",
          "7914ff8b3f6598086cd13bdcb826f828754243aa568e5e65f8e38c3d97dd79c0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9424b117-b9ba-4faf-9731-1f7081e6b3ab",
        "line": "25494",
        "column": "3",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "confirm(files, 0);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "a19dbe7b7542adbdd5bd9263646c19b8e6bda79148df4a79228a7464576a72aa",
        "deprecatedHashes": [
          "03b102b8ac6bdefac007a3edcc2b80e048a930de0652f20c0ea1d681e9715906",
          "b1607397bdf575ab9dfce24b3c24ce4274be8308948424dd803eb4d223b8571b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6fde91cf-b4d3-4180-b885-39179ee29740",
        "line": "27214",
        "column": "6",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "fm.confirm({",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "21731394840d7f6c9245511811e3a0da7fe26c18fce9449836372d5252d42b4e",
        "deprecatedHashes": [
          "df412112289f30de66800e5d056df3dbefcd0de5154ee64b1a0202659f6436c6",
          "9083ec7502848d96969806f2d7a13bb40ff97db0dc2ad8dc03ca6998a3646da6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "55fabeb7-cac0-4846-bc19-f23a4cadf457",
        "line": "27247",
        "column": "10",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "fm.confirm({",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "a74bdcbd1e514c391fc523c0f326881ca0527153aeb7d641294cf08214a7d081",
        "deprecatedHashes": [
          "abf5fac6c709fe86bcd608e8ef779de15aecc9cce2756d9d14d0484316ca6a05",
          "a82b4f53afb059836aa159f00e8bdfa1190c25fe24468a6291dac9ea2c3169b8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "eef5ffe0-57a4-4770-8c44-de30d736a374",
        "line": "27504",
        "column": "6",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "fm.confirm({",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "cc6c49e98b595405b91e77dc069c3e738f82b621e99d25da0b7bf18235b96d6a",
        "deprecatedHashes": [
          "c0a510cd88b9ffcb67cce70598c352a4606cdf164cc3cfa34af81dcb2e195184",
          "a71a11f9a4227d50be910ef6b2445a5ccda2daf7eb17ca2ecd84aae209e4021a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "da42cdbb-04d3-489a-9a89-f607aa8cc05a",
        "line": "27746",
        "column": "9",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "fm.confirm({",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "f64e74b5146d910c30bd3675221e681c92752f7ce3003a9577416b1f5bb8fe9d",
        "deprecatedHashes": [
          "b386db76d41e5a80386a9217460f4853eac6c49d19dfeb0c5203daaef9aa78e3",
          "067a425834d5f114c627190b468475e321fd30f8400ca153f314f6f875b34b60"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "13c9babb-ac62-4eec-b1ca-91a1ccef1c0d",
        "line": "27754",
        "column": "12",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "? confirm(++ndx)",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "636d89beb2e6429aa21a696031065fecc96fc44882d78f91f5d24ccb7edce03e",
        "deprecatedHashes": [
          "8ec1c865b6da071948452b53e9ad9ea22c14017acd8870e1164ae078517ab90e",
          "976bc97df23787f7baabeeab10997091249545bf95319cc45b08b37b5094d08b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "01528730-aa2b-450a-ba28-ed772bcf36bc",
        "line": "27773",
        "column": "12",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "? confirm(++ndx)",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "87fe5e3ce554aa4ee1e418a1ceabd72e823cbfda2be29c4fd6198e1c27e3fbb4",
        "deprecatedHashes": [
          "d39311720241c2419cc88e119a66605e17f363284a26810feac22071f6e68480",
          "e7346b0453d662d9619bcdf831cf653aba47cedfdda84e4a879e4770db0705ec"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5184170b-af99-487a-a55a-218bee974da3",
        "line": "27797",
        "column": "13",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "? confirm(++ndx)",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "e2a4dd759fe70c86ff05e809b3f058369c95cdd3fdad2b68083e2bada7faeab3",
        "deprecatedHashes": [
          "2927f80bdf11da1a6b7f6366185af7145b1214f3c01fcb07b8e54ad062b8c9af",
          "d6675d6cafe84118a175d51a464873d560702dbe43afcaebe577d991dfbff9d9"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "853da390-c9e3-400b-83c4-73b03a909f10",
        "line": "27842",
        "column": "23",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "existed.length ? confirm(0) : paste(files);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "8e2cc323e5a2b96bfdb4a348d1a80eabe3ffe585a7fdc6ba9a5cffd6fe6084b2",
        "deprecatedHashes": [
          "b2fa30eef00a84b545080a2dd9f1180cb0c8c2fa994613b3556d87e28c2d4d6a",
          "953cfb4bc24379353a40dd2eee47944c1b607027b59aafaf4c80a72300c2659e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9aec8bb9-04dd-4a05-bf54-88b68e333d5a",
        "line": "28033",
        "column": "6",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "fm.confirm({",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "89f1d1223cdbd720265813376453effcb9da9967964798daf91e32da53cc18e2",
        "deprecatedHashes": [
          "63f8de0922b2d737a9a636e0cfe6d4adcf772f19cf9ca0314ba5f0d0d7facee7",
          "e03f2d7017010664faa8a765cd3c7ac5c434bb4cfb2a7874b675a1fae379d509"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "db4b2c31-4332-4b4c-815b-7e00217cc091",
        "line": "32063",
        "column": "9",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "fm.confirm({",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "bfa92dafb05b03cc29b00212cb15b2aa71ca2666c0a761802793af5fe6e049d2",
        "deprecatedHashes": [
          "3fa64af0209833eda6e208d95ad5550f67cb9e5ba2e23716a915db6243809640",
          "bd4ef3aa0df5fbbd77ed844e494fef96bf7a456d0c16552482b2d8e1288c97db"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "bb49792e-2054-47d6-84f0-cb9de436325d",
        "line": "32994",
        "column": "12",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "fm.confirm(cOpts);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "f5d1562c16c3ec9d28bec0954a92f72f2e0e507408c7e792cfdf39c21d4faa33",
        "deprecatedHashes": [
          "503b2f96dffa23ea22e52568fb1ae879a2f1eb4d355a0ca55060d765d0473e57",
          "cda588d15396ddb2365f2079cdb625b49064a246052c08bea340539387526a54"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "55ddaaef-4b05-47b8-85d4-db8ed0eac8ad",
        "line": "34268",
        "column": "15",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "dialog = fm.confirm({",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "f71eb554562d594efaa5b46e18d28dab763301b449e698147abea6ee7269eb03",
        "deprecatedHashes": [
          "59403d70537b6f6dc6d061b6a292a1acd6ae602aa244ac9afbbbea7853b2f7ea",
          "eb1be59ce6adb11038a590efcd55c21a59260df416b3bca6b7df9ae061c353a5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0324e5d3-7a4f-4080-88f4-8a6a8c465d34",
        "line": "34320",
        "column": "9",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "self.confirm(dfrd, targets, self.files(targets), null, [fm.i18n('tooManyToTrash')]);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "4aad75fdf88f9def7453e3bc8759274fd5e64b0b6184ef6a81491481eb93d4d5",
        "deprecatedHashes": [
          "2ef13ccfafbde602e36102a951824f9c2ab6d29db21801b45c52815e84fe600c",
          "67fcb7dab87225666c14f8916ebd5ddcf6253aece83617265f2b36c97e56b703"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "206a0166-143c-441c-9e12-15ebd8ffbe3f",
        "line": "34539",
        "column": "9",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "self.confirm(dfrd, targets, self.files(targets), null, [fm.i18n('tooManyToTrash')]);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "795f3f1de81cac22877b3a8a54c7eb46c4f447568ca6730988b8b3d90103c8bb",
        "deprecatedHashes": [
          "f16e4a36679db8cb9659816ed6a14ba8f3b1105c6fa424a3d4c433abe4da6857",
          "0b04d5ec3263ea97450648d02158fdb173866bab4e5d9efd4ea95066a4bb863f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ed47f6ab-7678-4a69-a7a2-12ee2fd2f1a5",
        "line": "34687",
        "column": "10",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "self.confirm(dfrd, targets, files, tHash, addTexts);",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "5ee03326522320c61d673976447e3c0e255f8a215e3eef5b3ab9328b5c7e6319",
        "deprecatedHashes": [
          "4d8df211922af651b8916550731de047c668d13d803ce41fd0c067705773cec4",
          "f46890695d122e8194aff995be9104ef6785ba9b2aafb9ae9607dbb56101cd0a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "42f59815-3ea5-4248-859d-90bac32f151c",
        "line": "2318",
        "column": "62",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "reqId    = (+ new Date()).toString(16) + Math.floor(1000 * Math.random()).toString(16),",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "79f9a6468ec2006bc862efa68a44e1e148616fb9098b6e7be5ba8336261aa724",
        "deprecatedHashes": [
          "d7dcfcda924e214127c22aca240869820bf9906180d4da6a342e1fb191e47a1c",
          "b164e29673f97267df5c37d25332afa515ddfcb7bf852c2eaf1f27d5ec1d1fe3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "27e7affa-aad6-4453-bffe-eee5f63c5069",
        "line": "6675",
        "column": "65",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "reqId = (+ new Date()).toString(16) + Math.floor(1000 * Math.random()).toString(16);",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "a29977898d41a894e570c4eddb822d54e80f623e4de2b5384f93e59f52dfeebb",
        "deprecatedHashes": [
          "c8cc0aa86a7c70b65fc6b020cb6ad6b755a42f50bb8955b612953e5db4b8ddc3",
          "ac34bd302b4dac863182d16b29d831364b885c4a58198ea786f4388e3116dbc3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3311e071-82ec-4e58-b8f7-64e22455e996",
        "line": "7183",
        "column": "61",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "reqId = (+ new Date()).toString(16) + Math.floor(1000 * Math.random()).toString(16);",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "a76ae52a873626dbc678ca3aa027efee24b547c07c8f02c67c065cd93d7d598a",
        "deprecatedHashes": [
          "9269c9652cacacc8a29a5fea1e4e9457be0cf195bf554d7b5bad5d2fccccac4c",
          "6cc07480da76312e159b33c634c3336a7305408eaf24dc853e12533ed03828cd"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "028e28fc-c360-4c82-8c46-a78a2e785783",
        "line": "8814",
        "column": "18",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "return prefix + Math.random() + ext;",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "119532f22c5039fd1fb00f4e81fd27aac15c9ac1a6f05144bb351dd063f1c7c8",
        "deprecatedHashes": [
          "a5470de045f88ee23ab677008b191f12c60a307398072e1df7b302d94b6caa04",
          "a077ce5ef7e85e07c0d758a0b70e7f505639ae51255bfc661fe1ee0a3e19c2e6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8bc18f29-9ef6-4b6d-b320-d373227c4abb",
        "line": "10419",
        "column": "57",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "return (+ new Date()).toString(16) + Math.floor(1000 * Math.random()).toString(16);",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "025ea8be20225bf2861ad95ec779a0ba596c252e7ea367676854b07041137208",
        "deprecatedHashes": [
          "10217bf73ca5d2f61b978662f5400e398663acb9c171251cc55a50db9f73c705",
          "dd64b0003520f1ef5af6fe93ebcf259abf703640abd46e9e9b0c7b598572e59f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "45ed49fc-3946-4744-a6d8-d76b07101719",
        "line": "13260",
        "column": "28",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "id    = 'tmp_'+parseInt(Math.random()*100000),",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "adbecb5b0beda10311006e112fc44c1b818e1152ab930ca1913c548ea2d97688",
        "deprecatedHashes": [
          "6ab24ac3c98777de7121a63c8aa6158dbbdba830ce7115be5def106d5852d606",
          "485d9c88e74d512b72ff5ff9358f750ce83bf27adb1c3709b81156c982e2de38"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0287503b-14dc-4cf1-91bd-a7273ddb7056",
        "line": "18174",
        "column": "25",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "id         = parseInt(Math.random()*1000000),",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "a38256c9de3566ed46774f01f9dd6e9b56d2814b16deedc05db03f66e20c404d",
        "deprecatedHashes": [
          "7b0a7165da58ca94b77b8c9e0cbf13c929fceb771752a0383bfe7404c1f0a886",
          "b3ae001489af363a5e9af4c52b61ca5874c9fb15d85ddce4ab9eae0ad790f4f7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6023793f-2a00-4567-b5e6-17c78f86aafa",
        "line": "206",
        "column": "207",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": ".addEventListener(\"unload\",unloadHandler,false);}else if(subWindow.attachEvent){subWindow.attachEven",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "7136beeb536544b0eee6c1de3395c448bd4a5b9ab008966a6cfb71be0e7e681d",
        "deprecatedHashes": [
          "98cef4aa4fbc48d38fd2303fd4d5fb13de5452678033246327e8a496992f7a4b",
          "8309b80bce92427f419de65ed8be6040f7a97398c950e81fbc782b15e1b95474"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5533969c-ffab-40fc-a9f6-5d5ca90bcc60",
        "line": "2716",
        "column": "233",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": ".addEventListener('progress',function(event){var percent=0;var position=event.loaded||event.position",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "87a6571056a85d78918776af870408f6e381b2c546fc74810af0f843a1cd816c",
        "deprecatedHashes": [
          "ca14d81d84381c095423c5d263354ff6802eb4879068b37aa2992712590ca516",
          "cab7e964a306f843ad8d7d495a02a48b15bc0bae42831d5c6f5f529427e76277"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "57e68f50-567e-41ba-a1e6-8a46e00b98fe",
        "line": "4504",
        "column": "3",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": ".addEventListener(type,fn,false);else if(obj.attachEvent){var key=type+fn.__tauid;obj[\"e\"+key]=fn;ob",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "71632b00bc219f30e483c5e57359c42a9cad3b2e7042b4dabab8e00e92042ee8",
        "deprecatedHashes": [
          "60ddcc1e72aa4e9f6e0ba6e7ae63493a66e8ef9405b8ea45dfab833115ea83a1",
          "8dc16d76181f0a23f70e03b226410db129821d6b5fdfaceeeb40bbaf93f5338a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "af5813a3-3171-4f29-a180-edcc29b70d88",
        "line": "5685",
        "column": "132",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": ".addEventListener(toBind[--i],handler,false);}}else{this.onmousewheel=handler;}",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "24e2f926875bbfef99f0b3e876cc3394f9bf0f795767b2dd8016d28369a4c803",
        "deprecatedHashes": [
          "f57bc16e2db33efbd50797c82aeb5f8a89fcaa8fd4cf7f5b658ec449cd4cff8c",
          "e72786a58eaa2928fafb301d94ed7f95d182a47182235693865dbc4142c7761c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "60d29229-4fcd-4f7f-92a0-f7cbec24395c",
        "line": "5722",
        "column": "2961",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": ".addEventListener(\"DOMMouseScroll\",C,{capture:!1,passive:!1}),this.addEventListener(\"mousewheel\",C,{",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "0ab135b55e215073a14372971136af12953fa6c5aa310968ddeac4851beb8c97",
        "deprecatedHashes": [
          "74adb3cca983ffff4d7b13efbfe55b2761027b739ca1f1284e38bcb6ceb3bcda",
          "d23b61bdd77ece0513e817ae1837ab88674ee514050837440845f46457172a7d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "befc5989-e6e8-469e-beb5-8f1568844221",
        "line": "5825",
        "column": "9004",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": ".addEventListener(\"click\",d));return o}},removedfile:function(a){var b;return a.previewElement\u0026\u0026null",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "cb9b6b138338545a4a1c67c92068a8420583d4f6720b4b746377335914cc9277",
        "deprecatedHashes": [
          "eb2174fde461b02adeaafe9a4f7c357dd448f72ed5c7a6be3a30ee9b97b56693",
          "7866e47e3f61bee7d819035bf1d2ff02e7a82f2274e3e237d9ebc2c99e4781d5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "eabd3791-8b2b-48a5-91e2-e94b7cfaae36",
        "line": "6677",
        "column": "746",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": ".addEventListener(eventType,method);}else if(node.attachEvent){node.attachEvent('on'+eventType,metho",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "e90de668dcba09a48acb062a611d5a399039be895a3fcdb05e35c10992dbd3b1",
        "deprecatedHashes": [
          "a8751c8319fbf1a5bb8af4881308805a4129a1d5251267209626b0e58eb4cd97",
          "c19a8f07f30ef209b20a754e1fea80de89576db86ce8396d19739f6a8ff0b23f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "11ba8584-7ebb-4620-a502-ee7e5f7acfeb",
        "line": "6907",
        "column": "131",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": ".addEventListener(toBind[--i],handler,false);}}else{this.onmousewheel=handler;}",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "9cfec791308a9954bacfecf7dc4b59d80d4c8aca8e875fb8d134f5848ae14854",
        "deprecatedHashes": [
          "fd19761717beb350fef814818eb3a5f8218f64a92bc7533cea2eeb8d245a76c0",
          "601f2bb2eb75e1d9932c8a9ce75f167af338e444759dfdc5b7ef94c18db31a1a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7b720e75-bdfa-44f1-9669-e76373020f71",
        "line": "4232",
        "column": "275",
        "confidence": "HIGH",
        "file": "media\\js\\libraries.js",
        "code": "debugger\":C,\"var\":kw(\"var\"),\"const\":kw(\"var\"),\"let\":kw(\"var\"),\"function\":kw(\"function\"),\"catch\":kw(\"",
        "details": "(1/1) * Possible vulnerability detected: Debugger statements should not be used\nThe debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to attacks in production. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-15",
        "vulnHash": "2c6d86740b0dd025eb1f82334503c4d2e422b0221ef7ab6ff8e4542009bab32d",
        "deprecatedHashes": [
          "03ae73017d7687a0dab4aee889cd17e5ec07c90b17863a851b8c46b7cb1dec31",
          "f3a6e082e46e3d216f67a08c59fbbb08d47148a0c741d7763ae5f48798fa5ad8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1d4c0bc6-9c49-4e47-bafe-d5f64c9d8f9c",
        "line": "880",
        "column": "24",
        "confidence": "HIGH",
        "file": "media\\js\\libraries.js",
        "code": "else if(!consoleExists){alert(message);}",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "de66da3d6bf32ba4e6b1d34801c57c15cb1a6c7b2344ea089f6e6c138111d120",
        "deprecatedHashes": [
          "1cdefaea951e263aa4c6d2f2dbce73ec6a2310c45f73c62ee602f92915c04ee1",
          "67a29f30eabd8b62e49cf870e431280844951a42e4bdeafa52ff6a024374e67e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "0436a352-14c3-48bb-96bb-81b5e0b0c233",
        "line": "1049",
        "column": "41",
        "confidence": "HIGH",
        "file": "media\\js\\libraries.js",
        "code": "if(!data)$this.data('bs.alert',(data=new Alert(this)))",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "cd5cfc13949c5af498a792c7f5a802a448f8456cecd3ddc5831ea635098c4041",
        "deprecatedHashes": [
          "1a6c6674f437ce5b748b07519b734552bd02c67b3af1dc09c23fff62f866c207",
          "400423edaf7b83d9828a6f047870ab6d353538ed7faa1a5afeaaa26e4ab8a045"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e73fe947-dbea-4b65-b934-88378220bf3b",
        "line": "5825",
        "column": "8678",
        "confidence": "HIGH",
        "file": "media\\js\\libraries.js",
        "code": "confirm(b.options.dictCancelUploadConfirmation,function(){return b.removeFile(a)}):b.options.dictRem",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "dcb294359f5e0e130530ca0ea3bd7178e0b3ff62eb3a0d1d16962347a7db47da",
        "deprecatedHashes": [
          "374c398d59b5c270edea356bbb27ba3e2388ae55ddcd83070453397e859fc6a3",
          "eae493f342eecfa7f247a6cdabaadd130a96c971c0df301c48ee6e80f82fe680"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e2af3991-ef9c-4b78-921a-ab1cabe3ee4c",
        "line": "150",
        "column": "57",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "Math.random()).replace(/\\D/g,\"\"),isReady:true,error:function(msg){throw new Error(msg);},noop:functi",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "eeb79ddfe12ce6d9e95fd47c52f01141a6ebf7801819e6a3ac4f5d2cf745434f",
        "deprecatedHashes": [
          "db10d17376d5a80dbe27e1eb941595cfd48f944bbc1b80e50302b0743f8f392c",
          "85cedb27c3c0c3502d23611658da1c49d926a927bfddb0aa94aa80d825c6b58e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "cbac70d7-c414-47a9-9b20-8c014cceaa40",
        "line": "292",
        "column": "392",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "Math.random()||0.1),len=elems.length;if(outermost){outermostContext=context===document||context||out",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "0007f85486c9f819f226a14e1bd1e7bbe28140544a0815f53116733802c10a0a",
        "deprecatedHashes": [
          "a3cfb2b75df8d05df93243a6474fc4e51581e09745a49a87682daeddff573b13",
          "39047c6e20260c984fd226532188b9070850d8d73aa647b5c5f834d152d72d87"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2f76d515-81c2-4d4e-be64-815db42cecb9",
        "line": "908",
        "column": "50",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "Math.random()).replace(/\\D/g,'');if(typeof History.idToState[id]==='undefined'\u0026\u0026typeof History.store",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "1a6a4123cdca8a075ed10c1a10cf64f3b681960349d7f3987669a64b82425109",
        "deprecatedHashes": [
          "ac0179c5bd05aa34beb6e5998d5b5db0486e378431cff7b894ba9ca02519d9c7",
          "2a7a6cb305d944b4f0958efc00e12f2878219f91e8fdd29ff39ddc7f2e47983a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7ef1edf2-efe7-47c6-884f-a14a0baad297",
        "line": "1587",
        "column": "56",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "Tooltip.prototype.getUID=function(prefix){do prefix+=~~(Math.random()*1000000)",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "d5150d801f6715d8c3b4db0041753aa590355afac5ecbcdba4bb493313af7b29",
        "deprecatedHashes": [
          "26c23a1caf40b87fe16a6f795dd8044d1729ad1f8814beddcf89e24226c613c6",
          "b00695338f72ad430f2568126a05efcad0489214cf3e250ccf71aa5c6914b1b0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7fed19da-a2f7-4114-9550-242f653bf1de",
        "line": "2938",
        "column": "138",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "Math.random().toString(16)+\"000000000\").substr(2,8)+(new Date().getTime());};function Controller(app",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "1f2d782265341f479e984751e6852c9fbc59816d12d8594a312129db26d28830",
        "deprecatedHashes": [
          "aa0234c0b6b21548f0f2b321e9d5064a38e564ada69f3eb7cfd027c2e781ec90",
          "1b859e7d8d0afb506413f1d18351a01eb5ef591656727a7d3eb48b512d6a48ef"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "16b801eb-7ec0-4bf9-aef5-027bb4acddb9",
        "line": "4507",
        "column": "116",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "Math.random()*16|0,v=c=='x'?r:(r\u00260x3|0x8);return v.toString(16);}));};root.Mottle=function(params){p",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "0f8c20724ce63df57aee41abefe7698cfe5631f339ee5fe88700811b16908ea4",
        "deprecatedHashes": [
          "97de467ca7d3be2a607fe89922a888d00b1c7f7899e4617e0873af06317a08c3",
          "072552076b2d05dd03e692567a89ae54e68f0e15d404a2429550280dc0e97b96"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a12fff91-5dbf-48c3-9479-2b1fbdf7830e",
        "line": "4569",
        "column": "313",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "Math.random()*16|0,v=c==='x'?r:(r\u00260x3|0x8);return v.toString(16);}));};var _rankSort=function(a,b){r",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "e955ed047f36817eab153be44cc705603648a68ab723d69aab1c8bfd2b093b8a",
        "deprecatedHashes": [
          "0343e776c7a8f1c34413e7d79af434935f376476cd0da9d73ecaea74b8290f38",
          "ebca7e86ed096c18e9e58466b2beb902388f2dc20dc619dd66e82443dfe6bdd0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c28b7c3e-59a5-4525-b321-40eedef34ea5",
        "line": "4645",
        "column": "122",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "Math.random()*16|0,v=c==='x'?r:(r\u00260x3|0x8);return v.toString(16);}));}",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "8cbc28bfbe3ce8cf5065244a178359fbb729768004fb45f1950cbe15a3911726",
        "deprecatedHashes": [
          "a4270e9af6e81666b3cd50bf1797a7a84818c244779d48a9ff637ddc6f6ea9f3",
          "668afffc1e4759de305f3c2a0b3fba217f2db0884d48344eab1a4b040c7e6e51"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8b68d4e5-db22-4269-912e-775dade00d3b",
        "line": "5710",
        "column": "4802",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "Math.random()*(e+1)),n=t[i];t[i]=t[e],t[e]=n}return t}(t):(\"function\"==typeof i.by?t.sort(function(t",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "71761ab2f849a6c41237de3f612b7ad2ecb6eef4364a90beb0dc792a4cdc5377",
        "deprecatedHashes": [
          "65982668e5882f75b16ec9d4388ce3787dee14fec2c097fa8f055d825068d42b",
          "fd6fa8aba11ece76d700d745875f11296d0db87003d9021d103599d90ba2e2bf"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "02b4304f-fead-4fdd-be89-8e877acf9bcd",
        "line": "5763",
        "column": "51",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "Math.random()*10)+1),isFunction=function(value){return(value\u0026\u0026(value).constructor===Function);},isSt",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "72d7f1b655049c05f7569955efd772a4eb6d18edc87c0869457e9fb767e81951",
        "deprecatedHashes": [
          "92b079d75221d82273c9bf7559c16d88debf95e6dff330d10554a826d23724aa",
          "237a70f24e5bd135c128791656b516bf25bf2c56fbc3bc7206430c9b2277bc2e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a205ce34-9c64-49d0-bba0-3e2335c89f8b",
        "line": "5844",
        "column": "1234",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "Math.random()*1000)+'multiselect');this.$container.attr('id','ms-'+ms.attr('id'));this.$container.ad",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "d8bf49a1af243a76d12c96c6bfae3e0526ce1a53045e6343e7b750f01d044288",
        "deprecatedHashes": [
          "570ec382cd46c9edb57f4f937e1070162c44705aa6293fc817ef2f0e271b46ae",
          "beab00e1843fd694550612bb60a37fa7df3dac6098472c816830c0fd6bf4989f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3eade081-47ea-4219-94f0-36ff384ee27a",
        "line": "324",
        "column": "228",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "Query(selector).filter(function(){for(i=0;i\u003clen;i++){if(jQuery.contains(self[i],this)){return true;}",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "745305f1ac7eb867fa3e1303dd698eb186659650641df388fea21d4eced02bff",
        "deprecatedHashes": [
          "12fd14d4bcb0b4fcc57c50dd6089379973dfd3daca36f133e73673981be9de45",
          "13bdff3e68edad879cb86355bd8f2de7482730f82ed7c529f7b5fa3ce24277c5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "89027d07-ef58-4bfe-955d-2c4ccf46f68d",
        "line": "326",
        "column": "304",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "Query(selector):selector||[],false).length;}});var rootjQuery,rquickExpr=/^(?:\\s*(\u003c[\\w\\W]+\u003e)[^\u003e]*|#(",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "05bc936d5593a3050a713b1da0e10665c251c6714c28629f517da3b2c6b424ce",
        "deprecatedHashes": [
          "62e73134c30d0d0f781d32c637d5762e0f220f9f015eb05b471f219903bad94c",
          "5bf09210147a248ff0c604c262028b440e5212bfb550793027427f9d7fc74c01"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "cd07c524-1ba7-4222-a184-fd80e5b9d000",
        "line": "331",
        "column": "78",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "Query(document);var rparentsprev=/^(?:parents|prev(?:Until|All))/,guaranteedUnique={children:true,co",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "a3f38b87cbe0ba948d79ebbb25b37499dae284700879bbfd48e1e3975dd0634d",
        "deprecatedHashes": [
          "fc3b01c48565dd2e8989a80ed0ec06b5b0e64a0204baead3014220adefcd0681",
          "1b51331d086821a5d7223c8e3f65a9a7b58f090f6ac334288588ab6df30ffa64"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f363e3cb-6027-494f-beef-4f5aa2c1e77d",
        "line": "516",
        "column": "509",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "Query(selector),last=insert.length-1,i=0;for(;i\u003c=last;i++){elems=i===last?this:this.clone(true);jQue",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "fcd5bcc8342a7dc247f3effba35b3f05318111058bf1ccd8796d5ea7893f81da",
        "deprecatedHashes": [
          "c416beebe3e507eab50beb720d78c7e4028c5128f008d13d54ce54280935b3f2",
          "c3b1c2a12c8c4ea07cb140f0664f402124a0f565191a5ae05b8d2e5e9c64f0f0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "57abb325-0bd5-4d6f-a430-6f433ef30108",
        "line": "5482",
        "column": "1542",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "Query();this.dropdown.isEmpty\u0026\u0026query.length\u003e=this.minLength?this.dropdown.update(query):this.dropdow",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "f669e23e98f0edba9ecf8225820e184a9f461f0ef2a68255e766b935f558cc81",
        "deprecatedHashes": [
          "4537b52279b350e081c9389e47e6959da97633a0f339e9de77e7e2b6d20b898e",
          "cc48fbb6f1bba3f1d554d1ee391cbc156480cba1b407372d376a02905fef3880"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "699ccfe6-26b7-424e-afef-5c59bedae373",
        "line": "206",
        "column": "207",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": ".addEventListener(\"unload\",unloadHandler,false);}else if(subWindow.attachEvent){subWindow.attachEven",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "170b03d155fdac77599bee437372fefe14b81139f5e96373ff5f9d4df6cb9763",
        "deprecatedHashes": [
          "1fc40f7c52117d8e15fb0bc425abf64d633447c3d6b22c1341154182d06bbcd0",
          "a198d524cead2717cad094769e78faafb25b8d11c862dc7be241ce606fb43566"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c80dac19-a4e8-4c54-93cf-6cc9b65b0c75",
        "line": "2716",
        "column": "233",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": ".addEventListener('progress',function(event){var percent=0;var position=event.loaded||event.position",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "a4229b036e251cc65f26a42acd1e5e99300f9ec5e1512bf093ba320430f5281a",
        "deprecatedHashes": [
          "403f2d5fb7df80ed4b23749d4bedba8364b6621d76becf8da1e41de7e0ef2a4a",
          "5f3b9af2bf1967eeede2051a78b8a25e9338ebc149bf1e9bf0cbfb0f733df8a0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "75893a32-7ffd-4709-aead-5cea1b72c412",
        "line": "4504",
        "column": "3",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": ".addEventListener(type,fn,false);else if(obj.attachEvent){var key=type+fn.__tauid;obj[\"e\"+key]=fn;ob",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "65e4f6c0f79ec5d0b607af6a2e23f57c964c8b851258bd498b535c8b8998bdfb",
        "deprecatedHashes": [
          "e45fd44c88ce28f7cb99eaa399d1c46aaaae669daa4ea2bf88f0b1c5f3146cb1",
          "7547939eabf61cb32bd3d59d74b1bf01e8a951c843778ab35a33cfb3076903eb"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "85c30e2c-c3af-43ad-bc2f-e3002b01cd43",
        "line": "5685",
        "column": "132",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": ".addEventListener(toBind[--i],handler,false);}}else{this.onmousewheel=handler;}",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "8e78ae28a2d4b40119b763a226a267831bac9f8896335544675314e00f3ec227",
        "deprecatedHashes": [
          "c6f4b25e520b99cd80118d4aeb53b342f8bc0773e90f2e49ee0035600c5ec4ae",
          "cbc83fde046fdf380f1bfb2808edba5555f2b5d07b8829782964f46d19247105"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4cf78e93-0fac-4e1f-9c31-4d236d4e6907",
        "line": "5722",
        "column": "2961",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": ".addEventListener(\"DOMMouseScroll\",C,{capture:!1,passive:!1}),this.addEventListener(\"mousewheel\",C,{",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "55115d48988d046e02a3d9df9e6bf74b04ae99a629a196b064ac5dcbd20159e5",
        "deprecatedHashes": [
          "4c792e7192d0bffcf1f2a9f26fec719122d6374eb724df946a01a2a88f2def9d",
          "5d98a91b17bd57cf0e884aa96fc6eff7468c4b37d0085e2f2b0ce84138fd021b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7abaa067-81ba-4ed7-9e88-f5d978d5534b",
        "line": "5823",
        "column": "9004",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": ".addEventListener(\"click\",d));return o}},removedfile:function(a){var b;return a.previewElement\u0026\u0026null",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "25d1856452263d9bd8fc495dba8242d7e7a36b708b0f9da79c8e7665a7977dd7",
        "deprecatedHashes": [
          "97b1343292af3279590158fc600377f26b11e3aecf687be25585d02281271a87",
          "b10a655e1a8b2f0f8d60becafb802890d92fb9ef87a18f6a548088bbb51459f0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6a1083d6-4e0e-4a80-a11c-acabd1393aeb",
        "line": "6675",
        "column": "746",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": ".addEventListener(eventType,method);}else if(node.attachEvent){node.attachEvent('on'+eventType,metho",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "49b5caa4e4a4840bf0847c6ed42b042c58713cb027af782687cd6acc2fc60bc4",
        "deprecatedHashes": [
          "3b33fb4952a85e0076e34768cfc379d6c36b93c14238e107ae6aad2c74cddb81",
          "957b8539420d94fa676fa394cc236b774b8f7d772ee4cad4737dd52492d5f9dd"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "16247a1d-7af7-46d6-a941-820816e13c48",
        "line": "6905",
        "column": "131",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": ".addEventListener(toBind[--i],handler,false);}}else{this.onmousewheel=handler;}",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "fa961a16103b8595150b4bab32ca8946c2b5bae6781543a4a53a5675dc954962",
        "deprecatedHashes": [
          "53a316a92bb13822b712902400da0bad5bf17cb8119fe65d9b394d683b8cc4af",
          "2357c4a6675c2d24b4f1d75d176369270edf8a1d94b8213e8cae0f7d6cd3b8ca"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7b114374-7dcd-4e87-b228-dbace9284553",
        "line": "4232",
        "column": "275",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\libraries.js",
        "code": "debugger\":C,\"var\":kw(\"var\"),\"const\":kw(\"var\"),\"let\":kw(\"var\"),\"function\":kw(\"function\"),\"catch\":kw(\"",
        "details": "(1/1) * Possible vulnerability detected: Debugger statements should not be used\nThe debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to attacks in production. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-15",
        "vulnHash": "13d49d48ffe930c04be450c9afdba423c6c37e7f0039d7d4330dff9e7b855e78",
        "deprecatedHashes": [
          "96ec95ec1a7237af24847aeed7217f1a7b5a515ec2303f0dd83129c7483a3efe",
          "80b6974b449c30faf159046712a7b23782b82d1a601d638ff138a75859c704a7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a2d025f6-574a-4710-a0e8-b20e4b09a043",
        "line": "880",
        "column": "24",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\libraries.js",
        "code": "else if(!consoleExists){alert(message);}",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "46ccf3313c41a8420b7ef93487c1d4437b43b532948ec54871464f489471c41a",
        "deprecatedHashes": [
          "bb87fce229fbe7284da3f812d9d5857276b9da01385547d6f6bafa1552ea830f",
          "4939d5b06f2fda49ab380d75f7a834f990119c5df64ff9b0de7b2866cd720704"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4bd91c37-9c25-4565-ac46-55118d51a277",
        "line": "1049",
        "column": "41",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\libraries.js",
        "code": "if(!data)$this.data('bs.alert',(data=new Alert(this)))",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "ac27b223bb15fa3c405fe5d118a6743bf384227bb848a6fd03616f15dec52989",
        "deprecatedHashes": [
          "b7f67bad70966324052809a7e782e6b6af6fbadbce9864d052d7aed694105be2",
          "15497124f37cf1461c5cce24fc9cec4bf28c457b9bb26cc1f29690161d4f60d4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f3fa7b6b-7bf4-4fd6-9c05-d0638ac11d10",
        "line": "5823",
        "column": "8678",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\libraries.js",
        "code": "confirm(b.options.dictCancelUploadConfirmation,function(){return b.removeFile(a)}):b.options.dictRem",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "ed0fd894ffeb063570ad190fc58ce3c771e473743a9898f5b325017c2d92c288",
        "deprecatedHashes": [
          "fbbac7d7a134ba4f274b4701fe16c7219514ed9e016934c561f012033b30fa45",
          "7868a5d888d6f8d6c495ca5e487c957a29e1f480df14681a6120b7770712e7b3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6acf1da1-b171-4cd9-926f-6dd50f1b1cb5",
        "line": "150",
        "column": "57",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "Math.random()).replace(/\\D/g,\"\"),isReady:true,error:function(msg){throw new Error(msg);},noop:functi",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "d3afb8673f5f75ec479f393127ee541c1581d3e4125a6776a903127f9b6b0e3c",
        "deprecatedHashes": [
          "4bd1665e2513a5227faee93ad69f8f1d69d1abecd823168c8e4635d8fa3ce2be",
          "131b651a6de2169920f84f9f1e80de66fe1e5823073442c149a353ad02e0fdcc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "faea6ea1-3063-4b80-a074-b0b63ff3375f",
        "line": "292",
        "column": "392",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "Math.random()||0.1),len=elems.length;if(outermost){outermostContext=context===document||context||out",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "d8672b7ba71b349e89ff2669f6a266b56b8b3ac18ed08a0594934f1d56ba6946",
        "deprecatedHashes": [
          "62c878ae9b5030d0d711f10b49f086a8bc550c3a52d0294906c3c4516042e227",
          "c30169ac170eb161eea06a1701fdb832bfdb0992ccac1a3233059d71cd7223f2"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6501972c-a73a-4278-ab83-f904db9434b8",
        "line": "908",
        "column": "50",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "Math.random()).replace(/\\D/g,'');if(typeof History.idToState[id]==='undefined'\u0026\u0026typeof History.store",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "f948b8bfc1ff8f850e76b019aea74ce09b6eb9cae237960fce9ff172e098a382",
        "deprecatedHashes": [
          "6fefb3d214bed68622de66f194712b3714c70177f5bbc6a4f6c5639877dd9d57",
          "4a1677f8aa0cce241a8a087579933a891a4b6ae62dad6b970c565cddd595ddd4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f2cb7fc3-ed6c-4dec-855a-40bd2fd1f8db",
        "line": "1587",
        "column": "56",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "Tooltip.prototype.getUID=function(prefix){do prefix+=~~(Math.random()*1000000)",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "bbb0f146a309fbd9faafaa20423dcbfc195c727d352def07ef827043ce474156",
        "deprecatedHashes": [
          "508b19733ffab370a6a509b6f69809227b8af6d7116b54ee1a06e891b3a9cc01",
          "ffa196e34319300b830472b3066802fd7f4246ef755c253ff24f20b8aee4edb1"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fe6a1ab1-9a10-46e3-b87f-5678b623430c",
        "line": "2938",
        "column": "138",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "Math.random().toString(16)+\"000000000\").substr(2,8)+(new Date().getTime());};function Controller(app",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "844aaa1440f7da2e8461cf23f9f82b644a974cee261512888642adff391d940e",
        "deprecatedHashes": [
          "940f637b77699f83b8606495943b1ce289d9167a29a2d9c0ad83993a306aca50",
          "683cbccecf0ea901022bc47b343ba4694cdc44bf2aa1c2af3b5fad373114961c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1d3e4000-54ae-4857-a4f6-4ef05ec4541a",
        "line": "4507",
        "column": "116",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "Math.random()*16|0,v=c=='x'?r:(r\u00260x3|0x8);return v.toString(16);}));};root.Mottle=function(params){p",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "7673992d8f00d4e0cb5cbc4d0b2e2aec563e317a4a92e8b2a83270c654fc0857",
        "deprecatedHashes": [
          "c912aa329e93ece7b2ccede91bd8fa548f6997dfbdf2508eb55d42daa71c4c80",
          "e15d33d0459d982712f27ff8e3cce054452d1bde5606de8192c3bebd427c6521"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "eb9a284f-3c5b-4c16-9179-9abab56ead49",
        "line": "4569",
        "column": "313",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "Math.random()*16|0,v=c==='x'?r:(r\u00260x3|0x8);return v.toString(16);}));};var _rankSort=function(a,b){r",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "dc91dd770d23cf1bcb739d9fc49461ee0ba846f99f39e5c59c8c3dfe5edf88a4",
        "deprecatedHashes": [
          "8db2dcc28db8e8b97a86b231bca4c56ad1be6c6feb877d876ec546aaf84d57d3",
          "df014b0c434935b47f2d4ad3ca5ea709e09ee0a717c6816e07b91b745044cacd"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ee7ec371-bcd9-4d96-94d8-ce0855498168",
        "line": "4645",
        "column": "122",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "Math.random()*16|0,v=c==='x'?r:(r\u00260x3|0x8);return v.toString(16);}));}",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "53cbd7650b763c0de3e6bb382ebcf4b7eb4ceacfdf14c215b096810b4522b2b6",
        "deprecatedHashes": [
          "0f8c1905c709fa3d9fd3b070d5d83dd2c23533646afb2bd0e8d9cf2159b17a12",
          "703eb2cbf48cf33a06fb1e077ed2105e68947a91fdbf6f6a931d9162deb72807"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5aec1be7-bd62-42bb-87a9-dd619d952cc2",
        "line": "5710",
        "column": "4802",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "Math.random()*(e+1)),n=t[i];t[i]=t[e],t[e]=n}return t}(t):(\"function\"==typeof i.by?t.sort(function(t",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "f10fe3f124793c9b469dbc53b9642cf68e96a2cddc36e82e1c12c8c06eacba02",
        "deprecatedHashes": [
          "6aebc6fd063ed771794be75493ce8c93cd17513ef8dfe126e1e4321928e394d8",
          "0690d22aa5f94623000256f2102e964a154e7b0e6fbe6b110036fe7883eaf293"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b04ab977-0ed5-4541-8d30-175e0721db41",
        "line": "5761",
        "column": "51",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "Math.random()*10)+1),isFunction=function(value){return(value\u0026\u0026(value).constructor===Function);},isSt",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "562b1ee521c38f7dd3e764b4b6e8abbfab590f0b8c99e93b340180768dc77c2e",
        "deprecatedHashes": [
          "a5d61e88590c3d72883b355a490f53b7be6e4d34354aab961235933285ac675a",
          "9aa16e3c2e6e7ab02c6607da08c4c1ef3af1ceb577045c8cf8ec622eecb57030"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "45a78ad7-84a6-447d-af0b-dd8fddec4932",
        "line": "5842",
        "column": "1234",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "Math.random()*1000)+'multiselect');this.$container.attr('id','ms-'+ms.attr('id'));this.$container.ad",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "2eec98197eb31f6fb373032e84f3bea86a9237c552140be9f00ea225dc4636a1",
        "deprecatedHashes": [
          "6942111cb171bbbe35c88bafa2558c90e1b4fe796c0c0a41be603716abae5254",
          "f0a5814a1761b7c13830e30333de592e237ec4d01b5131d7c7d35d5271f0922a"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d78ea481-2cad-4657-8e2d-c3307a2e79bf",
        "line": "324",
        "column": "228",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "Query(selector).filter(function(){for(i=0;i\u003clen;i++){if(jQuery.contains(self[i],this)){return true;}",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "cc7a2baf90acc3677bd26a86a5352c99fa676051b1b5f923b837e8f3a2cf2478",
        "deprecatedHashes": [
          "59cb4ef2e7eb4dd0aeab77caf8cf3aef4591c247f8a9339051df46bf6bec7a50",
          "50661e6e918448e7fc4a1d63e0bf9804d9ce2b51270639068749048b30e141de"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "82d18e8e-0b4d-4ec2-b107-ab50e5114679",
        "line": "326",
        "column": "304",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "Query(selector):selector||[],false).length;}});var rootjQuery,rquickExpr=/^(?:\\s*(\u003c[\\w\\W]+\u003e)[^\u003e]*|#(",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "ceb22b2bb3f79e45c59e2759dbcfb2ae0ac34a8cdf8eb005cb186976e0212e28",
        "deprecatedHashes": [
          "be6549850ca73d1095e08bfaadc78de70be107c4b9a1030ca583dd266f1d3666",
          "7344ad35079093230243c429f82855159923e30c278363006e46eb46b5a72660"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "12ca5db9-9bc5-4858-b06e-de78f05a6fc9",
        "line": "331",
        "column": "78",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "Query(document);var rparentsprev=/^(?:parents|prev(?:Until|All))/,guaranteedUnique={children:true,co",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "e138e47c1047b5dc32cda0f5b7fffc4f7a22868c080919aaf10629ae6900a0d5",
        "deprecatedHashes": [
          "710fe63997bea806507a8e06587e35046eb5cf551fe80df798606f8e2606d4e1",
          "d4e081f246a704c6f84f3ede19efa37822252b42a902843656c3a8855193b535"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ad00b5c4-9fd8-4ad3-98a7-7cb262665c75",
        "line": "516",
        "column": "509",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "Query(selector),last=insert.length-1,i=0;for(;i\u003c=last;i++){elems=i===last?this:this.clone(true);jQue",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "999d1ac006173a3b2d86f7f2c3018e53922a4f79d0d3647090d7dfe6f94b8321",
        "deprecatedHashes": [
          "99a1fb9b60f784c814ab84cffd96794b3c386975dedf1d851223a57ab3103cd0",
          "ae000812f80cd93ead955729b6742a7ae0adbb2a4142ff0a98807ce31dd413e9"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "4c677c56-eb80-4992-ad7c-21ace53e4343",
        "line": "5482",
        "column": "1542",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "Query();this.dropdown.isEmpty\u0026\u0026query.length\u003e=this.minLength?this.dropdown.update(query):this.dropdow",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "e822c0d03fe63e4e20205692f129470293518a1864f938aeb8a8dab85b465ce2",
        "deprecatedHashes": [
          "5660188d4f6366d6546bbf1ebde87881bc03fd2e95b480fad5cc0317a60640a9",
          "77261ba6836965b5db56198b1e1bbc8195fe05ddb5096f3f20deac6a2f9ae3aa"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b7236a1e-e247-488b-8dbb-3fe43a194b76",
        "line": "5",
        "column": "514705",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": ".postMessage(\"\",\"*\"),t.onmessage=n,e}}()?(a=\"setImmediate$\"+Math.random()+\"$\",s=function(e){e.source",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "cd228f04fe5550aa4cb339b6fcc84013814057ed9425685e35df387cd2b75aa9",
        "deprecatedHashes": [
          "7316f11e0d99c7e6f17abf0d05a19a70d1cac09f001e84a917964af8f6f79322",
          "a5814b7981c595958feb6397fd2b688b49d075fcfd5e74e3f9a2798234b28313"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "477fe89e-3363-4133-8185-67137dfcfe11",
        "line": "5",
        "column": "31958",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": ".addEventListener(e[i],n,r)})},o=0;o\u003ce.length;++o)i(o)},v=function(t,e,n,r){e=e.split(/\\s+/),t=t ins",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "95c665ead3c02ba2fa23c257a044f2633aeb807dc37133527423b09953b6fd7c",
        "deprecatedHashes": [
          "99f42e2be9f4da1fb5e188a60c4e53f45f3efa45c39fc44b0ac0d0f1bdd84f18",
          "6f38fa423d89c9e1c86dd464d27a4ad247b87bbdd61f070b488e768c7acd53f0"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6042d2db-fea1-4160-b1e7-cc41aa05d84d",
        "line": "8",
        "column": "1082747",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": ".addEventListener(\"message\",e,!1):t.attachEvent(\"onmessage\",e),s=function(e){t.postMessage(n+e,\"*\")}",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "33a16766d8d8efd2a85fe0da78e79f8353dab3802058cfdba06d2e4ea7debd8c",
        "deprecatedHashes": [
          "5073bddf27e5340bde023c0130fb97e6c1196cd872a5e624efcf1dbed275a572",
          "c1f4c812b8de3afda2fc825cf770f48df390691dadefb631ea69bcfe57031694"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f9e29f52-5e1e-442e-885d-ed719d075f71",
        "line": "41",
        "column": "103390",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": ".addEventListener(e,function r(o){i.once\u0026\u0026t.removeEventListener(e,r),n(o)})}}Object.defineProperty(u",
        "details": "(1/1) * Possible vulnerability detected: Origins should be verified during cross-origin communications\nBrowsers allow message exchanges between Window objects of different origins. Because any window can send / receive messages from other window it is important to verify the sender's / receiver's identity: When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (*) should not be used).\nWhen receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. For more information checkout the OWASP A2:2017 (https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication) and (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-11",
        "vulnHash": "25d2fc5bd2778d28b547d7091585bb2aad737bab0ad5790c586c1a0a2272e699",
        "deprecatedHashes": [
          "b0621b7993c03a4d43658c3fa5d3212e05891d79f4e0b5e14b0382068742021e",
          "11ffc04acdc87a3e06adaf9c976ce2b91fd3d0762d14fff2096e0821c2af3a0c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "03e27527-0aab-455b-beca-64411078498c",
        "line": "5",
        "column": "527128",
        "confidence": "HIGH",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "debugger:t(\"debugger\"),var:t(\"var\"),const:t(\"var\"),let:t(\"var\"),function:t(\"function\"),catch:t(\"catc",
        "details": "(1/1) * Possible vulnerability detected: Debugger statements should not be used\nThe debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to attacks in production. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-15",
        "vulnHash": "fdefeb00d4677c7498ce20e33e5c81556dca5af646e495748cb92ae6e02bae13",
        "deprecatedHashes": [
          "9698d1054f5daf48fdbf15853487d0b03d77093d3cef0dbdd5e2aa6982699615",
          "c108215716ebc829cc6d34981e1a6b7d96d43ec2822125d3a1d6ad6a25519d39"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c4f8c390-89f4-4f36-b7a7-8d1ace1b245e",
        "line": "5",
        "column": "527140",
        "confidence": "HIGH",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "debugger\"),var:t(\"var\"),const:t(\"var\"),let:t(\"var\"),function:t(\"function\"),catch:t(\"catch\"),for:t(\"f",
        "details": "(1/1) * Possible vulnerability detected: Debugger statements should not be used\nThe debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to attacks in production. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-15",
        "vulnHash": "632eb46ae8b65e3a5b42ef73ec3aac23f75b832ffab1e0eda10d138a176b4421",
        "deprecatedHashes": [
          "3b242f5122770f29e0a1158173674d3c1031fcd66dc31e8875b0acd908bbf9a0",
          "f0174ebdf2a6f49869688dd629ca2822e3f3ed4f265db39eac8d8025ba9063ec"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "db7cad6a-7db3-4dda-97ff-2259d7ef3ed3",
        "line": "5",
        "column": "532885",
        "confidence": "HIGH",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "debugger\"==t?T(V(\";\")):\"{\"==t?T(I(\"}\"),N,ct,F,R):\";\"==t?T():\"if\"==t?(\"else\"==S.state.lexical.info\u0026\u0026S",
        "details": "(1/1) * Possible vulnerability detected: Debugger statements should not be used\nThe debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to attacks in production. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-15",
        "vulnHash": "1ae7432f2f284c3c6a3a9d59d538bce92d0a9396ff21e4348c90f985157da876",
        "deprecatedHashes": [
          "ec7f61ae9fafb8827634735b77d1644bcfdc97bbd4acc86133d157795ee1a469",
          "dbf1b227f75f2d3abbe55e659616f5a6519da28427e7508002b66c16a64d6148"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "40075df7-301d-40f3-8773-9aa2f2f8d5f4",
        "line": "14",
        "column": "197163",
        "confidence": "HIGH",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "confirm(a)\u0026\u0026e.runCommand(\"core:canvas-clear\")})}},function(e,t,n){\"use strict\";Object.defineProperty",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "52f832f440d59836d2904c13e552c191799f7bec0dca62086cebd4bf0a76f8e1",
        "deprecatedHashes": [
          "e9baced24909c4f1b1de7c9fd1396eb3853c6e4cf9ee8a74d9da866d7b273195",
          "6fa310536f2ed3dc0ae92c12e493b2673250175cb6e8ed0b11f04d27721ab9d8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8b3e7b7a-e702-466a-b43f-f6f9125b2f0f",
        "line": "43",
        "column": "419",
        "confidence": "HIGH",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "alert(\"Errors inside your template. Template will not be saved.\")}return null}static getEditorMjmlCo",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "177e0209b92216b28ac6778188ce9a6b4b2b85d4a42c900c2afdd72f2e3b952f",
        "deprecatedHashes": [
          "354aa3dba5ee230bab659fa15efc18cdbd5c95342ddb77624ae1f54963bed7e2",
          "4d3b0d50fbe2304c960efd69e155cf15f609b81869aed8fba4371ebf65200479"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2a433f89-ef76-49a0-8640-9577e2cc5de5",
        "line": "65",
        "column": "541",
        "confidence": "HIGH",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": ";confirm(Mautic.translate(\"grapesjsbuilder.deleteAssetConfirmText\"))\u0026\u0026t.collection.remove(t)}}}),(0,",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "c942636f565fd9229e04b4921e144efc115f674e728248f600becaf76d5ed0de",
        "deprecatedHashes": [
          "fe0305ee1ac1415826f86cb4a63882ca64837aa257c069e8d3ac823d698bb6c7",
          "3718c3e88c3ffb66db5ba4fc99fba817e80d526a5fd686880e4a12f4222c23b8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ba0c5453-1578-4eee-ab35-f17a89a8912d",
        "line": "70",
        "column": "2597",
        "confidence": "HIGH",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "alert(\"\".concat(Mautic.translate(\"grapesjsbuilder.sourceSyntaxError\"),\" \\n\").concat(i.message))}}},{",
        "details": "(1/1) * Possible vulnerability detected: Alert statements should not be used\nalert(...) as well as confirm(...) and prompt(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-16",
        "vulnHash": "0c71c83645c3a23ef74f3b138ebe840a32384b1e502809c9fa7a5136abc8dfa4",
        "deprecatedHashes": [
          "92e53ab1b37d6f7a2faf9530023f6a8760711fc52ade131d315e373e4cbfd829",
          "9c4e051d5a3b2e038369fd0094c5a2289045d2d5c914dfadc3a2f213643f8227"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b89936c9-1132-42b3-a57e-0f68851bca85",
        "line": "5",
        "column": "19280",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Math.random()*(e-t+1))}W.toPath=bt,W.iteratee=Et;var Rt=Date.now||function(){return(new Date).getTim",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "d0bc52090d5480570c212632ded19c7ccb084017b1700d982da4566b9de18e6a",
        "deprecatedHashes": [
          "61e325d3fceb442129f8fdc305581a2e788e8a7674b35693778be496b498f0e2",
          "3ce2359697101ab25ac7559a0d43d8ac2c3fa35b979cc1fd9bbff8802b87bf18"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "9e763674-859d-4b36-89e4-d9eebe9835b6",
        "line": "5",
        "column": "34324",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Math.random()*r));return e}},function(t,e,n){(function(r){var i,o,a;a=\"object\"==typeof self\u0026\u0026self.se",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "eaf2a50a96c8ef164a9483dc433cb6e2777ec4436c38452fe36a0bdfc7248271",
        "deprecatedHashes": [
          "1188de79219df5e51839a3390237b2dcc83d1b63c7371a424d388e0fc7d74be0",
          "c05a22dff4e619832ef72a5198c16a868516928c3540595effa8be1b43ed604d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c0c00800-cab3-48b8-92d1-0e6ba45b2ad0",
        "line": "5",
        "column": "87980",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Math.random()+1.1).toString(36).slice(-e),r=\"i\".concat(n);t[r];)r=U.getNewId(t);return r},U.getIncre",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "3fbdf0c39294fe7ef07f4d4d837986d2974182f9d0a74a25609e62aab4edd285",
        "deprecatedHashes": [
          "2e94011b306a57989de2a328cb69e70be1063a1cbff33a7c8c356ea74b10103d",
          "fa1f20f3cc095426c0d0335ae350f64780e21c4b063926f20a2f51840d81650f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "68e9cdd3-a20b-4362-8d10-b5fed9d7898a",
        "line": "5",
        "column": "514765",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Math.random()+\"$\",s=function(e){e.source===t\u0026\u0026\"string\"==typeof e.data\u0026\u00260===e.data.indexOf(a)\u0026\u0026p(+e.d",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "3686aecd92e848577c8a60eb5d9fc047cd1e73c76e24930665d45f23833cfcbb",
        "deprecatedHashes": [
          "113fbf370ca3df7aed4b6cc1083ca7e25dd35d606b27329e69365825f4d7a099",
          "818bf8e8a17aaceecf1afa6fafd24c3373da4bd170b8963fe93bda4dce540b7d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2cbdff15-d3ea-42b3-a18b-029b6c9f8a6a",
        "line": "8",
        "column": "998236",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Math.random().toString(36).replace(/^0\\.[0-9]*/,\"\"),~t.indexOf(e););return e}var J=n(\"script,style\")",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "1738c80348e54a6e0e0306dd577ec7ed0f0e40410fb183f42eda427023f32ff2",
        "deprecatedHashes": [
          "77708074672ee8fecf443dfbf5338cf771578e2d497dd7bdf3bf56158e019727",
          "0da04ddd4ff71101cf264b673afd96f89d20a280bce68f9f07be4d797ee19635"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "cdeb2544-a0a0-421f-836c-89a26b42a0e5",
        "line": "8",
        "column": "1082709",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Math.random()+\"$\";t.addEventListener?t.addEventListener(\"message\",e,!1):t.attachEvent(\"onmessage\",e)",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "3d16ae7ae0dba0ea2926851d317dd0acc2548de6ef8aacd7332c22fd634ace26",
        "deprecatedHashes": [
          "243888fada2689946fab1a9db816509ec92cf4cc41eb08da13d2b32fa3731e30",
          "a8f1cc3a106e0b3b1d011cefcda5fe42070aab74868cf31253cdbe0c79504e81"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "61aa7ba9-b5cc-49bb-b936-cd35834072ce",
        "line": "8",
        "column": "1105572",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Math.random()*(e-t))}(i,o),o);for(var s=e[o],u=i;u\u003co;u++)r(e[u],s)\u003c=0\u0026\u0026n(e,a+=1,u);n(e,a+1,u);var c=",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "7d1a4e8b7770917c6e4c7e9c899829e97b298de4130af07f9abf7290cdbf28b3",
        "deprecatedHashes": [
          "9c16ac3a51c236e4b2a0409587700d3edac304eb43b27e823badebc2ae1edbce",
          "1be26df65227dc2395997f6bc2d7b24c8ff796e0b313f096bf96a0afbcf189cd"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "37dc6498-1467-4cab-9a3a-7d3506a2e736",
        "line": "11",
        "column": "159598",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Math.random()+\"$\",r=function(r){r.source===t\u0026\u0026\"string\"==typeof r.data\u0026\u00260===r.data.indexOf(e)\u0026\u0026i(+r.d",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "4899cb7ff4a043ee279c3e826088b3e2b914d37ee49a0569774186a8c74de6eb",
        "deprecatedHashes": [
          "0649ea16ef2ff68522215b7b3e3afb987fe9fa9b90285e3faa8a214e5e1c26ef",
          "32acd2bfd7fd597e225e21473948e7bfda9fea51270cea6fe1c48be8feaa6ca6"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f5c695bd-6855-4460-8569-fee331eeb5ca",
        "line": "14",
        "column": "118598",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Math.random()+\"$\",n=function(n){n.source===e\u0026\u0026\"string\"==typeof n.data\u0026\u00260===n.data.indexOf(t)\u0026\u0026i(+n.d",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "b0c85d808e112468ddad922ad0c3bc50e82e528151d2c8a53e685625c43d7cdd",
        "deprecatedHashes": [
          "17244bdb2f6999f2c042cd1daff21d51fdc814f39bc3160727554080ac406064",
          "de0fd90fc4d5be5889ce7aa6518781a0e89a76604b535baf68717e4ac5c45b53"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ea7bca3d-cdb9-410f-bd11-9fdf7406de2b",
        "line": "14",
        "column": "190692",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Math.random()+\"$\",n=function(n){n.source===e\u0026\u0026\"string\"==typeof n.data\u0026\u00260===n.data.indexOf(t)\u0026\u0026i(+n.d",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "b0c85d808e112468ddad922ad0c3bc50e82e528151d2c8a53e685625c43d7cdd",
        "deprecatedHashes": [
          "17244bdb2f6999f2c042cd1daff21d51fdc814f39bc3160727554080ac406064",
          "de0fd90fc4d5be5889ce7aa6518781a0e89a76604b535baf68717e4ac5c45b53"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "ee2bf58b-70eb-4b2b-b0ea-221a2044a116",
        "line": "17",
        "column": "83919",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Math.random()*(e-t))}(o,i),i);for(var a=e[i],u=o;u\u003ci;u++)n(e[u],a)\u003c=0\u0026\u0026r(e,s+=1,u);r(e,s+1,u);var l=",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "89b32b9591d168166a45498c8931c39ff394a604be5a11d0879a9e3bb17186ae",
        "deprecatedHashes": [
          "448b5e3f6d3696113495ce83eae12de0cf5eb7b82a51f67f70fbac522ceb8c9c",
          "c28589f033ed6b8ef57c70b924048ab2339463f7f59768b0d1a6ef81f6437391"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2dedc28b-7a89-48f4-b035-65255f83e84c",
        "line": "41",
        "column": "997000",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Math.random().toString(36).replace(/^0\\.[0-9]*/,\"\"),~t.indexOf(e););return e}var J=n(\"script,style\")",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "ac0c29f6f9428c2be3fb83884e87c7cff07e1ce63141c53e5e91920127dc9261",
        "deprecatedHashes": [
          "51c28ac2f4311a3147aea9c4345fb9a33c0c8d1f4134fcb25c0244dce0c9d251",
          "83e7e7f9c8f1b6be4e03c3afdd152de6e94c2414a92f332852d0c52a4bb9a14e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "185f17bd-437e-434e-988e-daadfb303b63",
        "line": "41",
        "column": "1081566",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Math.random()+\"$\";t.addEventListener?t.addEventListener(\"message\",e,!1):t.attachEvent(\"onmessage\",e)",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "62801ef850cf97323e92df55e0dccb786eb51c13dfd0fe4aca2cb12957428e53",
        "deprecatedHashes": [
          "017d63d12d1d751195a085da142614dded48620b4febf6b4ae461b6841ca114a",
          "d885b3d63409ee673107768d597c5b02a621b716c88c4696c3ab032e22fe72da"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3955d5b8-5823-4b57-bf91-6f98f8453d7b",
        "line": "41",
        "column": "1104430",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Math.random()*(e-t))}(i,o),o);for(var s=e[o],u=i;u\u003co;u++)r(e[u],s)\u003c=0\u0026\u0026n(e,a+=1,u);n(e,a+1,u);var c=",
        "details": "(1/1) * Possible vulnerability detected: No use weak random number generator\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. As the Math.random() function relies on a weak pseudorandom number generator, this function should not be used for security-critical applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used instead. For more information checkout the CWE-338 (https://cwe.mitre.org/data/definitions/338.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-6",
        "vulnHash": "2345cfc18497303d516c87b74456ca115339626ccc47aa3471489f85fea06e67",
        "deprecatedHashes": [
          "a30698a6fc078f2ab072ba9afa6cab2aff2d30014a5fb0e067e59acdc7b28844",
          "d3bc1e847d5791b7eaf5c1e8e504647b6042b9e313ac5be681f983a256f7be1b"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "fb6a14ff-7a3d-47a9-acd1-2acc0d98a924",
        "line": "8",
        "column": "8785",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": ".render():void 0:void 0}function rt(t){return function t(e){var n=1\u003carguments.length\u0026\u0026void 0!==argum",
        "details": "(1/1) * Possible vulnerability detected: No render content from request\nDirectly using user-controlled objects as arguments to template engines might allow an attacker to do local file reads or even remote code execution. For more information checkout the CWE-73 (https://cwe.mitre.org/data/definitions/73.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-23",
        "vulnHash": "18fcab17f312e08ae81e35e0a085a650c779599b037cc2b22236e38d13500741",
        "deprecatedHashes": [
          "3aac958d43e406087afc7b19b4797e97a911fd0a7fb984ffd2bf6a3ae65cd5f8",
          "6939eb029c0d0f4a16e2163799f931b313188a3c7beea5fbabd54a97ee3db950"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6f2dcaf6-b862-44c0-9b7d-b04d2838e564",
        "line": "41",
        "column": "7187",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": ".render():void 0:void 0}function rt(t){return function t(e){var n=1\u003carguments.length\u0026\u0026void 0!==argum",
        "details": "(1/1) * Possible vulnerability detected: No render content from request\nDirectly using user-controlled objects as arguments to template engines might allow an attacker to do local file reads or even remote code execution. For more information checkout the CWE-73 (https://cwe.mitre.org/data/definitions/73.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-23",
        "vulnHash": "fb0f565bd8ead4a419b4252f8da32be7f59f6fd77803db973146176daa64d92e",
        "deprecatedHashes": [
          "be06722b1bfb7cfebc9415527616dfe49c4e613cc8768b1ecc1911b05cd575a3",
          "f65e452daf10f87bdbf6de52197a8c2a1f258e637735195dc9cecc9bafa268a7"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1cdd2ec0-219e-4e12-bb13-6d591e1bb921",
        "line": "23",
        "column": "1363",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Query(\"#dynamic-content-popup\");if(!t)throw new Error(\"DC: No dynamic content popup found\");const e=",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "2428f1a53013a9ea3c23d418498a8f33fd16b27f3a2f5cbf8788e6dd180bb3df",
        "deprecatedHashes": [
          "d1cbf08c5cef8d1597e9b5209b6621a8bbe8255f7d06e12e4ba1e9200ddde359",
          "ca8893f4b412253bbd6d39d895385266151dfe914eb2406e9eff1f68c0f3fc08"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "bbae01f6-bd66-4bc1-b3aa-fade1a21319d",
        "line": "45",
        "column": "1449",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "Query(n).find(`${n}_tokenName`).val()}\"}`;this.logger.debug(\"DC: Replaced component's content with i",
        "details": "(1/1) * Possible vulnerability detected: SQL Injection\nSQL queries often need to use a hardcoded SQL string with a dynamic parameter coming from a user request. Formatting a string to add those parameters to the request is a bad practice as it can result in an SQL injection. The safe way to add parameters to a SQL query is to use SQL binding mechanisms. For more information checkout the CWE-564 (https://cwe.mitre.org/data/definitions/564.html) and OWASP A1:2017 (https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "HIGH",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-53",
        "vulnHash": "069774938db8ba314d8fae34dc0772ff14bfd6ebbdec6a8d0d2c50a503141c34",
        "deprecatedHashes": [
          "420a0a3455742b1e67bfa65f5690225f4b02d569de24c05f63e54d1b2c564316",
          "c923d8c9d908853c5d0fd055eba5bb57e12496768976c4a1eed177278631d11d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d6a0ebf7-a1a1-4bc0-ac4d-e735a23f77fc",
        "line": "4017",
        "column": "",
        "confidence": "LOW",
        "file": "app\\assets\\scaffold\\files\\package-lock.json",
        "code": "postcss",
        "details": "(1/1) * Possible vulnerability detected: The package postcss versions before 7.0.36 or between 8.0.0 and 8.2.13 are vulnerable to Regular Expression Denial of Service (ReDoS) via getAnnotationURL() and loadAnnotation() in lib/previous-map.js. The vulnerable regexes are caused mainly by the sub-pattern \\/\\*\\s* sourceMappingURL=(.*).",
        "securityTool": "NpmAudit",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "1089551",
        "vulnHash": "71bdcc14124177240298fe4131bcf3b71bae2115f1a2e3e2cea5263c87909447",
        "deprecatedHashes": [
          "99a4bb0a0f3e3f71bc1ce7324f2bb06deb6c972f750c1ff0b51af79d6afbacb2",
          "d7261eca692c46220c277bdcb364d6b36dc305320a79ed8249704d73c53a3869"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "73059835-7112-48cc-a20b-1cfd44376fbd",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": ".gitpod.Dockerfile",
        "code": "':latest' tag used",
        "details": "(1/1) * Possible vulnerability detected: MissConfiguration\n      When using a 'FROM' statement you should use a specific tag to avoid uncontrolled behavior when the image is updated.\n      Message: Specify a tag in the 'FROM' statement for image 'gitpod/workspace-full'\n      Resolution: Add a tag to the image in the 'FROM' statement\n      References: [https://avd.aquasec.com/appshield/ds001]",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "",
        "vulnHash": "2d03131d94635524a5950403dc7ad51b0718e217cc79e37851e03cde632ab1fd",
        "deprecatedHashes": [
          "bd9a602942def26a619e8e577ca077355954717989299f75fd4ac715f9b3f192",
          "657ecc2317f2ee0412b7f7f900c15887d2743f298591255f8912c991302b9653"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "35614019-0423-4e73-b9b0-00ce3da11314",
        "line": "12",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\package-lock.json",
        "code": "        \"grapesjs\": \"^0.17.29\",\n\tInstalled Version: \"0.17.29\"\n\tUpdate to Version: \"0.19.5\" for fix this issue.",
        "details": "(1/1) * Possible vulnerability detected: The package grapesjs before 0.19.5 are vulnerable to Cross-site Scripting (XSS) due to an improper sanitization of the class name in Selector Manager.\nPrimaryURL: https://avd.aquasec.com/nvd/cve-2022-21802.\nCwe Links: (https://cwe.mitre.org/data/definitions/79.html)",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "CVE-2022-21802",
        "vulnHash": "dad4b5751b4b6e2a1c516b3f534ad6f074a4d5e28f7c72f1a187a0a62ba5724d",
        "deprecatedHashes": [
          "799f83b729f4aae23824c833cc800f89ef33e6bac4d9ca34f382b71d24df186b",
          "49558ab6a996e11208b118681ea324074cb9fdd1f66a5c86d30b700469015420",
          "adbbce96f8c5af62782266af492e9c16dc04ae6f7a2c3fcad8e1e3293c6cfd05",
          "bffb7f4b782119cf877fafa207578569c86a6494dc8223987b61785ff4242e95"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1e83af13-157e-4809-b02f-c1bdc71f300e",
        "line": "7175",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\package-lock.json",
        "code": "      \"resolved\": \"https://registry.npmjs.org/jszip/-/jszip-3.6.0.tgz\",\n\tInstalled Version: \"3.6.0\"\n\tUpdate to Version: \"2.7.0, 3.7.0\" for fix this issue.",
        "details": "(1/1) * Possible vulnerability detected: This affects the package jszip before 3.7.0. Crafting a new zip file with filenames set to Object prototype values (e.g __proto__, toString, etc) results in a returned object with a modified prototype instance.\nPrimaryURL: https://avd.aquasec.com/nvd/cve-2021-23413.",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "CVE-2021-23413",
        "vulnHash": "c472718c2dde6be63d2006610a2025cef3b158c1956bc912472f371b1048d44c",
        "deprecatedHashes": [
          "595497fee2ad8cf04871acdeba041d503cb1eca5ef32c729f0354dfcb238444e",
          "de9138e16bdabe43555368273b2fce35dccaa048c68a22eb93916865c2dbb078",
          "28313694b4ad8ed3306454a37025782f0d1e2282bd831dae493f1ba764b9f36c",
          "fccfdeec4e501ee2d2ce7fe992a4aa22e4c696e968c7d2074025114d9833cb6c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e42372b7-5c4c-4f20-9822-ef20a21e7eca",
        "line": "9334",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\package-lock.json",
        "code": "      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-7.0.35.tgz\",\n\tInstalled Version: \"7.0.35\"\n\tUpdate to Version: \"8.2.10, 7.0.36\" for fix this issue.",
        "details": "(1/1) * Possible vulnerability detected: The package postcss from 7.0.0 and before 8.2.10 are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\nPrimaryURL: https://avd.aquasec.com/nvd/cve-2021-23368.",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "CVE-2021-23368",
        "vulnHash": "399379731561826b0b7fad564a1a6d9c856e628b3e877649d34bb0526a4e2a32",
        "deprecatedHashes": [
          "1c200343377ede235e81857d54dc8750c260de18bcfb3582d5bb8fbc1ece7532",
          "3a2ea57acdea1385f99a3075b6900fae9973cc2fe2d259ae9fcb92e81cf5afb8",
          "1a9acfeaa1aa472b148253de44951ca785dd1ae410f714a6de66c7e99c8a83d5",
          "c006aa9f5ae3b1e3cfbfa2bb2890069c9eaecdf35b7a599afab9481e81201967"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "50e45a47-78cb-4d53-bf08-abf35233656b",
        "line": "9334",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\package-lock.json",
        "code": "      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-7.0.35.tgz\",\n\tInstalled Version: \"7.0.35\"\n\tUpdate to Version: \"7.0.36, 8.2.13\" for fix this issue.",
        "details": "(1/1) * Possible vulnerability detected: The package postcss before 8.2.13 are vulnerable to Regular Expression Denial of Service (ReDoS) via getAnnotationURL() and loadAnnotation() in lib/previous-map.js. The vulnerable regexes are caused mainly by the sub-pattern \\/\\*\\s* sourceMappingURL=(.*).\nPrimaryURL: https://avd.aquasec.com/nvd/cve-2021-23382.",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "CVE-2021-23382",
        "vulnHash": "e71824b0242757cce136fba6f9712aab01175f93c476017f7c9f20caa2329029",
        "deprecatedHashes": [
          "6db818b070098661369404809e8f51b442f69a652ea5c70f8e8be31fde2a80dd",
          "905a98ceedf8433b9c2bcab1f93a669cc5d45b21d6eeb8809ff6ab845e2c6556",
          "1aabf0780f30e7c47bca91cec7c72e75a37e6451722c886c7a7b60268203a23a",
          "8def1891e33277e3a1a71f1e5e7f8e9aa565ef7c1bdebe87f334997143d34882"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "8146d1d6-2906-4497-863a-323f7711a262",
        "line": "10424",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\package-lock.json",
        "code": "      \"resolved\": \"https://registry.npmjs.org/request/-/request-2.88.2.tgz\",\n",
        "details": "(1/1) * Possible vulnerability detected: ** UNSUPPORTED WHEN ASSIGNED ** The Request package through 2.88.1 for Node.js allows a bypass of SSRF mitigations via an attacker-controller server that does a cross-protocol redirect (HTTP to HTTPS, or HTTPS to HTTP). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.\nPrimaryURL: https://avd.aquasec.com/nvd/cve-2023-28155.\nCwe Links: (https://cwe.mitre.org/data/definitions/918.html)",
        "securityTool": "Trivy",
        "language": "Generic",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "CVE-2023-28155",
        "vulnHash": "c4f8e0d5a4bf8f388e8357e5014a100f535520217122a0e4c03c5b46db00fd9c",
        "deprecatedHashes": [
          "38bc8b40181caf54983b1b73fe2d8b4a385f1a97c98aecf661175b145fc10fa1",
          "7d8cc67920037c947ae3e8dccfed5c92488a4d4e0019dc38004d2a22c8dbb6f4",
          "07b01ecd117ffd09ed2e0716f342d11167d1c1fe3206f511a447dcad7ac3043a",
          "1eb2b3217a6a4111c34120fb9a131c41338a06207098853bcf975a91bba3c232"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "aa6e8ef9-b68d-459d-8672-bec2f2b5d9da",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\froala\\plugins\\line_breaker.min.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "623afda029c4b4be4914b7d5d3aecafcd630bed200534f2f390274e8e660093f",
        "deprecatedHashes": [
          "a4314feed32e4da73635b7fc0728c30a5a2ff273cac788c73b45cb08f645ab4c",
          "9ad5db1047b8c36cc180cca3de3090686e23b24544ecc7a6599942c4c575a5dd"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "bd4bddb5-2b50-4bf2-b476-9cf19aa10b45",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\froala\\plugins\\table.min.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "f1b2361c72a1a008244d72a62a4ee9d6fd89c358aa3cff97b1b8fbd2d670e5cf",
        "deprecatedHashes": [
          "ebf8a33f753b2b8eed63e27bb61ee845d70fb3e95897fd52cf7eeb32619d6447",
          "4c6da8b07e0b9dd035257226ae6f5c5710b60323be46bc43a8236e6d8c32d063"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a06fd17e-717a-4f89-9f6b-064063591d5a",
        "line": "1",
        "column": "9",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\extras\\editors.default.min.js",
        "code": "(e,t){if(\"function\"==typeof define\u0026\u0026define.amd)define([\"elfinder\"],e);else if(t){var i=t.prototype._",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "c5f24a1cae897af1c8042a981e220e20f68e5aa5ac69134c91acfec6f38556b1",
        "deprecatedHashes": [
          "2acc5985f68ab7e70b7b8960ffee19e3771b96c76094b0fd1bda2d7299b35e92",
          "020552fe85598cec2955ae3986adffaedf555a4a397db364e856c6beb40c1362"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "1adc19cd-bfe0-44dc-8121-babed28ed7d8",
        "line": "1",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\9b.dropzone.js",
        "code": "(function(){var a,b,c,d,e,f,g,h,i=[].slice,j={}.hasOwnProperty,k=function(a,b){function c(){this.con",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "7dc5076007505905f45e112d9812008ec4afea2615276b0df677ebe5b5114189",
        "deprecatedHashes": [
          "34c72af139629337e590f43a491969bb1223ba4ebffd830441c362ec04d22874",
          "307480c6544aca04d15ce26b90603691be1c7edc40765af76170b316a3cd7de4"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d34b3e4e-2db3-42a2-9ade-1fbee75f81d4",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\froala\\plugins\\link.min.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "a27a4c7067e6e498e599159ff1d175c5afcaec4d59dd170e1f78acfb79fc68f8",
        "deprecatedHashes": [
          "ab09360c3926e631abeeec32e8fdd44ecd74e354f75e4ac4ea380714de644717",
          "876663d412e8ac013b83f7173d2c82d09cd3c81a311c4958538b77f263e6d2ea"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "65a198f4-da41-4d2d-a156-40912980d75e",
        "line": "7",
        "column": "9",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\froala\\plugins\\image.min.js",
        "code": "(a){\"function\"==typeof define\u0026\u0026define.amd?define([\"jquery\"],a):\"object\"==typeof module\u0026\u0026module.expor",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "b7cfd2f3580cf96b9281681f598e4e7e6062600346d3f2ea15df9a05206b9ab2",
        "deprecatedHashes": [
          "cecc26e258c4596f16cc7ea32767bb0a555df10f19efabc67dc6434e0d900b9d",
          "34df52a7311372fab79d2468819fb35391a6019718bdca867c8bca16aa0a5d4f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e0780151-caad-4eee-9f1f-1ef783823002",
        "line": "45",
        "column": "14",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\52.jvectormap.js",
        "code": "/*! Copyright (c) 2013 Brandon Aaron (http://brandon.aaron.sh)",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "419f20be5e2041770c91fed46526736c2ca396dcc2bdf03df09ca1405e40f6ee",
        "deprecatedHashes": [
          "4f199c5dfa5d0f5a915aab00f1b2609abaa3ee577b654978a37f4b3156b42596",
          "0ecd8dd5012ecba078bef2622db8b96c40576010ccdf2851172b5dfce7553563"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "c34cf1fe-7d2a-4be2-b8b6-9a1b9c2fec69",
        "line": "20",
        "column": "120",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "(),e(x).appendTo(\"body\").ready(function(){setTimeout(function(){e(x).each(function(){e(\"#\"+e(this).a",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "65c0f562c59e0064b0cd16bbbf4d0586625c38d28f8d85643969075c3d97f3d1",
        "deprecatedHashes": [
          "374c8567cf10fab040dc180e2fd178f0f0839a815d43587ecc29a1fc2d931cc4",
          "80e5e2aef3ba06daf4335dbdded390b6bff5546d62e2808697163b8e26c5c8fb"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "e1be8b78-9c14-471b-87fc-9ad55785d7f6",
        "line": "23",
        "column": "10",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.min.js",
        "code": "(\"changesize\"),r.remove(),t.hideinfo(),a.fadeIn(100)})},function(){r.remove(),a.remove()}),i.restore",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "c80ed8ef1f554e8fdd647a4e0ba1df4e0ae51529ad67badf4f6687871c954e35",
        "deprecatedHashes": [
          "b3bea07fc7738db1ec2505c3c266b395bdc42764670f21d2ee2be4d182f7f7de",
          "6be921b67252a769efbac9962967aa6b77ff1238e8aae91e289b8cbf15939cfc"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d0521c2b-9c2e-4f5a-9562-9a0f25e81fa9",
        "line": "0",
        "column": "0",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\froala\\plugins\\emoticons.min.js",
        "code": "",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "d42089e2cf20ff254ec629e86bbc96721b6ef0c4ef481e145b705eac07184d58",
        "deprecatedHashes": [
          "9a00dd02acaa70086eb2524f6db91ec2e55d719a9f1f8c4fecf289be9aac463f",
          "05c1f312fd03f6097ff1f84d3e81d3c7d5c896dba7b4168fa165b4d212db4440"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3b64baa6-4fc6-4704-85e2-e02bfd868e56",
        "line": "454",
        "column": "22",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\app.js",
        "code": "({fill:endpoint.connectorStyle.stroke});var dot=mQuery(endpoint.canvas);dot.addClass('jtk-clickable_",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "b01a7e274b7f8ccd407b5f8071a1c2c7405334a1dc7230a4811f22148b244152",
        "deprecatedHashes": [
          "e60eb8041a6cfad71d96da5792213b348cc9a7a96e1c2831ebcb03b927d7165b",
          "854d80cce55e00a6c00262767e800b8f6d94446a8904edb13bfeaef1216d859e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "a6c805e9-16eb-45cc-b3e5-a7aa47caba6d",
        "line": "498",
        "column": "22",
        "confidence": "MEDIUM",
        "file": "media\\js\\app.js",
        "code": "({fill:endpoint.connectorStyle.stroke});var dot=mQuery(endpoint.canvas);dot.addClass('jtk-clickable_",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "440c5b081aa7478708a7220282db18a9860aa554ac326edc067f1d4e76d5ba70",
        "deprecatedHashes": [
          "795b71559cac80e8d718f6721f43adce542d41e51f63011826f83214458a82c2",
          "b4243d902b26aba2cd33509b539a026964dacfdbb8c927e1d06463f7b929408e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "d28fa2d1-03ea-4114-a02f-62e1878c4080",
        "line": "14856",
        "column": "32",
        "confidence": "MEDIUM",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\51.Chart.js",
        "code": "t is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#s",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "cfe37ee6e095cc7ec1ba24862585edd85b032f0c3579584fbbb1cda30082ec99",
        "deprecatedHashes": [
          "07815a75ed2004e1ee70632bd4464c2aca2f2acb6fe0bd6c64bb91bf769292f8",
          "50934b5b9a323d31901b7c73dddb50f3d19edf423637536042f7a5a199983609"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "5fccec80-32ab-455d-b2c0-88db4a77832a",
        "line": "5825",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "(document).on('mousedown.minicolors touchstart.minicolors',function(event){if(!$(event.target).paren",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "172970fca509c5a55380311ac8cd8f59714de7ba3512878d6ef2b23f71982e0e",
        "deprecatedHashes": [
          "50e744474c31d5e71d15dbeed1cd5d2d6a81901000038ba9394b8c0b9ef0d518",
          "c6546ff202a8c91a36416b646027b1092ce1c90d368695978da768c693d12ffb"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "09891ce5-f928-4638-83d7-6b991518a4dc",
        "line": "6896",
        "column": "2",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "(typeof me.options.time.format!=='string'\u0026\u0026me.options.time.format.call){console.warn('options.time.f",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "26c610aebf331f5b43599d42bb4187865f92564b16c86bfe5e56037ee201013c",
        "deprecatedHashes": [
          "4a6a06bd5005e8c032e29e4fd511fbbee28ed994758001cc75d2286fcb1ae8e5",
          "ff47a651bfe23b073df23b9a5b270b74c2ca7b0414d668a130a36a1f657ee319"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "6dc97733-4d8a-4bae-8158-641239a52da2",
        "line": "6899",
        "column": "14",
        "confidence": "MEDIUM",
        "file": "media\\js\\libraries.js",
        "code": "/*! Copyright (c) 2013 Brandon Aaron (http://brandon.aaron.sh)",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "cb49bdf8f98b54f455bf6bedc272f99e8ee497cf66b2da367d1030516c8cd7b3",
        "deprecatedHashes": [
          "90aa4049a01e70bdf69ccf3c8949a6b0f1de68ee90895bf269a6ff5ae565b8ea",
          "8b2df93d7c816f4759cd00c69e3fcf36628ff00e2bdad1c21d9c925345941a0f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7062d263-5fb2-4349-8f16-3111fcc69143",
        "line": "5823",
        "column": "1",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "(document).on('mousedown.minicolors touchstart.minicolors',function(event){if(!$(event.target).paren",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "9aee772fd10d3997e133740627f7252a9596d9865e15a80011aa7c736f2a1980",
        "deprecatedHashes": [
          "3b6d779845c4f4b655d11a6fc28f7da064a77ec78fc231dd50112b6d0508f001",
          "97895b4d95b05dc90b7b3f2b22fee2ae60a86a2e28869aed57681a49db75a41f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "b43998f0-9d20-405d-8139-45472b8dc661",
        "line": "6894",
        "column": "2",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "(typeof me.options.time.format!=='string'\u0026\u0026me.options.time.format.call){console.warn('options.time.f",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "f807489faf30a829f3c35db67a6e7bd20399931d4a787a79f868c47c9533a5f6",
        "deprecatedHashes": [
          "99838c77050a9b9d182a2fcfbd9a0f75cf347420c3947cd56efdce1cbf434890",
          "8a82c395d32834faa45559223f352e345417246d89a1a6dd05e475768d979a80"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f1a311a7-708d-4ad8-9e3c-9205af6c29ae",
        "line": "6897",
        "column": "14",
        "confidence": "MEDIUM",
        "file": "app\\assets\\js\\libraries.js",
        "code": "/*! Copyright (c) 2013 Brandon Aaron (http://brandon.aaron.sh)",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "e1c222298b6107d5c99a175043afc1d26656532ce749f82de835eb9e55e3bece",
        "deprecatedHashes": [
          "c513b5c198434d0627200ec2151a443022348a9bbf7ef3f600fb2f81968eaffc",
          "e245ba267099a3cf70b15a4923c404337794ec5cc037a48075756a44d43bbbb3"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "efc05f1d-c55f-441e-a0ff-422a8f424051",
        "line": "8",
        "column": "397325",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": ".readFileSync(o,\"utf8\")}catch(a){return e={line:r,file:e,absoluteFilePath:g.default.resolve(R,k),par",
        "details": "(1/1) * Possible vulnerability detected: No read file using data from request\nUser data passed untreated to the 'createReadStream' function can cause a Directory Traversal attack. This attack exploits the lack of security, with the attacker gaining unauthorized access to the file system. For more information checkout the CWE-35 (https://cwe.mitre.org/data/definitions/35.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-7",
        "vulnHash": "9f6461301805857941616cf7cffe42c502b285f748ce7e7822a409027f0c4051",
        "deprecatedHashes": [
          "3efe378357692315515926e0430171367217f277e2dc0be5294839d5f802c1ef",
          "234e6ef93a816a1dc0d738eadb82890fd7e503a7d1f82af9b1dda3a323417d49"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "bb7a044e-29bd-4868-bd0c-2e2f5f9f8172",
        "line": "41",
        "column": "396050",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": ".readFileSync(i,\"utf8\")}catch(e){return i={line:n,file:t,absoluteFilePath:g.default.resolve(R,k),par",
        "details": "(1/1) * Possible vulnerability detected: No read file using data from request\nUser data passed untreated to the 'createReadStream' function can cause a Directory Traversal attack. This attack exploits the lack of security, with the attacker gaining unauthorized access to the file system. For more information checkout the CWE-35 (https://cwe.mitre.org/data/definitions/35.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-7",
        "vulnHash": "56d0597e1c9118474851660b2e0ed88fd3cf5ad54e3dd0ecc090958ba2ba8dd7",
        "deprecatedHashes": [
          "7a30711d0c84e55a18428a391428e7de04b8913a0bc51d3e8d90414b7aec5928",
          "24c8b8dc928068b70f3506641ca8d65557a64a3c119845c8f09391a05d5619bb"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "33fc0403-a268-44f1-8c98-d05aff1b99ae",
        "line": "5",
        "column": "15",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "(e,n){\"object\"==typeof exports\u0026\u0026\"object\"==typeof module?module.exports=n():\"function\"==typeof t\u0026\u0026t.a",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "4807c0f6aef3e62c909ff9385c3439b5023a55efb92a26d434ec88bc7bb0fbc9",
        "deprecatedHashes": [
          "6f66e29f7bdf3c04d5fbfc95f7b4ab10b75ffab7800dcafeb9ee1816f0c88cc7",
          "6528d04f0c34a362adc15eeeeaf52d588cbfb9375c74cd1d5a4f33d0cb0a6d50"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "edb64bef-d0b7-4215-8d11-b4e2db58b059",
        "line": "8",
        "column": "15",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "(e,n){\"object\"==typeof exports\u0026\u0026\"object\"==typeof module?module.exports=n():\"function\"==typeof t\u0026\u0026t.a",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "3ef92e4856b19a3720f291e19e7768c4fb51696ba3a39a0ad6b54e122cf7f9e2",
        "deprecatedHashes": [
          "dcb7241643ccfc557c1cae54d15791e3f9f1c4a5efc52911fbfbc1d661a2c55d",
          "5acd6c151127736fe6920ffa2636b62de4f095cbfea3edda39cb5a5766fadf72"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "58aede9d-3366-4cb6-9996-3b2e8682b02f",
        "line": "11",
        "column": "15",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "(e,r){\"object\"==typeof exports\u0026\u0026\"object\"==typeof module?module.exports=r(require(\"grapesjs\")):\"funct",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "5b0b3f0fe4ef3aa5fedf5b0b6caa07a150f51980a3d795161e2fb47bf98d7ea4",
        "deprecatedHashes": [
          "f4c0c6f9abb9f00497f36f01c6bea86da13e6d11acfe0a434597784ec226da76",
          "64c2796519e2ce5ff67b445af9fd1ef816b3d40295389bd41f6aaab5b2e9d3c8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "2d5507ba-8509-49cf-b4ee-bfafc583bf77",
        "line": "14",
        "column": "15",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "(t,n){\"object\"==typeof exports\u0026\u0026\"object\"==typeof module?module.exports=n(require(\"grapesjs\")):\"funct",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "5f6275599f82129383f69078f658a20077f04aacc6c14744624367033db25392",
        "deprecatedHashes": [
          "958ff402aad214e836fd044731a01c99df270b627c54479f580fca6223f3bbb8",
          "f6503621b049ee31dda4042a658e10f21b706a8ce46bce0155ce4065b6858c2e"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "cfe39692-c9cd-4ccf-a2f8-4ed63dcf2560",
        "line": "41",
        "column": "15",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": "(\"buffer\").Buffer;!function(e,n){\"object\"==typeof exports\u0026\u0026\"object\"==typeof module?module.exports=n(",
        "details": "(1/1) * Possible vulnerability detected: Insecure download of executable file\nDownloading executables or other sensitive files over an unencrypted connection can leave a server open to man-in-the-middle attacks (MITM). Such an attack can allow an attacker to insert arbitrary content into the downloaded file, and in the worst case, allow the attacker to execute arbitrary code on the vulnerable system.. For more information checkout the CWE-829 (https://cwe.mitre.org/data/definitions/829.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-26",
        "vulnHash": "a24c4c70020534b5896735b6bcbedd4ded19ad079313b2becb4955f7fdbb6858",
        "deprecatedHashes": [
          "e821f3933bf9ef0ade3c3df849129d9b463fb7da849f5e84a007ea312466512d",
          "190298db6127203b4223be5adbf8c3afdc577716f8d29be9d7f1f3bd1b96bda5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f024217e-edef-4339-aa70-64e5ff5450d7",
        "line": "8",
        "column": "1314282",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": ".createCipheriv(t,e,n);if(a[t])return new r({key:e,iv:n,mode:t});throw new TypeError(\"invalid suite ",
        "details": "(1/1) * Possible vulnerability detected: Encryption Algorithms Weak\nTo perform secure cryptography, operation modes and padding scheme are essentials and should be used correctly according to the encryption algorithm:For block cipher encryption algorithms (like AES), the GCM (Galois Counter Mode) mode that works internally with zero/no padding scheme, is recommended. At the opposite, these modes and/or schemes are highly discouraged:Electronic Codebook (ECB) mode is vulnerable because it doesn't provide serious message confidentiality: under a given key any given plaintext block always gets encrypted to the same ciphertext block.Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is vulnerable to padding oracle attacks.RSA encryption algorithm should be used with the recommended padding scheme (OAEP). More specifically for block cipher, it's not recommended to use algorithm with a block size inferior than 128 bits. For more information checkout the CWE-327 (https://cwe.mitre.org/data/definitions/327.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-49",
        "vulnHash": "bac1000996ac81d52403d69e0de828207434585ac9e5a1b9575fa07f1f554137",
        "deprecatedHashes": [
          "bce56063bff5bc2bdd8abe4e09ec2fda8c466eef10998f53053b53d04ffe3d68",
          "6236f467845bb33760857ccd5efab8712891c1672f4f3f9bd1595465a603ca9c"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "3ebbfabf-03f4-4ac3-b5f1-e5dae3edb49b",
        "line": "41",
        "column": "1313308",
        "confidence": "MEDIUM",
        "file": "plugins\\GrapesJsBuilderBundle\\Assets\\library\\js\\dist\\builder.js",
        "code": ".createCipheriv(t,e,n);if(a[t])return new r({key:e,iv:n,mode:t});throw new TypeError(\"invalid suite ",
        "details": "(1/1) * Possible vulnerability detected: Encryption Algorithms Weak\nTo perform secure cryptography, operation modes and padding scheme are essentials and should be used correctly according to the encryption algorithm:For block cipher encryption algorithms (like AES), the GCM (Galois Counter Mode) mode that works internally with zero/no padding scheme, is recommended. At the opposite, these modes and/or schemes are highly discouraged:Electronic Codebook (ECB) mode is vulnerable because it doesn't provide serious message confidentiality: under a given key any given plaintext block always gets encrypted to the same ciphertext block.Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is vulnerable to padding oracle attacks.RSA encryption algorithm should be used with the recommended padding scheme (OAEP). More specifically for block cipher, it's not recommended to use algorithm with a block size inferior than 128 bits. For more information checkout the CWE-327 (https://cwe.mitre.org/data/definitions/327.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "MEDIUM",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-49",
        "vulnHash": "b28dc601670b9d644c1703292e91e4c882f93569a6c65830b8f11ae3f6d13221",
        "deprecatedHashes": [
          "d75afe6824478ad872a4c03168e44ded01a3cee264a64c1e1d3af5dffc676eb8",
          "86aefcfc52bc346f448253ab54ee25c77d0aaf823617f04227c492d23b13fdb8"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "60f7b746-018d-4e4d-af76-410280e9ad09",
        "line": "12468",
        "column": "2",
        "confidence": "HIGH",
        "file": "app\\bundles\\CoreBundle\\Assets\\js\\libraries\\filemanager\\elfinder\\dist\\js\\elfinder.full.js",
        "code": "secure  : false",
        "details": "(1/1) * Possible vulnerability detected: Creating cookies without the \"secure\" flag\nWhen a cookie is protected with the secure attribute set to true it will not be send by the browser over an unencrypted HTTP request and thus cannot be observed by an unauthorized person during a man-in-the-middle attack. It is recommended to use HTTPs everywhere so setting the secure flag to true should be the default behaviour when creating cookies. For more information checkout the OWASP A3:2017 (https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "LOW",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-47",
        "vulnHash": "5f44457ac336010f259088a295066decbfc04e6e199471a19cf133a3315fef81",
        "deprecatedHashes": [
          "9272158090b2620d28397bfc4ea70360013b39e67ff67836ca4153ac675ff865",
          "484aad6c6cebb5bb35054f947b342186e8e72599249724a133a28f8ebbea30da"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "05785b63-7bd3-40c7-8812-8ccaf850b6f0",
        "line": "5531",
        "column": "295",
        "confidence": "HIGH",
        "file": "media\\js\\libraries.js",
        "code": ".setOptions=function(_options){var highlightedDates={};options=$.extend(true,{},options,_options);if",
        "details": "(1/1) * Possible vulnerability detected: No Disable Sanitize Html\nTo reduce the risk of cross-site scripting attacks, templating systems, such as Twig, Django, Smarty, Groovy's template engine, allow configuration of automatic variable escaping before rendering templates. When escape occurs, characters that make sense to the browser (eg: \u003ca\u003e) will be transformed/replaced with escaped/sanitized values (eg: \u0026 lt;a\u0026 gt; ). Enable auto-escaping by default and continue to review the use of inputs in order to be sure that the chosen auto-escaping strategy is the right one. For more information checkout the CWE-79 (https://cwe.mitre.org/data/definitions/79.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "LOW",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-52",
        "vulnHash": "290f3f41b57cd92fa6b458506818b6db121a118740fbeddf939529f8aa61b6fa",
        "deprecatedHashes": [
          "9f356ea6c37e2f563c936084c705127651f444c4f12ec566c9737a60f8d55100",
          "87dbcc831374109937d7ba3f8d922c8958cd2376977dd3c4a7edd7d26701057d"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9865039-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "f836dc60-be88-4ae2-82df-011168380bde",
        "line": "5314",
        "column": "382",
        "confidence": "HIGH",
        "file": "media\\js\\libraries.js",
        "code": ".renderer.paint=function(style,anchor,extents){var segments=self.getSegments(),p=\"\",offset=[0,0];if(",
        "details": "(1/1) * Possible vulnerability detected: No Disable Sanitize Html\nTo reduce the risk of cross-site scripting attacks, templating systems, such as Twig, Django, Smarty, Groovy's template engine, allow configuration of automatic variable escaping before rendering templates. When escape occurs, characters that make sense to the browser (eg: \u003ca\u003e) will be transformed/replaced with escaped/sanitized values (eg: \u0026 lt;a\u0026 gt; ). Enable auto-escaping by default and continue to review the use of inputs in order to be sure that the chosen auto-escaping strategy is the right one. For more information checkout the CWE-79 (https://cwe.mitre.org/data/definitions/79.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "LOW",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-52",
        "vulnHash": "9f6ddf03215027c0987675f1c99becd46bdeb572561269cbbb65ff956c412fa2",
        "deprecatedHashes": [
          "8a3494e5ac1ead23a8e1591b390b9329b390bae847b78fb7e3cfc789046f9e8c",
          "5d34bcd1ec9bf90a2ecebc8ff92292d8d3d0c0e393800dc2cc3833407f9a5bf9"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "7d902ac4-b990-4893-ab8f-e008f9edb26e",
        "line": "5531",
        "column": "295",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\libraries.js",
        "code": ".setOptions=function(_options){var highlightedDates={};options=$.extend(true,{},options,_options);if",
        "details": "(1/1) * Possible vulnerability detected: No Disable Sanitize Html\nTo reduce the risk of cross-site scripting attacks, templating systems, such as Twig, Django, Smarty, Groovy's template engine, allow configuration of automatic variable escaping before rendering templates. When escape occurs, characters that make sense to the browser (eg: \u003ca\u003e) will be transformed/replaced with escaped/sanitized values (eg: \u0026 lt;a\u0026 gt; ). Enable auto-escaping by default and continue to review the use of inputs in order to be sure that the chosen auto-escaping strategy is the right one. For more information checkout the CWE-79 (https://cwe.mitre.org/data/definitions/79.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "LOW",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-52",
        "vulnHash": "e80529dab257f2aad35fb731fb6eb50644330b0d4d040926eed5401c8bd94e9a",
        "deprecatedHashes": [
          "836742dff44bd5268413e2b92c4950c08d360cca953712689e67598a0b553d7d",
          "3e3278d99fc2b16e30c7209fe295736cd773f8a096ce0c022df78e52b7d1fa6f"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    },
    {
      "vulnerabilityID": "00000000-0000-0000-0000-000000000000",
      "analysisID": "8276f382-76de-4662-b46f-08ddb5513ebf",
      "createdAt": "2023-04-17T22:02:05.9870777-04:00",
      "vulnerabilities": {
        "vulnerabilityID": "34ba3b50-f1c3-4961-b929-5f9205ec1623",
        "line": "5314",
        "column": "382",
        "confidence": "HIGH",
        "file": "app\\assets\\js\\libraries.js",
        "code": ".renderer.paint=function(style,anchor,extents){var segments=self.getSegments(),p=\"\",offset=[0,0];if(",
        "details": "(1/1) * Possible vulnerability detected: No Disable Sanitize Html\nTo reduce the risk of cross-site scripting attacks, templating systems, such as Twig, Django, Smarty, Groovy's template engine, allow configuration of automatic variable escaping before rendering templates. When escape occurs, characters that make sense to the browser (eg: \u003ca\u003e) will be transformed/replaced with escaped/sanitized values (eg: \u0026 lt;a\u0026 gt; ). Enable auto-escaping by default and continue to review the use of inputs in order to be sure that the chosen auto-escaping strategy is the right one. For more information checkout the CWE-79 (https://cwe.mitre.org/data/definitions/79.html) advisory.",
        "securityTool": "HorusecEngine",
        "language": "JavaScript",
        "severity": "LOW",
        "type": "Vulnerability",
        "commitAuthor": "-",
        "commitEmail": "-",
        "commitHash": "-",
        "commitMessage": "-",
        "commitDate": "-",
        "rule_id": "HS-JAVASCRIPT-52",
        "vulnHash": "1e5e38fa2ecf28cc9b9abc7687ede0719bdbf604cc1891be3ad26fa5a1a9929e",
        "deprecatedHashes": [
          "42af372c711972baef0a4e3815bb28d43b65b013596e2195856d13c8a70b6c7d",
          "bdd0a412b38a371a26ce48b18235c182ab6e1560220112d769bdcc5e2c8999d5"
        ],
        "securityToolVersion": "",
        "securityToolInfoUri": ""
      }
    }
  ]
}